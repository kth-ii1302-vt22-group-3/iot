
Cloudometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f50  08003f50  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f58  08003f58  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000078  08003fd8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08003fd8  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc6e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192e  00000000  00000000  0002cd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002e648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002ef00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260bc  00000000  00000000  0002f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9d8  00000000  00000000  000557dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9e5e  00000000  00000000  000601b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a012  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c98  00000000  00000000  0014a068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e30 	.word	0x08003e30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08003e30 	.word	0x08003e30

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80004d4:	f003 fc32 	bl	8003d3c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa2a 	bl	8000930 <HAL_Init>

  printf("Hello Init! \r\n");
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <main+0x3c>)
 80004de:	f002 fda3 	bl	8003028 <puts>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f81b 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f89b 	bl	8000620 <MX_GPIO_Init>

  printf("Hello GPIO! \r\n");
 80004ea:	4809      	ldr	r0, [pc, #36]	; (8000510 <main+0x40>)
 80004ec:	f002 fd9c 	bl	8003028 <puts>
  MX_USART2_UART_Init();
 80004f0:	f000 f866 	bl	80005c0 <MX_USART2_UART_Init>

  printf("Hello UART! \r\n");
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x44>)
 80004f6:	f002 fd97 	bl	8003028 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello World! \r\n");
 80004fa:	4807      	ldr	r0, [pc, #28]	; (8000518 <main+0x48>)
 80004fc:	f002 fd94 	bl	8003028 <puts>
	  HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 fa90 	bl	8000a28 <HAL_Delay>
	  printf("Hello World! \r\n");
 8000508:	e7f7      	b.n	80004fa <main+0x2a>
 800050a:	bf00      	nop
 800050c:	08003e48 	.word	0x08003e48
 8000510:	08003e58 	.word	0x08003e58
 8000514:	08003e68 	.word	0x08003e68
 8000518:	08003e78 	.word	0x08003e78

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	; 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fd06 	bl	8002f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000542:	f000 fd4b 	bl	8000fdc <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054c:	f000 f8ce 	bl	80006ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000558:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800056a:	230a      	movs	r3, #10
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fd82 	bl	8001088 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800058a:	f000 f8af 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f954 	bl	8001854 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b2:	f000 f89b 	bl	80006ec <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3758      	adds	r7, #88	; 0x58
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005c6:	4a15      	ldr	r2, [pc, #84]	; (800061c <MX_USART2_UART_Init+0x5c>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART2_UART_Init+0x58>)
 8000604:	f001 ffe8 	bl	80025d8 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800060e:	f000 f86d 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000014c 	.word	0x2000014c
 800061c:	40004400 	.word	0x40004400

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <MX_GPIO_Init+0xc4>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <MX_GPIO_Init+0xc4>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2120      	movs	r1, #32
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f000 fc77 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <MX_GPIO_Init+0xc8>)
 80006ba:	f000 fabf 	bl	8000c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006be:	2320      	movs	r3, #32
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f000 fab0 	bl	8000c3c <HAL_GPIO_Init>

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000800 	.word	0x48000800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <HAL_MspInit+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6613      	str	r3, [r2, #96]	; 0x60
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_MspInit+0x44>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <HAL_MspInit+0x44>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_MspInit+0x44>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b0ac      	sub	sp, #176	; 0xb0
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2288      	movs	r2, #136	; 0x88
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fbeb 	bl	8002f3c <memset>
  if(huart->Instance==USART2)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <HAL_UART_MspInit+0xb0>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d13b      	bne.n	80007e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000770:	2302      	movs	r3, #2
 8000772:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000774:	2300      	movs	r3, #0
 8000776:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fa6f 	bl	8001c60 <HAL_RCCEx_PeriphCLKConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000788:	f7ff ffb0 	bl	80006ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 800078e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000790:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 8000792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000796:	6593      	str	r3, [r2, #88]	; 0x58
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 800079a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a8:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007bc:	230c      	movs	r3, #12
 80007be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d4:	2307      	movs	r3, #7
 80007d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f000 fa2a 	bl	8000c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007e8:	bf00      	nop
 80007ea:	37b0      	adds	r7, #176	; 0xb0
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40004400 	.word	0x40004400
 80007f4:	40021000 	.word	0x40021000

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f8d0 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <_sbrk+0x5c>)
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <_sbrk+0x60>)
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_sbrk+0x64>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <_sbrk+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800087c:	f002 fb34 	bl	8002ee8 <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	220c      	movs	r2, #12
 8000884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e009      	b.n	80008a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_sbrk+0x64>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20018000 	.word	0x20018000
 80008ac:	00000400 	.word	0x00000400
 80008b0:	20000094 	.word	0x20000094
 80008b4:	200001e8 	.word	0x200001e8

080008b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e0:	f7ff ffea 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f002 faf3 	bl	8002ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090e:	f7ff fddf 	bl	80004d0 <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000920:	08003f60 	.word	0x08003f60
  ldr r2, =_sbss
 8000924:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000928:	200001e4 	.word	0x200001e4

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_Init+0x3c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <HAL_Init+0x3c>)
 8000940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000944:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000946:	2003      	movs	r0, #3
 8000948:	f000 f944 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094c:	2000      	movs	r0, #0
 800094e:	f000 f80f 	bl	8000970 <HAL_InitTick>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	e001      	b.n	8000962 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800095e:	f7ff fecb 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000962:	79fb      	ldrb	r3, [r7, #7]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_InitTick+0x6c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d023      	beq.n	80009cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_InitTick+0x70>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_InitTick+0x6c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f941 	bl	8000c22 <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10f      	bne.n	80009c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d809      	bhi.n	80009c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f919 	bl	8000bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_InitTick+0x74>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e007      	b.n	80009d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e004      	b.n	80009d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e001      	b.n	80009d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	200001d0 	.word	0x200001d0

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	200001d0 	.word	0x200001d0

08000a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff ffee 	bl	8000a10 <HAL_GetTick>
 8000a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a40:	d005      	beq.n	8000a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_Delay+0x44>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a4e:	bf00      	nop
 8000a50:	f7ff ffde 	bl	8000a10 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d8f7      	bhi.n	8000a50 <HAL_Delay+0x28>
  {
  }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff8e 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff47 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfc:	f7ff ff5c 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff8e 	bl	8000b28 <NVIC_EncodePriority>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5d 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffb0 	bl	8000b90 <SysTick_Config>
 8000c30:	4603      	mov	r3, r0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b087      	sub	sp, #28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4a:	e17f      	b.n	8000f4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	2101      	movs	r1, #1
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 8171 	beq.w	8000f46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d005      	beq.n	8000c7c <HAL_GPIO_Init+0x40>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d130      	bne.n	8000cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	091b      	lsrs	r3, r3, #4
 8000cc8:	f003 0201 	and.w	r2, r3, #1
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d118      	bne.n	8000d1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	08db      	lsrs	r3, r3, #3
 8000d06:	f003 0201 	and.w	r2, r3, #1
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d017      	beq.n	8000d58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d123      	bne.n	8000dac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	6939      	ldr	r1, [r7, #16]
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0203 	and.w	r2, r3, #3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80ac 	beq.w	8000f46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	4b5f      	ldr	r3, [pc, #380]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	4a5e      	ldr	r2, [pc, #376]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dfa:	4b5c      	ldr	r3, [pc, #368]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e06:	4a5a      	ldr	r2, [pc, #360]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e30:	d025      	beq.n	8000e7e <HAL_GPIO_Init+0x242>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4f      	ldr	r2, [pc, #316]	; (8000f74 <HAL_GPIO_Init+0x338>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d01f      	beq.n	8000e7a <HAL_GPIO_Init+0x23e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4e      	ldr	r2, [pc, #312]	; (8000f78 <HAL_GPIO_Init+0x33c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d019      	beq.n	8000e76 <HAL_GPIO_Init+0x23a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4d      	ldr	r2, [pc, #308]	; (8000f7c <HAL_GPIO_Init+0x340>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0x236>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4c      	ldr	r2, [pc, #304]	; (8000f80 <HAL_GPIO_Init+0x344>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00d      	beq.n	8000e6e <HAL_GPIO_Init+0x232>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4b      	ldr	r2, [pc, #300]	; (8000f84 <HAL_GPIO_Init+0x348>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x22e>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4a      	ldr	r2, [pc, #296]	; (8000f88 <HAL_GPIO_Init+0x34c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_GPIO_Init+0x22a>
 8000e62:	2306      	movs	r3, #6
 8000e64:	e00c      	b.n	8000e80 <HAL_GPIO_Init+0x244>
 8000e66:	2307      	movs	r3, #7
 8000e68:	e00a      	b.n	8000e80 <HAL_GPIO_Init+0x244>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e008      	b.n	8000e80 <HAL_GPIO_Init+0x244>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x244>
 8000e72:	2303      	movs	r3, #3
 8000e74:	e004      	b.n	8000e80 <HAL_GPIO_Init+0x244>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e002      	b.n	8000e80 <HAL_GPIO_Init+0x244>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x244>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	f002 0203 	and.w	r2, r2, #3
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4093      	lsls	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e90:	4937      	ldr	r1, [pc, #220]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e9e:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <HAL_GPIO_Init+0x350>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ec2:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <HAL_GPIO_Init+0x350>)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <HAL_GPIO_Init+0x350>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eec:	4a27      	ldr	r2, [pc, #156]	; (8000f8c <HAL_GPIO_Init+0x350>)
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <HAL_GPIO_Init+0x350>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_GPIO_Init+0x350>)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <HAL_GPIO_Init+0x350>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <HAL_GPIO_Init+0x350>)
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa22 f303 	lsr.w	r3, r2, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f47f ae78 	bne.w	8000c4c <HAL_GPIO_Init+0x10>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010000 	.word	0x40010000
 8000f74:	48000400 	.word	0x48000400
 8000f78:	48000800 	.word	0x48000800
 8000f7c:	48000c00 	.word	0x48000c00
 8000f80:	48001000 	.word	0x48001000
 8000f84:	48001400 	.word	0x48001400
 8000f88:	48001800 	.word	0x48001800
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40007000 	.word	0x40007000

08000fdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fea:	d130      	bne.n	800104e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff8:	d038      	beq.n	800106c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001002:	4a1e      	ldr	r2, [pc, #120]	; (800107c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001004:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001008:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2232      	movs	r2, #50	; 0x32
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001016:	fba2 2303 	umull	r2, r3, r2, r3
 800101a:	0c9b      	lsrs	r3, r3, #18
 800101c:	3301      	adds	r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001020:	e002      	b.n	8001028 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3b01      	subs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001034:	d102      	bne.n	800103c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f2      	bne.n	8001022 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001048:	d110      	bne.n	800106c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e00f      	b.n	800106e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800105a:	d007      	beq.n	800106c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40007000 	.word	0x40007000
 8001080:	20000000 	.word	0x20000000
 8001084:	431bde83 	.word	0x431bde83

08001088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e3d4      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800109a:	4ba1      	ldr	r3, [pc, #644]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010a4:	4b9e      	ldr	r3, [pc, #632]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80e4 	beq.w	8001284 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <HAL_RCC_OscConfig+0x4a>
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b0c      	cmp	r3, #12
 80010c6:	f040 808b 	bne.w	80011e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	f040 8087 	bne.w	80011e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010d2:	4b93      	ldr	r3, [pc, #588]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <HAL_RCC_OscConfig+0x62>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e3ac      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1a      	ldr	r2, [r3, #32]
 80010ee:	4b8c      	ldr	r3, [pc, #560]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d004      	beq.n	8001104 <HAL_RCC_OscConfig+0x7c>
 80010fa:	4b89      	ldr	r3, [pc, #548]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001102:	e005      	b.n	8001110 <HAL_RCC_OscConfig+0x88>
 8001104:	4b86      	ldr	r3, [pc, #536]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001110:	4293      	cmp	r3, r2
 8001112:	d223      	bcs.n	800115c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fd41 	bl	8001ba0 <RCC_SetFlashLatencyFromMSIRange>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e38d      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001128:	4b7d      	ldr	r3, [pc, #500]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a7c      	ldr	r2, [pc, #496]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b7a      	ldr	r3, [pc, #488]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4977      	ldr	r1, [pc, #476]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001146:	4b76      	ldr	r3, [pc, #472]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	4972      	ldr	r1, [pc, #456]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
 800115a:	e025      	b.n	80011a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800115c:	4b70      	ldr	r3, [pc, #448]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a6f      	ldr	r2, [pc, #444]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b6d      	ldr	r3, [pc, #436]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	496a      	ldr	r1, [pc, #424]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800117a:	4b69      	ldr	r3, [pc, #420]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	4965      	ldr	r1, [pc, #404]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 800118a:	4313      	orrs	r3, r2
 800118c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fd01 	bl	8001ba0 <RCC_SetFlashLatencyFromMSIRange>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e34d      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011a8:	f000 fc36 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80011ac:	4602      	mov	r2, r0
 80011ae:	4b5c      	ldr	r3, [pc, #368]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	495a      	ldr	r1, [pc, #360]	; (8001324 <HAL_RCC_OscConfig+0x29c>)
 80011ba:	5ccb      	ldrb	r3, [r1, r3]
 80011bc:	f003 031f 	and.w	r3, r3, #31
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	4a58      	ldr	r2, [pc, #352]	; (8001328 <HAL_RCC_OscConfig+0x2a0>)
 80011c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011c8:	4b58      	ldr	r3, [pc, #352]	; (800132c <HAL_RCC_OscConfig+0x2a4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fbcf 	bl	8000970 <HAL_InitTick>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d052      	beq.n	8001282 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	e331      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d032      	beq.n	800124e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011e8:	4b4d      	ldr	r3, [pc, #308]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc0c 	bl	8000a10 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011fc:	f7ff fc08 	bl	8000a10 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e31a      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800120e:	4b44      	ldr	r3, [pc, #272]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f0      	beq.n	80011fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800121a:	4b41      	ldr	r3, [pc, #260]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a40      	ldr	r2, [pc, #256]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b3e      	ldr	r3, [pc, #248]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	493b      	ldr	r1, [pc, #236]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001238:	4b39      	ldr	r3, [pc, #228]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	4936      	ldr	r1, [pc, #216]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
 800124c:	e01a      	b.n	8001284 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800124e:	4b34      	ldr	r3, [pc, #208]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a33      	ldr	r2, [pc, #204]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800125a:	f7ff fbd9 	bl	8000a10 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001262:	f7ff fbd5 	bl	8000a10 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e2e7      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001274:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f0      	bne.n	8001262 <HAL_RCC_OscConfig+0x1da>
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001282:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d074      	beq.n	800137a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2b08      	cmp	r3, #8
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x21a>
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b0c      	cmp	r3, #12
 800129a:	d10e      	bne.n	80012ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d10b      	bne.n	80012ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d064      	beq.n	8001378 <HAL_RCC_OscConfig+0x2f0>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d160      	bne.n	8001378 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e2c4      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c2:	d106      	bne.n	80012d2 <HAL_RCC_OscConfig+0x24a>
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a15      	ldr	r2, [pc, #84]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80012ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e01d      	b.n	800130e <HAL_RCC_OscConfig+0x286>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012da:	d10c      	bne.n	80012f6 <HAL_RCC_OscConfig+0x26e>
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80012e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e00b      	b.n	800130e <HAL_RCC_OscConfig+0x286>
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 80012fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_RCC_OscConfig+0x298>)
 8001308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01c      	beq.n	8001350 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fb7b 	bl	8000a10 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800131c:	e011      	b.n	8001342 <HAL_RCC_OscConfig+0x2ba>
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	08003e88 	.word	0x08003e88
 8001328:	20000000 	.word	0x20000000
 800132c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fb6e 	bl	8000a10 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	; 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e280      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001342:	4baf      	ldr	r3, [pc, #700]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x2a8>
 800134e:	e014      	b.n	800137a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fb5e 	bl	8000a10 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fb5a 	bl	8000a10 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e26c      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800136a:	4ba5      	ldr	r3, [pc, #660]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x2d0>
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d060      	beq.n	8001448 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2b04      	cmp	r3, #4
 800138a:	d005      	beq.n	8001398 <HAL_RCC_OscConfig+0x310>
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b0c      	cmp	r3, #12
 8001390:	d119      	bne.n	80013c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d116      	bne.n	80013c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001398:	4b99      	ldr	r3, [pc, #612]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_OscConfig+0x328>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e249      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b93      	ldr	r3, [pc, #588]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	061b      	lsls	r3, r3, #24
 80013be:	4990      	ldr	r1, [pc, #576]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c4:	e040      	b.n	8001448 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d023      	beq.n	8001416 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ce:	4b8c      	ldr	r3, [pc, #560]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a8b      	ldr	r2, [pc, #556]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fb19 	bl	8000a10 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fb15 	bl	8000a10 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e227      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f4:	4b82      	ldr	r3, [pc, #520]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b7f      	ldr	r3, [pc, #508]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	061b      	lsls	r3, r3, #24
 800140e:	497c      	ldr	r1, [pc, #496]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
 8001414:	e018      	b.n	8001448 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001416:	4b7a      	ldr	r3, [pc, #488]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a79      	ldr	r2, [pc, #484]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 800141c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff faf5 	bl	8000a10 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff faf1 	bl	8000a10 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e203      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800143c:	4b70      	ldr	r3, [pc, #448]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d03c      	beq.n	80014ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d01c      	beq.n	8001496 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145c:	4b68      	ldr	r3, [pc, #416]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 800145e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001462:	4a67      	ldr	r2, [pc, #412]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff fad0 	bl	8000a10 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff facc 	bl	8000a10 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e1de      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001486:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0ef      	beq.n	8001474 <HAL_RCC_OscConfig+0x3ec>
 8001494:	e01b      	b.n	80014ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001496:	4b5a      	ldr	r3, [pc, #360]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800149c:	4a58      	ldr	r2, [pc, #352]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a6:	f7ff fab3 	bl	8000a10 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ae:	f7ff faaf 	bl	8000a10 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e1c1      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c0:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80014c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1ef      	bne.n	80014ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80a6 	beq.w	8001628 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014e0:	4b47      	ldr	r3, [pc, #284]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10d      	bne.n	8001508 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	4b44      	ldr	r3, [pc, #272]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f0:	4a43      	ldr	r2, [pc, #268]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	6593      	str	r3, [r2, #88]	; 0x58
 80014f8:	4b41      	ldr	r3, [pc, #260]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001504:	2301      	movs	r3, #1
 8001506:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001508:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <HAL_RCC_OscConfig+0x57c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d118      	bne.n	8001546 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001514:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <HAL_RCC_OscConfig+0x57c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a3a      	ldr	r2, [pc, #232]	; (8001604 <HAL_RCC_OscConfig+0x57c>)
 800151a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001520:	f7ff fa76 	bl	8000a10 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001528:	f7ff fa72 	bl	8000a10 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e184      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153a:	4b32      	ldr	r3, [pc, #200]	; (8001604 <HAL_RCC_OscConfig+0x57c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d108      	bne.n	8001560 <HAL_RCC_OscConfig+0x4d8>
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001554:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800155e:	e024      	b.n	80015aa <HAL_RCC_OscConfig+0x522>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b05      	cmp	r3, #5
 8001566:	d110      	bne.n	800158a <HAL_RCC_OscConfig+0x502>
 8001568:	4b25      	ldr	r3, [pc, #148]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 800156a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156e:	4a24      	ldr	r2, [pc, #144]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157e:	4a20      	ldr	r2, [pc, #128]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001588:	e00f      	b.n	80015aa <HAL_RCC_OscConfig+0x522>
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 800158c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 800159c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a0:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80015a2:	f023 0304 	bic.w	r3, r3, #4
 80015a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d016      	beq.n	80015e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	f7ff fa2d 	bl	8000a10 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f7ff fa29 	bl	8000a10 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e139      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_RCC_OscConfig+0x578>)
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ed      	beq.n	80015ba <HAL_RCC_OscConfig+0x532>
 80015de:	e01a      	b.n	8001616 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fa16 	bl	8000a10 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015e6:	e00f      	b.n	8001608 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fa12 	bl	8000a10 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d906      	bls.n	8001608 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e122      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001608:	4b90      	ldr	r3, [pc, #576]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 800160a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e8      	bne.n	80015e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001616:	7ffb      	ldrb	r3, [r7, #31]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161c:	4b8b      	ldr	r3, [pc, #556]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	4a8a      	ldr	r2, [pc, #552]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 8001622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001626:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8108 	beq.w	8001842 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	2b02      	cmp	r3, #2
 8001638:	f040 80d0 	bne.w	80017dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800163c:	4b83      	ldr	r3, [pc, #524]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 0203 	and.w	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	429a      	cmp	r2, r3
 800164e:	d130      	bne.n	80016b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	3b01      	subs	r3, #1
 800165c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d127      	bne.n	80016b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d11f      	bne.n	80016b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800167c:	2a07      	cmp	r2, #7
 800167e:	bf14      	ite	ne
 8001680:	2201      	movne	r2, #1
 8001682:	2200      	moveq	r2, #0
 8001684:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001686:	4293      	cmp	r3, r2
 8001688:	d113      	bne.n	80016b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	3b01      	subs	r3, #1
 8001698:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d109      	bne.n	80016b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	3b01      	subs	r3, #1
 80016ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d06e      	beq.n	8001790 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b0c      	cmp	r3, #12
 80016b6:	d069      	beq.n	800178c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016b8:	4b64      	ldr	r3, [pc, #400]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016c4:	4b61      	ldr	r3, [pc, #388]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0b7      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016d4:	4b5d      	ldr	r3, [pc, #372]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a5c      	ldr	r2, [pc, #368]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80016da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016e0:	f7ff f996 	bl	8000a10 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff f992 	bl	8000a10 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e0a4      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016fa:	4b54      	ldr	r3, [pc, #336]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_RCC_OscConfig+0x7c8>)
 800170c:	4013      	ands	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001716:	3a01      	subs	r2, #1
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	4311      	orrs	r1, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001720:	0212      	lsls	r2, r2, #8
 8001722:	4311      	orrs	r1, r2
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001728:	0852      	lsrs	r2, r2, #1
 800172a:	3a01      	subs	r2, #1
 800172c:	0552      	lsls	r2, r2, #21
 800172e:	4311      	orrs	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001734:	0852      	lsrs	r2, r2, #1
 8001736:	3a01      	subs	r2, #1
 8001738:	0652      	lsls	r2, r2, #25
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001740:	0912      	lsrs	r2, r2, #4
 8001742:	0452      	lsls	r2, r2, #17
 8001744:	430a      	orrs	r2, r1
 8001746:	4941      	ldr	r1, [pc, #260]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 8001748:	4313      	orrs	r3, r2
 800174a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a3e      	ldr	r2, [pc, #248]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 8001752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001756:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001758:	4b3c      	ldr	r3, [pc, #240]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4a3b      	ldr	r2, [pc, #236]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001762:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001764:	f7ff f954 	bl	8000a10 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff f950 	bl	8000a10 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e062      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177e:	4b33      	ldr	r3, [pc, #204]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800178a:	e05a      	b.n	8001842 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e059      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d152      	bne.n	8001842 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2a      	ldr	r2, [pc, #168]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80017a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80017ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017b4:	f7ff f92c 	bl	8000a10 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff f928 	bl	8000a10 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e03a      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x734>
 80017da:	e032      	b.n	8001842 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b0c      	cmp	r3, #12
 80017e0:	d02d      	beq.n	800183e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80017e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d105      	bne.n	8001806 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 8001800:	f023 0303 	bic.w	r3, r3, #3
 8001804:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 800180c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001814:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff f8fb 	bl	8000a10 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff f8f7 	bl	8000a10 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e009      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCC_OscConfig+0x7c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f0      	bne.n	800181e <HAL_RCC_OscConfig+0x796>
 800183c:	e001      	b.n	8001842 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	f99d808c 	.word	0xf99d808c

08001854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0c8      	b.n	80019fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b66      	ldr	r3, [pc, #408]	; (8001a04 <HAL_RCC_ClockConfig+0x1b0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d910      	bls.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x1b0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	4961      	ldr	r1, [pc, #388]	; (8001a04 <HAL_RCC_ClockConfig+0x1b0>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_ClockConfig+0x1b0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b0      	b.n	80019fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d04c      	beq.n	800193e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ac:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d121      	bne.n	80018fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e09e      	b.n	80019fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d115      	bne.n	80018fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e092      	b.n	80019fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d107      	bne.n	80018ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e086      	b.n	80019fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ec:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e07e      	b.n	80019fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f023 0203 	bic.w	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	493f      	ldr	r1, [pc, #252]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800190e:	f7ff f87f 	bl	8000a10 <HAL_GetTick>
 8001912:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001914:	e00a      	b.n	800192c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001916:	f7ff f87b 	bl	8000a10 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e066      	b.n	80019fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192c:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 020c 	and.w	r2, r3, #12
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	429a      	cmp	r2, r3
 800193c:	d1eb      	bne.n	8001916 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	492c      	ldr	r1, [pc, #176]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 8001958:	4313      	orrs	r3, r2
 800195a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_RCC_ClockConfig+0x1b0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d210      	bcs.n	800198c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_RCC_ClockConfig+0x1b0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 0207 	bic.w	r2, r3, #7
 8001972:	4924      	ldr	r1, [pc, #144]	; (8001a04 <HAL_RCC_ClockConfig+0x1b0>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCC_ClockConfig+0x1b0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e036      	b.n	80019fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4918      	ldr	r1, [pc, #96]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4910      	ldr	r1, [pc, #64]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ca:	f000 f825 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_RCC_ClockConfig+0x1b4>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	490c      	ldr	r1, [pc, #48]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe ffbe 	bl	8000970 <HAL_InitTick>
 80019f4:	4603      	mov	r3, r0
 80019f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80019f8:	7afb      	ldrb	r3, [r7, #11]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40022000 	.word	0x40022000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08003e88 	.word	0x08003e88
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a26:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x34>
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d121      	bne.n	8001a8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d11e      	bne.n	8001a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e005      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a74:	4a2b      	ldr	r2, [pc, #172]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10d      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	e004      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001a9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d134      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0xa6>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d003      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xac>
 8001abc:	e005      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ac0:	617b      	str	r3, [r7, #20]
      break;
 8001ac2:	e005      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ac6:	617b      	str	r3, [r7, #20]
      break;
 8001ac8:	e002      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	617b      	str	r3, [r7, #20]
      break;
 8001ace:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	3301      	adds	r3, #1
 8001adc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	fb02 f203 	mul.w	r2, r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	0e5b      	lsrs	r3, r3, #25
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	3301      	adds	r3, #1
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b10:	69bb      	ldr	r3, [r7, #24]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	08003ea0 	.word	0x08003ea0
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	007a1200 	.word	0x007a1200

08001b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4904      	ldr	r1, [pc, #16]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08003e98 	.word	0x08003e98

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b78:	f7ff ffda 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0adb      	lsrs	r3, r3, #11
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08003e98 	.word	0x08003e98

08001ba0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bb8:	f7ff fa02 	bl	8000fc0 <HAL_PWREx_GetVoltageRange>
 8001bbc:	6178      	str	r0, [r7, #20]
 8001bbe:	e014      	b.n	8001bea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	4a24      	ldr	r2, [pc, #144]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6593      	str	r3, [r2, #88]	; 0x58
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bd8:	f7ff f9f2 	bl	8000fc0 <HAL_PWREx_GetVoltageRange>
 8001bdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf0:	d10b      	bne.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b80      	cmp	r3, #128	; 0x80
 8001bf6:	d919      	bls.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2ba0      	cmp	r3, #160	; 0xa0
 8001bfc:	d902      	bls.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bfe:	2302      	movs	r3, #2
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e013      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c04:	2301      	movs	r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e010      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b80      	cmp	r3, #128	; 0x80
 8001c0e:	d902      	bls.n	8001c16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c10:	2303      	movs	r3, #3
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	e00a      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d102      	bne.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e004      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b70      	cmp	r3, #112	; 0x70
 8001c26:	d101      	bne.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c28:	2301      	movs	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 0207 	bic.w	r2, r3, #7
 8001c34:	4909      	ldr	r1, [pc, #36]	; (8001c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40022000 	.word	0x40022000

08001c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c68:	2300      	movs	r3, #0
 8001c6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d041      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c84:	d02a      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c8a:	d824      	bhi.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c90:	d008      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c96:	d81e      	bhi.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca0:	d010      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ca2:	e018      	b.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ca4:	4b86      	ldr	r3, [pc, #536]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a85      	ldr	r2, [pc, #532]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cb0:	e015      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fabb 	bl	8002234 <RCCEx_PLLSAI1_Config>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cc2:	e00c      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3320      	adds	r3, #32
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fba6 	bl	800241c <RCCEx_PLLSAI2_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cd4:	e003      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	74fb      	strb	r3, [r7, #19]
      break;
 8001cda:	e000      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cde:	7cfb      	ldrb	r3, [r7, #19]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10b      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ce4:	4b76      	ldr	r3, [pc, #472]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cf2:	4973      	ldr	r1, [pc, #460]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001cfa:	e001      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cfc:	7cfb      	ldrb	r3, [r7, #19]
 8001cfe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d041      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d14:	d02a      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d1a:	d824      	bhi.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d20:	d008      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d26:	d81e      	bhi.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00a      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d010      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d32:	e018      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d34:	4b62      	ldr	r3, [pc, #392]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4a61      	ldr	r2, [pc, #388]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d40:	e015      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fa73 	bl	8002234 <RCCEx_PLLSAI1_Config>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d52:	e00c      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3320      	adds	r3, #32
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fb5e 	bl	800241c <RCCEx_PLLSAI2_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d64:	e003      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	74fb      	strb	r3, [r7, #19]
      break;
 8001d6a:	e000      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d6e:	7cfb      	ldrb	r3, [r7, #19]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10b      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d74:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d82:	494f      	ldr	r1, [pc, #316]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d8a:	e001      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d8c:	7cfb      	ldrb	r3, [r7, #19]
 8001d8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a0 	beq.w	8001ede <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001da2:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00d      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db8:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a3a      	ldr	r2, [pc, #232]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001de0:	f7fe fe16 	bl	8000a10 <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001de6:	e009      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de8:	f7fe fe12 	bl	8000a10 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d902      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	74fb      	strb	r3, [r7, #19]
        break;
 8001dfa:	e005      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dfc:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0ef      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e08:	7cfb      	ldrb	r3, [r7, #19]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d15c      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01f      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d019      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a20      	ldr	r2, [pc, #128]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d016      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fdd1 	bl	8000a10 <HAL_GetTick>
 8001e6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e70:	e00b      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe fdcd 	bl	8000a10 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d902      	bls.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	74fb      	strb	r3, [r7, #19]
            break;
 8001e88:	e006      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ec      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eae:	4904      	ldr	r1, [pc, #16]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001eb6:	e009      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	74bb      	strb	r3, [r7, #18]
 8001ebc:	e006      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ecc:	7c7b      	ldrb	r3, [r7, #17]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b9e      	ldr	r3, [pc, #632]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a9d      	ldr	r2, [pc, #628]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eea:	4b98      	ldr	r3, [pc, #608]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef0:	f023 0203 	bic.w	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	4994      	ldr	r1, [pc, #592]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f0c:	4b8f      	ldr	r3, [pc, #572]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	f023 020c 	bic.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	498c      	ldr	r1, [pc, #560]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f2e:	4b87      	ldr	r3, [pc, #540]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	4983      	ldr	r1, [pc, #524]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f50:	4b7e      	ldr	r3, [pc, #504]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	497b      	ldr	r1, [pc, #492]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	4972      	ldr	r1, [pc, #456]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f94:	4b6d      	ldr	r3, [pc, #436]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	496a      	ldr	r1, [pc, #424]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fb6:	4b65      	ldr	r3, [pc, #404]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	4961      	ldr	r1, [pc, #388]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fd8:	4b5c      	ldr	r3, [pc, #368]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	4959      	ldr	r1, [pc, #356]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ffa:	4b54      	ldr	r3, [pc, #336]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002000:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002008:	4950      	ldr	r1, [pc, #320]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800201c:	4b4b      	ldr	r3, [pc, #300]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	4948      	ldr	r1, [pc, #288]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800203e:	4b43      	ldr	r3, [pc, #268]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	493f      	ldr	r1, [pc, #252]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d028      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800206e:	4937      	ldr	r1, [pc, #220]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800207a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800207e:	d106      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002080:	4b32      	ldr	r3, [pc, #200]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a31      	ldr	r2, [pc, #196]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800208a:	60d3      	str	r3, [r2, #12]
 800208c:	e011      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002092:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002096:	d10c      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3304      	adds	r3, #4
 800209c:	2101      	movs	r1, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f8c8 	bl	8002234 <RCCEx_PLLSAI1_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d028      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	491f      	ldr	r1, [pc, #124]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020dc:	d106      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a1a      	ldr	r2, [pc, #104]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020e8:	60d3      	str	r3, [r2, #12]
 80020ea:	e011      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020f4:	d10c      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3304      	adds	r3, #4
 80020fa:	2101      	movs	r1, #1
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 f899 	bl	8002234 <RCCEx_PLLSAI1_Config>
 8002102:	4603      	mov	r3, r0
 8002104:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002106:	7cfb      	ldrb	r3, [r7, #19]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d02b      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800213a:	d109      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4a02      	ldr	r2, [pc, #8]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002146:	60d3      	str	r3, [r2, #12]
 8002148:	e014      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002158:	d10c      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3304      	adds	r3, #4
 800215e:	2101      	movs	r1, #1
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f867 	bl	8002234 <RCCEx_PLLSAI1_Config>
 8002166:	4603      	mov	r3, r0
 8002168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d02f      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800218e:	4928      	ldr	r1, [pc, #160]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800219a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800219e:	d10d      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	2102      	movs	r1, #2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f844 	bl	8002234 <RCCEx_PLLSAI1_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d014      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	74bb      	strb	r3, [r7, #18]
 80021ba:	e011      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3320      	adds	r3, #32
 80021ca:	2102      	movs	r1, #2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f925 	bl	800241c <RCCEx_PLLSAI2_Config>
 80021d2:	4603      	mov	r3, r0
 80021d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021ec:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021fa:	490d      	ldr	r1, [pc, #52]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800221e:	4904      	ldr	r1, [pc, #16]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002226:	7cbb      	ldrb	r3, [r7, #18]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000

08002234 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002242:	4b75      	ldr	r3, [pc, #468]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d018      	beq.n	8002280 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800224e:	4b72      	ldr	r3, [pc, #456]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f003 0203 	and.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d10d      	bne.n	800227a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
       ||
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002266:	4b6c      	ldr	r3, [pc, #432]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
       ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d047      	beq.n	800230a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	e044      	b.n	800230a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d018      	beq.n	80022ba <RCCEx_PLLSAI1_Config+0x86>
 8002288:	2b03      	cmp	r3, #3
 800228a:	d825      	bhi.n	80022d8 <RCCEx_PLLSAI1_Config+0xa4>
 800228c:	2b01      	cmp	r3, #1
 800228e:	d002      	beq.n	8002296 <RCCEx_PLLSAI1_Config+0x62>
 8002290:	2b02      	cmp	r3, #2
 8002292:	d009      	beq.n	80022a8 <RCCEx_PLLSAI1_Config+0x74>
 8002294:	e020      	b.n	80022d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002296:	4b60      	ldr	r3, [pc, #384]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d11d      	bne.n	80022de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a6:	e01a      	b.n	80022de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022a8:	4b5b      	ldr	r3, [pc, #364]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d116      	bne.n	80022e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b8:	e013      	b.n	80022e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022ba:	4b57      	ldr	r3, [pc, #348]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022c6:	4b54      	ldr	r3, [pc, #336]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022d6:	e006      	b.n	80022e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
      break;
 80022dc:	e004      	b.n	80022e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022de:	bf00      	nop
 80022e0:	e002      	b.n	80022e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022ee:	4b4a      	ldr	r3, [pc, #296]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	430b      	orrs	r3, r1
 8002304:	4944      	ldr	r1, [pc, #272]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d17d      	bne.n	800240c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002310:	4b41      	ldr	r3, [pc, #260]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a40      	ldr	r2, [pc, #256]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002316:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800231a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800231c:	f7fe fb78 	bl	8000a10 <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002322:	e009      	b.n	8002338 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002324:	f7fe fb74 	bl	8000a10 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d902      	bls.n	8002338 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	73fb      	strb	r3, [r7, #15]
        break;
 8002336:	e005      	b.n	8002344 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002338:	4b37      	ldr	r3, [pc, #220]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ef      	bne.n	8002324 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d160      	bne.n	800240c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d111      	bne.n	8002374 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002350:	4b31      	ldr	r3, [pc, #196]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6892      	ldr	r2, [r2, #8]
 8002360:	0211      	lsls	r1, r2, #8
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68d2      	ldr	r2, [r2, #12]
 8002366:	0912      	lsrs	r2, r2, #4
 8002368:	0452      	lsls	r2, r2, #17
 800236a:	430a      	orrs	r2, r1
 800236c:	492a      	ldr	r1, [pc, #168]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	610b      	str	r3, [r1, #16]
 8002372:	e027      	b.n	80023c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d112      	bne.n	80023a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800237a:	4b27      	ldr	r3, [pc, #156]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002382:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6892      	ldr	r2, [r2, #8]
 800238a:	0211      	lsls	r1, r2, #8
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6912      	ldr	r2, [r2, #16]
 8002390:	0852      	lsrs	r2, r2, #1
 8002392:	3a01      	subs	r2, #1
 8002394:	0552      	lsls	r2, r2, #21
 8002396:	430a      	orrs	r2, r1
 8002398:	491f      	ldr	r1, [pc, #124]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	610b      	str	r3, [r1, #16]
 800239e:	e011      	b.n	80023c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6892      	ldr	r2, [r2, #8]
 80023b0:	0211      	lsls	r1, r2, #8
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6952      	ldr	r2, [r2, #20]
 80023b6:	0852      	lsrs	r2, r2, #1
 80023b8:	3a01      	subs	r2, #1
 80023ba:	0652      	lsls	r2, r2, #25
 80023bc:	430a      	orrs	r2, r1
 80023be:	4916      	ldr	r1, [pc, #88]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a13      	ldr	r2, [pc, #76]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7fe fb1e 	bl	8000a10 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023d6:	e009      	b.n	80023ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023d8:	f7fe fb1a 	bl	8000a10 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d902      	bls.n	80023ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	73fb      	strb	r3, [r7, #15]
          break;
 80023ea:	e005      	b.n	80023f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ef      	beq.n	80023d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	4904      	ldr	r1, [pc, #16]	; (8002418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000

0800241c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800242a:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d018      	beq.n	8002468 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002436:	4b67      	ldr	r3, [pc, #412]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0203 	and.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d10d      	bne.n	8002462 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
       ||
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800244e:	4b61      	ldr	r3, [pc, #388]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
       ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d047      	beq.n	80024f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	e044      	b.n	80024f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d018      	beq.n	80024a2 <RCCEx_PLLSAI2_Config+0x86>
 8002470:	2b03      	cmp	r3, #3
 8002472:	d825      	bhi.n	80024c0 <RCCEx_PLLSAI2_Config+0xa4>
 8002474:	2b01      	cmp	r3, #1
 8002476:	d002      	beq.n	800247e <RCCEx_PLLSAI2_Config+0x62>
 8002478:	2b02      	cmp	r3, #2
 800247a:	d009      	beq.n	8002490 <RCCEx_PLLSAI2_Config+0x74>
 800247c:	e020      	b.n	80024c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800247e:	4b55      	ldr	r3, [pc, #340]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11d      	bne.n	80024c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248e:	e01a      	b.n	80024c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002490:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	d116      	bne.n	80024ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a0:	e013      	b.n	80024ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024a2:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ae:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024be:	e006      	b.n	80024ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e004      	b.n	80024d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024c6:	bf00      	nop
 80024c8:	e002      	b.n	80024d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ca:	bf00      	nop
 80024cc:	e000      	b.n	80024d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024d6:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	430b      	orrs	r3, r1
 80024ec:	4939      	ldr	r1, [pc, #228]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d167      	bne.n	80025c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a35      	ldr	r2, [pc, #212]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002504:	f7fe fa84 	bl	8000a10 <HAL_GetTick>
 8002508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800250a:	e009      	b.n	8002520 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800250c:	f7fe fa80 	bl	8000a10 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d902      	bls.n	8002520 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	73fb      	strb	r3, [r7, #15]
        break;
 800251e:	e005      	b.n	800252c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002520:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ef      	bne.n	800250c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d14a      	bne.n	80025c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d111      	bne.n	800255c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002538:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6892      	ldr	r2, [r2, #8]
 8002548:	0211      	lsls	r1, r2, #8
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68d2      	ldr	r2, [r2, #12]
 800254e:	0912      	lsrs	r2, r2, #4
 8002550:	0452      	lsls	r2, r2, #17
 8002552:	430a      	orrs	r2, r1
 8002554:	491f      	ldr	r1, [pc, #124]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002556:	4313      	orrs	r3, r2
 8002558:	614b      	str	r3, [r1, #20]
 800255a:	e011      	b.n	8002580 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002564:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6892      	ldr	r2, [r2, #8]
 800256c:	0211      	lsls	r1, r2, #8
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6912      	ldr	r2, [r2, #16]
 8002572:	0852      	lsrs	r2, r2, #1
 8002574:	3a01      	subs	r2, #1
 8002576:	0652      	lsls	r2, r2, #25
 8002578:	430a      	orrs	r2, r1
 800257a:	4916      	ldr	r1, [pc, #88]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257c:	4313      	orrs	r3, r2
 800257e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7fe fa40 	bl	8000a10 <HAL_GetTick>
 8002590:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002592:	e009      	b.n	80025a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002594:	f7fe fa3c 	bl	8000a10 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d902      	bls.n	80025a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	73fb      	strb	r3, [r7, #15]
          break;
 80025a6:	e005      	b.n	80025b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ef      	beq.n	8002594 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4904      	ldr	r1, [pc, #16]	; (80025d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e040      	b.n	800266c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe f8a0 	bl	8000740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f82c 	bl	8002674 <UART_SetConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e022      	b.n	800266c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 faaa 	bl	8002b88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fb31 	bl	8002ccc <UART_CheckIdleState>
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4313      	orrs	r3, r2
 8002696:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4bad      	ldr	r3, [pc, #692]	; (8002954 <UART_SetConfig+0x2e0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	69f9      	ldr	r1, [r7, #28]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4aa2      	ldr	r2, [pc, #648]	; (8002958 <UART_SetConfig+0x2e4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a99      	ldr	r2, [pc, #612]	; (800295c <UART_SetConfig+0x2e8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d121      	bne.n	800273e <UART_SetConfig+0xca>
 80026fa:	4b99      	ldr	r3, [pc, #612]	; (8002960 <UART_SetConfig+0x2ec>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b03      	cmp	r3, #3
 8002706:	d817      	bhi.n	8002738 <UART_SetConfig+0xc4>
 8002708:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <UART_SetConfig+0x9c>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002721 	.word	0x08002721
 8002714:	0800272d 	.word	0x0800272d
 8002718:	08002727 	.word	0x08002727
 800271c:	08002733 	.word	0x08002733
 8002720:	2301      	movs	r3, #1
 8002722:	76fb      	strb	r3, [r7, #27]
 8002724:	e0e7      	b.n	80028f6 <UART_SetConfig+0x282>
 8002726:	2302      	movs	r3, #2
 8002728:	76fb      	strb	r3, [r7, #27]
 800272a:	e0e4      	b.n	80028f6 <UART_SetConfig+0x282>
 800272c:	2304      	movs	r3, #4
 800272e:	76fb      	strb	r3, [r7, #27]
 8002730:	e0e1      	b.n	80028f6 <UART_SetConfig+0x282>
 8002732:	2308      	movs	r3, #8
 8002734:	76fb      	strb	r3, [r7, #27]
 8002736:	e0de      	b.n	80028f6 <UART_SetConfig+0x282>
 8002738:	2310      	movs	r3, #16
 800273a:	76fb      	strb	r3, [r7, #27]
 800273c:	e0db      	b.n	80028f6 <UART_SetConfig+0x282>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a88      	ldr	r2, [pc, #544]	; (8002964 <UART_SetConfig+0x2f0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d132      	bne.n	80027ae <UART_SetConfig+0x13a>
 8002748:	4b85      	ldr	r3, [pc, #532]	; (8002960 <UART_SetConfig+0x2ec>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d828      	bhi.n	80027a8 <UART_SetConfig+0x134>
 8002756:	a201      	add	r2, pc, #4	; (adr r2, 800275c <UART_SetConfig+0xe8>)
 8002758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275c:	08002791 	.word	0x08002791
 8002760:	080027a9 	.word	0x080027a9
 8002764:	080027a9 	.word	0x080027a9
 8002768:	080027a9 	.word	0x080027a9
 800276c:	0800279d 	.word	0x0800279d
 8002770:	080027a9 	.word	0x080027a9
 8002774:	080027a9 	.word	0x080027a9
 8002778:	080027a9 	.word	0x080027a9
 800277c:	08002797 	.word	0x08002797
 8002780:	080027a9 	.word	0x080027a9
 8002784:	080027a9 	.word	0x080027a9
 8002788:	080027a9 	.word	0x080027a9
 800278c:	080027a3 	.word	0x080027a3
 8002790:	2300      	movs	r3, #0
 8002792:	76fb      	strb	r3, [r7, #27]
 8002794:	e0af      	b.n	80028f6 <UART_SetConfig+0x282>
 8002796:	2302      	movs	r3, #2
 8002798:	76fb      	strb	r3, [r7, #27]
 800279a:	e0ac      	b.n	80028f6 <UART_SetConfig+0x282>
 800279c:	2304      	movs	r3, #4
 800279e:	76fb      	strb	r3, [r7, #27]
 80027a0:	e0a9      	b.n	80028f6 <UART_SetConfig+0x282>
 80027a2:	2308      	movs	r3, #8
 80027a4:	76fb      	strb	r3, [r7, #27]
 80027a6:	e0a6      	b.n	80028f6 <UART_SetConfig+0x282>
 80027a8:	2310      	movs	r3, #16
 80027aa:	76fb      	strb	r3, [r7, #27]
 80027ac:	e0a3      	b.n	80028f6 <UART_SetConfig+0x282>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6d      	ldr	r2, [pc, #436]	; (8002968 <UART_SetConfig+0x2f4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d120      	bne.n	80027fa <UART_SetConfig+0x186>
 80027b8:	4b69      	ldr	r3, [pc, #420]	; (8002960 <UART_SetConfig+0x2ec>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027c2:	2b30      	cmp	r3, #48	; 0x30
 80027c4:	d013      	beq.n	80027ee <UART_SetConfig+0x17a>
 80027c6:	2b30      	cmp	r3, #48	; 0x30
 80027c8:	d814      	bhi.n	80027f4 <UART_SetConfig+0x180>
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d009      	beq.n	80027e2 <UART_SetConfig+0x16e>
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d810      	bhi.n	80027f4 <UART_SetConfig+0x180>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <UART_SetConfig+0x168>
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d006      	beq.n	80027e8 <UART_SetConfig+0x174>
 80027da:	e00b      	b.n	80027f4 <UART_SetConfig+0x180>
 80027dc:	2300      	movs	r3, #0
 80027de:	76fb      	strb	r3, [r7, #27]
 80027e0:	e089      	b.n	80028f6 <UART_SetConfig+0x282>
 80027e2:	2302      	movs	r3, #2
 80027e4:	76fb      	strb	r3, [r7, #27]
 80027e6:	e086      	b.n	80028f6 <UART_SetConfig+0x282>
 80027e8:	2304      	movs	r3, #4
 80027ea:	76fb      	strb	r3, [r7, #27]
 80027ec:	e083      	b.n	80028f6 <UART_SetConfig+0x282>
 80027ee:	2308      	movs	r3, #8
 80027f0:	76fb      	strb	r3, [r7, #27]
 80027f2:	e080      	b.n	80028f6 <UART_SetConfig+0x282>
 80027f4:	2310      	movs	r3, #16
 80027f6:	76fb      	strb	r3, [r7, #27]
 80027f8:	e07d      	b.n	80028f6 <UART_SetConfig+0x282>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5b      	ldr	r2, [pc, #364]	; (800296c <UART_SetConfig+0x2f8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d120      	bne.n	8002846 <UART_SetConfig+0x1d2>
 8002804:	4b56      	ldr	r3, [pc, #344]	; (8002960 <UART_SetConfig+0x2ec>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800280e:	2bc0      	cmp	r3, #192	; 0xc0
 8002810:	d013      	beq.n	800283a <UART_SetConfig+0x1c6>
 8002812:	2bc0      	cmp	r3, #192	; 0xc0
 8002814:	d814      	bhi.n	8002840 <UART_SetConfig+0x1cc>
 8002816:	2b80      	cmp	r3, #128	; 0x80
 8002818:	d009      	beq.n	800282e <UART_SetConfig+0x1ba>
 800281a:	2b80      	cmp	r3, #128	; 0x80
 800281c:	d810      	bhi.n	8002840 <UART_SetConfig+0x1cc>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <UART_SetConfig+0x1b4>
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d006      	beq.n	8002834 <UART_SetConfig+0x1c0>
 8002826:	e00b      	b.n	8002840 <UART_SetConfig+0x1cc>
 8002828:	2300      	movs	r3, #0
 800282a:	76fb      	strb	r3, [r7, #27]
 800282c:	e063      	b.n	80028f6 <UART_SetConfig+0x282>
 800282e:	2302      	movs	r3, #2
 8002830:	76fb      	strb	r3, [r7, #27]
 8002832:	e060      	b.n	80028f6 <UART_SetConfig+0x282>
 8002834:	2304      	movs	r3, #4
 8002836:	76fb      	strb	r3, [r7, #27]
 8002838:	e05d      	b.n	80028f6 <UART_SetConfig+0x282>
 800283a:	2308      	movs	r3, #8
 800283c:	76fb      	strb	r3, [r7, #27]
 800283e:	e05a      	b.n	80028f6 <UART_SetConfig+0x282>
 8002840:	2310      	movs	r3, #16
 8002842:	76fb      	strb	r3, [r7, #27]
 8002844:	e057      	b.n	80028f6 <UART_SetConfig+0x282>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a49      	ldr	r2, [pc, #292]	; (8002970 <UART_SetConfig+0x2fc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d125      	bne.n	800289c <UART_SetConfig+0x228>
 8002850:	4b43      	ldr	r3, [pc, #268]	; (8002960 <UART_SetConfig+0x2ec>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800285e:	d017      	beq.n	8002890 <UART_SetConfig+0x21c>
 8002860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002864:	d817      	bhi.n	8002896 <UART_SetConfig+0x222>
 8002866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800286a:	d00b      	beq.n	8002884 <UART_SetConfig+0x210>
 800286c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002870:	d811      	bhi.n	8002896 <UART_SetConfig+0x222>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <UART_SetConfig+0x20a>
 8002876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287a:	d006      	beq.n	800288a <UART_SetConfig+0x216>
 800287c:	e00b      	b.n	8002896 <UART_SetConfig+0x222>
 800287e:	2300      	movs	r3, #0
 8002880:	76fb      	strb	r3, [r7, #27]
 8002882:	e038      	b.n	80028f6 <UART_SetConfig+0x282>
 8002884:	2302      	movs	r3, #2
 8002886:	76fb      	strb	r3, [r7, #27]
 8002888:	e035      	b.n	80028f6 <UART_SetConfig+0x282>
 800288a:	2304      	movs	r3, #4
 800288c:	76fb      	strb	r3, [r7, #27]
 800288e:	e032      	b.n	80028f6 <UART_SetConfig+0x282>
 8002890:	2308      	movs	r3, #8
 8002892:	76fb      	strb	r3, [r7, #27]
 8002894:	e02f      	b.n	80028f6 <UART_SetConfig+0x282>
 8002896:	2310      	movs	r3, #16
 8002898:	76fb      	strb	r3, [r7, #27]
 800289a:	e02c      	b.n	80028f6 <UART_SetConfig+0x282>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a2d      	ldr	r2, [pc, #180]	; (8002958 <UART_SetConfig+0x2e4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d125      	bne.n	80028f2 <UART_SetConfig+0x27e>
 80028a6:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <UART_SetConfig+0x2ec>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028b4:	d017      	beq.n	80028e6 <UART_SetConfig+0x272>
 80028b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028ba:	d817      	bhi.n	80028ec <UART_SetConfig+0x278>
 80028bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c0:	d00b      	beq.n	80028da <UART_SetConfig+0x266>
 80028c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c6:	d811      	bhi.n	80028ec <UART_SetConfig+0x278>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <UART_SetConfig+0x260>
 80028cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d0:	d006      	beq.n	80028e0 <UART_SetConfig+0x26c>
 80028d2:	e00b      	b.n	80028ec <UART_SetConfig+0x278>
 80028d4:	2300      	movs	r3, #0
 80028d6:	76fb      	strb	r3, [r7, #27]
 80028d8:	e00d      	b.n	80028f6 <UART_SetConfig+0x282>
 80028da:	2302      	movs	r3, #2
 80028dc:	76fb      	strb	r3, [r7, #27]
 80028de:	e00a      	b.n	80028f6 <UART_SetConfig+0x282>
 80028e0:	2304      	movs	r3, #4
 80028e2:	76fb      	strb	r3, [r7, #27]
 80028e4:	e007      	b.n	80028f6 <UART_SetConfig+0x282>
 80028e6:	2308      	movs	r3, #8
 80028e8:	76fb      	strb	r3, [r7, #27]
 80028ea:	e004      	b.n	80028f6 <UART_SetConfig+0x282>
 80028ec:	2310      	movs	r3, #16
 80028ee:	76fb      	strb	r3, [r7, #27]
 80028f0:	e001      	b.n	80028f6 <UART_SetConfig+0x282>
 80028f2:	2310      	movs	r3, #16
 80028f4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <UART_SetConfig+0x2e4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	f040 8087 	bne.w	8002a10 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002902:	7efb      	ldrb	r3, [r7, #27]
 8002904:	2b08      	cmp	r3, #8
 8002906:	d837      	bhi.n	8002978 <UART_SetConfig+0x304>
 8002908:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <UART_SetConfig+0x29c>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002935 	.word	0x08002935
 8002914:	08002979 	.word	0x08002979
 8002918:	0800293d 	.word	0x0800293d
 800291c:	08002979 	.word	0x08002979
 8002920:	08002943 	.word	0x08002943
 8002924:	08002979 	.word	0x08002979
 8002928:	08002979 	.word	0x08002979
 800292c:	08002979 	.word	0x08002979
 8002930:	0800294b 	.word	0x0800294b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002934:	f7ff f908 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002938:	6178      	str	r0, [r7, #20]
        break;
 800293a:	e022      	b.n	8002982 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800293c:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <UART_SetConfig+0x300>)
 800293e:	617b      	str	r3, [r7, #20]
        break;
 8002940:	e01f      	b.n	8002982 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002942:	f7ff f869 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 8002946:	6178      	str	r0, [r7, #20]
        break;
 8002948:	e01b      	b.n	8002982 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800294a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800294e:	617b      	str	r3, [r7, #20]
        break;
 8002950:	e017      	b.n	8002982 <UART_SetConfig+0x30e>
 8002952:	bf00      	nop
 8002954:	efff69f3 	.word	0xefff69f3
 8002958:	40008000 	.word	0x40008000
 800295c:	40013800 	.word	0x40013800
 8002960:	40021000 	.word	0x40021000
 8002964:	40004400 	.word	0x40004400
 8002968:	40004800 	.word	0x40004800
 800296c:	40004c00 	.word	0x40004c00
 8002970:	40005000 	.word	0x40005000
 8002974:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	76bb      	strb	r3, [r7, #26]
        break;
 8002980:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80f1 	beq.w	8002b6c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	429a      	cmp	r2, r3
 8002998:	d305      	bcc.n	80029a6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d902      	bls.n	80029ac <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	76bb      	strb	r3, [r7, #26]
 80029aa:	e0df      	b.n	8002b6c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f04f 0100 	mov.w	r1, #0
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	020b      	lsls	r3, r1, #8
 80029be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80029c2:	0202      	lsls	r2, r0, #8
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	6849      	ldr	r1, [r1, #4]
 80029c8:	0849      	lsrs	r1, r1, #1
 80029ca:	4608      	mov	r0, r1
 80029cc:	f04f 0100 	mov.w	r1, #0
 80029d0:	1814      	adds	r4, r2, r0
 80029d2:	eb43 0501 	adc.w	r5, r3, r1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	461a      	mov	r2, r3
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	4620      	mov	r0, r4
 80029e2:	4629      	mov	r1, r5
 80029e4:	f7fd fbf8 	bl	80001d8 <__aeabi_uldivmod>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4613      	mov	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029f6:	d308      	bcc.n	8002a0a <UART_SetConfig+0x396>
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029fe:	d204      	bcs.n	8002a0a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	e0b0      	b.n	8002b6c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	76bb      	strb	r3, [r7, #26]
 8002a0e:	e0ad      	b.n	8002b6c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a18:	d15b      	bne.n	8002ad2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002a1a:	7efb      	ldrb	r3, [r7, #27]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d828      	bhi.n	8002a72 <UART_SetConfig+0x3fe>
 8002a20:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <UART_SetConfig+0x3b4>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a4d 	.word	0x08002a4d
 8002a2c:	08002a55 	.word	0x08002a55
 8002a30:	08002a5d 	.word	0x08002a5d
 8002a34:	08002a73 	.word	0x08002a73
 8002a38:	08002a63 	.word	0x08002a63
 8002a3c:	08002a73 	.word	0x08002a73
 8002a40:	08002a73 	.word	0x08002a73
 8002a44:	08002a73 	.word	0x08002a73
 8002a48:	08002a6b 	.word	0x08002a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a4c:	f7ff f87c 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002a50:	6178      	str	r0, [r7, #20]
        break;
 8002a52:	e013      	b.n	8002a7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a54:	f7ff f88e 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002a58:	6178      	str	r0, [r7, #20]
        break;
 8002a5a:	e00f      	b.n	8002a7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a5c:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <UART_SetConfig+0x510>)
 8002a5e:	617b      	str	r3, [r7, #20]
        break;
 8002a60:	e00c      	b.n	8002a7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a62:	f7fe ffd9 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 8002a66:	6178      	str	r0, [r7, #20]
        break;
 8002a68:	e008      	b.n	8002a7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a6e:	617b      	str	r3, [r7, #20]
        break;
 8002a70:	e004      	b.n	8002a7c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	76bb      	strb	r3, [r7, #26]
        break;
 8002a7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d074      	beq.n	8002b6c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005a      	lsls	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	441a      	add	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	d916      	bls.n	8002acc <UART_SetConfig+0x458>
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa4:	d212      	bcs.n	8002acc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f023 030f 	bic.w	r3, r3, #15
 8002aae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	89fb      	ldrh	r3, [r7, #14]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	89fa      	ldrh	r2, [r7, #14]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	e04f      	b.n	8002b6c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	76bb      	strb	r3, [r7, #26]
 8002ad0:	e04c      	b.n	8002b6c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ad2:	7efb      	ldrb	r3, [r7, #27]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d828      	bhi.n	8002b2a <UART_SetConfig+0x4b6>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <UART_SetConfig+0x46c>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002b05 	.word	0x08002b05
 8002ae4:	08002b0d 	.word	0x08002b0d
 8002ae8:	08002b15 	.word	0x08002b15
 8002aec:	08002b2b 	.word	0x08002b2b
 8002af0:	08002b1b 	.word	0x08002b1b
 8002af4:	08002b2b 	.word	0x08002b2b
 8002af8:	08002b2b 	.word	0x08002b2b
 8002afc:	08002b2b 	.word	0x08002b2b
 8002b00:	08002b23 	.word	0x08002b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b04:	f7ff f820 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002b08:	6178      	str	r0, [r7, #20]
        break;
 8002b0a:	e013      	b.n	8002b34 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b0c:	f7ff f832 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002b10:	6178      	str	r0, [r7, #20]
        break;
 8002b12:	e00f      	b.n	8002b34 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <UART_SetConfig+0x510>)
 8002b16:	617b      	str	r3, [r7, #20]
        break;
 8002b18:	e00c      	b.n	8002b34 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b1a:	f7fe ff7d 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 8002b1e:	6178      	str	r0, [r7, #20]
        break;
 8002b20:	e008      	b.n	8002b34 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b26:	617b      	str	r3, [r7, #20]
        break;
 8002b28:	e004      	b.n	8002b34 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	76bb      	strb	r3, [r7, #26]
        break;
 8002b32:	bf00      	nop
    }

    if (pclk != 0U)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d018      	beq.n	8002b6c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	085a      	lsrs	r2, r3, #1
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b0f      	cmp	r3, #15
 8002b52:	d909      	bls.n	8002b68 <UART_SetConfig+0x4f4>
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5a:	d205      	bcs.n	8002b68 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	e001      	b.n	8002b6c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b78:	7ebb      	ldrb	r3, [r7, #26]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bdb0      	pop	{r4, r5, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	00f42400 	.word	0x00f42400

08002b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01a      	beq.n	8002c9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c86:	d10a      	bne.n	8002c9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cdc:	f7fd fe98 	bl	8000a10 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d10e      	bne.n	8002d0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f82d 	bl	8002d5e <UART_WaitOnFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e023      	b.n	8002d56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d10e      	bne.n	8002d3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f817 	bl	8002d5e <UART_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e00d      	b.n	8002d56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b09c      	sub	sp, #112	; 0x70
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d6e:	e0a5      	b.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	f000 80a1 	beq.w	8002ebc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7fd fe49 	bl	8000a10 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x32>
 8002d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d13e      	bne.n	8002e0e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002da4:	667b      	str	r3, [r7, #100]	; 0x64
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002db0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002db4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e6      	bne.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3308      	adds	r3, #8
 8002de0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002de2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002de4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e5      	bne.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e067      	b.n	8002ede <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d04f      	beq.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e2a:	d147      	bne.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e34:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	e853 3f00 	ldrex	r3, [r3]
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
 8002e56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e6      	bne.n	8002e36 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	613b      	str	r3, [r7, #16]
   return(result);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3308      	adds	r3, #8
 8002e86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e88:	623a      	str	r2, [r7, #32]
 8002e8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	69f9      	ldr	r1, [r7, #28]
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e010      	b.n	8002ede <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	f43f af4a 	beq.w	8002d70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3770      	adds	r7, #112	; 0x70
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <__errno>:
 8002ee8:	4b01      	ldr	r3, [pc, #4]	; (8002ef0 <__errno+0x8>)
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	2000000c 	.word	0x2000000c

08002ef4 <__libc_init_array>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	4d0d      	ldr	r5, [pc, #52]	; (8002f2c <__libc_init_array+0x38>)
 8002ef8:	4c0d      	ldr	r4, [pc, #52]	; (8002f30 <__libc_init_array+0x3c>)
 8002efa:	1b64      	subs	r4, r4, r5
 8002efc:	10a4      	asrs	r4, r4, #2
 8002efe:	2600      	movs	r6, #0
 8002f00:	42a6      	cmp	r6, r4
 8002f02:	d109      	bne.n	8002f18 <__libc_init_array+0x24>
 8002f04:	4d0b      	ldr	r5, [pc, #44]	; (8002f34 <__libc_init_array+0x40>)
 8002f06:	4c0c      	ldr	r4, [pc, #48]	; (8002f38 <__libc_init_array+0x44>)
 8002f08:	f000 ff92 	bl	8003e30 <_init>
 8002f0c:	1b64      	subs	r4, r4, r5
 8002f0e:	10a4      	asrs	r4, r4, #2
 8002f10:	2600      	movs	r6, #0
 8002f12:	42a6      	cmp	r6, r4
 8002f14:	d105      	bne.n	8002f22 <__libc_init_array+0x2e>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1c:	4798      	blx	r3
 8002f1e:	3601      	adds	r6, #1
 8002f20:	e7ee      	b.n	8002f00 <__libc_init_array+0xc>
 8002f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f26:	4798      	blx	r3
 8002f28:	3601      	adds	r6, #1
 8002f2a:	e7f2      	b.n	8002f12 <__libc_init_array+0x1e>
 8002f2c:	08003f58 	.word	0x08003f58
 8002f30:	08003f58 	.word	0x08003f58
 8002f34:	08003f58 	.word	0x08003f58
 8002f38:	08003f5c 	.word	0x08003f5c

08002f3c <memset>:
 8002f3c:	4402      	add	r2, r0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d100      	bne.n	8002f46 <memset+0xa>
 8002f44:	4770      	bx	lr
 8002f46:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4a:	e7f9      	b.n	8002f40 <memset+0x4>

08002f4c <_puts_r>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	460e      	mov	r6, r1
 8002f50:	4605      	mov	r5, r0
 8002f52:	b118      	cbz	r0, 8002f5c <_puts_r+0x10>
 8002f54:	6983      	ldr	r3, [r0, #24]
 8002f56:	b90b      	cbnz	r3, 8002f5c <_puts_r+0x10>
 8002f58:	f000 fa48 	bl	80033ec <__sinit>
 8002f5c:	69ab      	ldr	r3, [r5, #24]
 8002f5e:	68ac      	ldr	r4, [r5, #8]
 8002f60:	b913      	cbnz	r3, 8002f68 <_puts_r+0x1c>
 8002f62:	4628      	mov	r0, r5
 8002f64:	f000 fa42 	bl	80033ec <__sinit>
 8002f68:	4b2c      	ldr	r3, [pc, #176]	; (800301c <_puts_r+0xd0>)
 8002f6a:	429c      	cmp	r4, r3
 8002f6c:	d120      	bne.n	8002fb0 <_puts_r+0x64>
 8002f6e:	686c      	ldr	r4, [r5, #4]
 8002f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f72:	07db      	lsls	r3, r3, #31
 8002f74:	d405      	bmi.n	8002f82 <_puts_r+0x36>
 8002f76:	89a3      	ldrh	r3, [r4, #12]
 8002f78:	0598      	lsls	r0, r3, #22
 8002f7a:	d402      	bmi.n	8002f82 <_puts_r+0x36>
 8002f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f7e:	f000 fad3 	bl	8003528 <__retarget_lock_acquire_recursive>
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	0719      	lsls	r1, r3, #28
 8002f86:	d51d      	bpl.n	8002fc4 <_puts_r+0x78>
 8002f88:	6923      	ldr	r3, [r4, #16]
 8002f8a:	b1db      	cbz	r3, 8002fc4 <_puts_r+0x78>
 8002f8c:	3e01      	subs	r6, #1
 8002f8e:	68a3      	ldr	r3, [r4, #8]
 8002f90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f94:	3b01      	subs	r3, #1
 8002f96:	60a3      	str	r3, [r4, #8]
 8002f98:	bb39      	cbnz	r1, 8002fea <_puts_r+0x9e>
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	da38      	bge.n	8003010 <_puts_r+0xc4>
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	210a      	movs	r1, #10
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	f000 f848 	bl	8003038 <__swbuf_r>
 8002fa8:	3001      	adds	r0, #1
 8002faa:	d011      	beq.n	8002fd0 <_puts_r+0x84>
 8002fac:	250a      	movs	r5, #10
 8002fae:	e011      	b.n	8002fd4 <_puts_r+0x88>
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <_puts_r+0xd4>)
 8002fb2:	429c      	cmp	r4, r3
 8002fb4:	d101      	bne.n	8002fba <_puts_r+0x6e>
 8002fb6:	68ac      	ldr	r4, [r5, #8]
 8002fb8:	e7da      	b.n	8002f70 <_puts_r+0x24>
 8002fba:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <_puts_r+0xd8>)
 8002fbc:	429c      	cmp	r4, r3
 8002fbe:	bf08      	it	eq
 8002fc0:	68ec      	ldreq	r4, [r5, #12]
 8002fc2:	e7d5      	b.n	8002f70 <_puts_r+0x24>
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f000 f888 	bl	80030dc <__swsetup_r>
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	d0dd      	beq.n	8002f8c <_puts_r+0x40>
 8002fd0:	f04f 35ff 	mov.w	r5, #4294967295
 8002fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fd6:	07da      	lsls	r2, r3, #31
 8002fd8:	d405      	bmi.n	8002fe6 <_puts_r+0x9a>
 8002fda:	89a3      	ldrh	r3, [r4, #12]
 8002fdc:	059b      	lsls	r3, r3, #22
 8002fde:	d402      	bmi.n	8002fe6 <_puts_r+0x9a>
 8002fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fe2:	f000 faa2 	bl	800352a <__retarget_lock_release_recursive>
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	bd70      	pop	{r4, r5, r6, pc}
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	da04      	bge.n	8002ff8 <_puts_r+0xac>
 8002fee:	69a2      	ldr	r2, [r4, #24]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	dc06      	bgt.n	8003002 <_puts_r+0xb6>
 8002ff4:	290a      	cmp	r1, #10
 8002ff6:	d004      	beq.n	8003002 <_puts_r+0xb6>
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	6022      	str	r2, [r4, #0]
 8002ffe:	7019      	strb	r1, [r3, #0]
 8003000:	e7c5      	b.n	8002f8e <_puts_r+0x42>
 8003002:	4622      	mov	r2, r4
 8003004:	4628      	mov	r0, r5
 8003006:	f000 f817 	bl	8003038 <__swbuf_r>
 800300a:	3001      	adds	r0, #1
 800300c:	d1bf      	bne.n	8002f8e <_puts_r+0x42>
 800300e:	e7df      	b.n	8002fd0 <_puts_r+0x84>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	250a      	movs	r5, #10
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	6022      	str	r2, [r4, #0]
 8003018:	701d      	strb	r5, [r3, #0]
 800301a:	e7db      	b.n	8002fd4 <_puts_r+0x88>
 800301c:	08003ef4 	.word	0x08003ef4
 8003020:	08003f14 	.word	0x08003f14
 8003024:	08003ed4 	.word	0x08003ed4

08003028 <puts>:
 8003028:	4b02      	ldr	r3, [pc, #8]	; (8003034 <puts+0xc>)
 800302a:	4601      	mov	r1, r0
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	f7ff bf8d 	b.w	8002f4c <_puts_r>
 8003032:	bf00      	nop
 8003034:	2000000c 	.word	0x2000000c

08003038 <__swbuf_r>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	460e      	mov	r6, r1
 800303c:	4614      	mov	r4, r2
 800303e:	4605      	mov	r5, r0
 8003040:	b118      	cbz	r0, 800304a <__swbuf_r+0x12>
 8003042:	6983      	ldr	r3, [r0, #24]
 8003044:	b90b      	cbnz	r3, 800304a <__swbuf_r+0x12>
 8003046:	f000 f9d1 	bl	80033ec <__sinit>
 800304a:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <__swbuf_r+0x98>)
 800304c:	429c      	cmp	r4, r3
 800304e:	d12b      	bne.n	80030a8 <__swbuf_r+0x70>
 8003050:	686c      	ldr	r4, [r5, #4]
 8003052:	69a3      	ldr	r3, [r4, #24]
 8003054:	60a3      	str	r3, [r4, #8]
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	071a      	lsls	r2, r3, #28
 800305a:	d52f      	bpl.n	80030bc <__swbuf_r+0x84>
 800305c:	6923      	ldr	r3, [r4, #16]
 800305e:	b36b      	cbz	r3, 80030bc <__swbuf_r+0x84>
 8003060:	6923      	ldr	r3, [r4, #16]
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	1ac0      	subs	r0, r0, r3
 8003066:	6963      	ldr	r3, [r4, #20]
 8003068:	b2f6      	uxtb	r6, r6
 800306a:	4283      	cmp	r3, r0
 800306c:	4637      	mov	r7, r6
 800306e:	dc04      	bgt.n	800307a <__swbuf_r+0x42>
 8003070:	4621      	mov	r1, r4
 8003072:	4628      	mov	r0, r5
 8003074:	f000 f926 	bl	80032c4 <_fflush_r>
 8003078:	bb30      	cbnz	r0, 80030c8 <__swbuf_r+0x90>
 800307a:	68a3      	ldr	r3, [r4, #8]
 800307c:	3b01      	subs	r3, #1
 800307e:	60a3      	str	r3, [r4, #8]
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	6022      	str	r2, [r4, #0]
 8003086:	701e      	strb	r6, [r3, #0]
 8003088:	6963      	ldr	r3, [r4, #20]
 800308a:	3001      	adds	r0, #1
 800308c:	4283      	cmp	r3, r0
 800308e:	d004      	beq.n	800309a <__swbuf_r+0x62>
 8003090:	89a3      	ldrh	r3, [r4, #12]
 8003092:	07db      	lsls	r3, r3, #31
 8003094:	d506      	bpl.n	80030a4 <__swbuf_r+0x6c>
 8003096:	2e0a      	cmp	r6, #10
 8003098:	d104      	bne.n	80030a4 <__swbuf_r+0x6c>
 800309a:	4621      	mov	r1, r4
 800309c:	4628      	mov	r0, r5
 800309e:	f000 f911 	bl	80032c4 <_fflush_r>
 80030a2:	b988      	cbnz	r0, 80030c8 <__swbuf_r+0x90>
 80030a4:	4638      	mov	r0, r7
 80030a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <__swbuf_r+0x9c>)
 80030aa:	429c      	cmp	r4, r3
 80030ac:	d101      	bne.n	80030b2 <__swbuf_r+0x7a>
 80030ae:	68ac      	ldr	r4, [r5, #8]
 80030b0:	e7cf      	b.n	8003052 <__swbuf_r+0x1a>
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <__swbuf_r+0xa0>)
 80030b4:	429c      	cmp	r4, r3
 80030b6:	bf08      	it	eq
 80030b8:	68ec      	ldreq	r4, [r5, #12]
 80030ba:	e7ca      	b.n	8003052 <__swbuf_r+0x1a>
 80030bc:	4621      	mov	r1, r4
 80030be:	4628      	mov	r0, r5
 80030c0:	f000 f80c 	bl	80030dc <__swsetup_r>
 80030c4:	2800      	cmp	r0, #0
 80030c6:	d0cb      	beq.n	8003060 <__swbuf_r+0x28>
 80030c8:	f04f 37ff 	mov.w	r7, #4294967295
 80030cc:	e7ea      	b.n	80030a4 <__swbuf_r+0x6c>
 80030ce:	bf00      	nop
 80030d0:	08003ef4 	.word	0x08003ef4
 80030d4:	08003f14 	.word	0x08003f14
 80030d8:	08003ed4 	.word	0x08003ed4

080030dc <__swsetup_r>:
 80030dc:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <__swsetup_r+0xcc>)
 80030de:	b570      	push	{r4, r5, r6, lr}
 80030e0:	681d      	ldr	r5, [r3, #0]
 80030e2:	4606      	mov	r6, r0
 80030e4:	460c      	mov	r4, r1
 80030e6:	b125      	cbz	r5, 80030f2 <__swsetup_r+0x16>
 80030e8:	69ab      	ldr	r3, [r5, #24]
 80030ea:	b913      	cbnz	r3, 80030f2 <__swsetup_r+0x16>
 80030ec:	4628      	mov	r0, r5
 80030ee:	f000 f97d 	bl	80033ec <__sinit>
 80030f2:	4b2e      	ldr	r3, [pc, #184]	; (80031ac <__swsetup_r+0xd0>)
 80030f4:	429c      	cmp	r4, r3
 80030f6:	d10f      	bne.n	8003118 <__swsetup_r+0x3c>
 80030f8:	686c      	ldr	r4, [r5, #4]
 80030fa:	89a3      	ldrh	r3, [r4, #12]
 80030fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003100:	0719      	lsls	r1, r3, #28
 8003102:	d42c      	bmi.n	800315e <__swsetup_r+0x82>
 8003104:	06dd      	lsls	r5, r3, #27
 8003106:	d411      	bmi.n	800312c <__swsetup_r+0x50>
 8003108:	2309      	movs	r3, #9
 800310a:	6033      	str	r3, [r6, #0]
 800310c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003110:	81a3      	strh	r3, [r4, #12]
 8003112:	f04f 30ff 	mov.w	r0, #4294967295
 8003116:	e03e      	b.n	8003196 <__swsetup_r+0xba>
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <__swsetup_r+0xd4>)
 800311a:	429c      	cmp	r4, r3
 800311c:	d101      	bne.n	8003122 <__swsetup_r+0x46>
 800311e:	68ac      	ldr	r4, [r5, #8]
 8003120:	e7eb      	b.n	80030fa <__swsetup_r+0x1e>
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <__swsetup_r+0xd8>)
 8003124:	429c      	cmp	r4, r3
 8003126:	bf08      	it	eq
 8003128:	68ec      	ldreq	r4, [r5, #12]
 800312a:	e7e6      	b.n	80030fa <__swsetup_r+0x1e>
 800312c:	0758      	lsls	r0, r3, #29
 800312e:	d512      	bpl.n	8003156 <__swsetup_r+0x7a>
 8003130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003132:	b141      	cbz	r1, 8003146 <__swsetup_r+0x6a>
 8003134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003138:	4299      	cmp	r1, r3
 800313a:	d002      	beq.n	8003142 <__swsetup_r+0x66>
 800313c:	4630      	mov	r0, r6
 800313e:	f000 fa59 	bl	80035f4 <_free_r>
 8003142:	2300      	movs	r3, #0
 8003144:	6363      	str	r3, [r4, #52]	; 0x34
 8003146:	89a3      	ldrh	r3, [r4, #12]
 8003148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800314c:	81a3      	strh	r3, [r4, #12]
 800314e:	2300      	movs	r3, #0
 8003150:	6063      	str	r3, [r4, #4]
 8003152:	6923      	ldr	r3, [r4, #16]
 8003154:	6023      	str	r3, [r4, #0]
 8003156:	89a3      	ldrh	r3, [r4, #12]
 8003158:	f043 0308 	orr.w	r3, r3, #8
 800315c:	81a3      	strh	r3, [r4, #12]
 800315e:	6923      	ldr	r3, [r4, #16]
 8003160:	b94b      	cbnz	r3, 8003176 <__swsetup_r+0x9a>
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316c:	d003      	beq.n	8003176 <__swsetup_r+0x9a>
 800316e:	4621      	mov	r1, r4
 8003170:	4630      	mov	r0, r6
 8003172:	f000 f9ff 	bl	8003574 <__smakebuf_r>
 8003176:	89a0      	ldrh	r0, [r4, #12]
 8003178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800317c:	f010 0301 	ands.w	r3, r0, #1
 8003180:	d00a      	beq.n	8003198 <__swsetup_r+0xbc>
 8003182:	2300      	movs	r3, #0
 8003184:	60a3      	str	r3, [r4, #8]
 8003186:	6963      	ldr	r3, [r4, #20]
 8003188:	425b      	negs	r3, r3
 800318a:	61a3      	str	r3, [r4, #24]
 800318c:	6923      	ldr	r3, [r4, #16]
 800318e:	b943      	cbnz	r3, 80031a2 <__swsetup_r+0xc6>
 8003190:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003194:	d1ba      	bne.n	800310c <__swsetup_r+0x30>
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	0781      	lsls	r1, r0, #30
 800319a:	bf58      	it	pl
 800319c:	6963      	ldrpl	r3, [r4, #20]
 800319e:	60a3      	str	r3, [r4, #8]
 80031a0:	e7f4      	b.n	800318c <__swsetup_r+0xb0>
 80031a2:	2000      	movs	r0, #0
 80031a4:	e7f7      	b.n	8003196 <__swsetup_r+0xba>
 80031a6:	bf00      	nop
 80031a8:	2000000c 	.word	0x2000000c
 80031ac:	08003ef4 	.word	0x08003ef4
 80031b0:	08003f14 	.word	0x08003f14
 80031b4:	08003ed4 	.word	0x08003ed4

080031b8 <__sflush_r>:
 80031b8:	898a      	ldrh	r2, [r1, #12]
 80031ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031be:	4605      	mov	r5, r0
 80031c0:	0710      	lsls	r0, r2, #28
 80031c2:	460c      	mov	r4, r1
 80031c4:	d458      	bmi.n	8003278 <__sflush_r+0xc0>
 80031c6:	684b      	ldr	r3, [r1, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	dc05      	bgt.n	80031d8 <__sflush_r+0x20>
 80031cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	dc02      	bgt.n	80031d8 <__sflush_r+0x20>
 80031d2:	2000      	movs	r0, #0
 80031d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031da:	2e00      	cmp	r6, #0
 80031dc:	d0f9      	beq.n	80031d2 <__sflush_r+0x1a>
 80031de:	2300      	movs	r3, #0
 80031e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031e4:	682f      	ldr	r7, [r5, #0]
 80031e6:	602b      	str	r3, [r5, #0]
 80031e8:	d032      	beq.n	8003250 <__sflush_r+0x98>
 80031ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031ec:	89a3      	ldrh	r3, [r4, #12]
 80031ee:	075a      	lsls	r2, r3, #29
 80031f0:	d505      	bpl.n	80031fe <__sflush_r+0x46>
 80031f2:	6863      	ldr	r3, [r4, #4]
 80031f4:	1ac0      	subs	r0, r0, r3
 80031f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031f8:	b10b      	cbz	r3, 80031fe <__sflush_r+0x46>
 80031fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031fc:	1ac0      	subs	r0, r0, r3
 80031fe:	2300      	movs	r3, #0
 8003200:	4602      	mov	r2, r0
 8003202:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003204:	6a21      	ldr	r1, [r4, #32]
 8003206:	4628      	mov	r0, r5
 8003208:	47b0      	blx	r6
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	d106      	bne.n	800321e <__sflush_r+0x66>
 8003210:	6829      	ldr	r1, [r5, #0]
 8003212:	291d      	cmp	r1, #29
 8003214:	d82c      	bhi.n	8003270 <__sflush_r+0xb8>
 8003216:	4a2a      	ldr	r2, [pc, #168]	; (80032c0 <__sflush_r+0x108>)
 8003218:	40ca      	lsrs	r2, r1
 800321a:	07d6      	lsls	r6, r2, #31
 800321c:	d528      	bpl.n	8003270 <__sflush_r+0xb8>
 800321e:	2200      	movs	r2, #0
 8003220:	6062      	str	r2, [r4, #4]
 8003222:	04d9      	lsls	r1, r3, #19
 8003224:	6922      	ldr	r2, [r4, #16]
 8003226:	6022      	str	r2, [r4, #0]
 8003228:	d504      	bpl.n	8003234 <__sflush_r+0x7c>
 800322a:	1c42      	adds	r2, r0, #1
 800322c:	d101      	bne.n	8003232 <__sflush_r+0x7a>
 800322e:	682b      	ldr	r3, [r5, #0]
 8003230:	b903      	cbnz	r3, 8003234 <__sflush_r+0x7c>
 8003232:	6560      	str	r0, [r4, #84]	; 0x54
 8003234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003236:	602f      	str	r7, [r5, #0]
 8003238:	2900      	cmp	r1, #0
 800323a:	d0ca      	beq.n	80031d2 <__sflush_r+0x1a>
 800323c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003240:	4299      	cmp	r1, r3
 8003242:	d002      	beq.n	800324a <__sflush_r+0x92>
 8003244:	4628      	mov	r0, r5
 8003246:	f000 f9d5 	bl	80035f4 <_free_r>
 800324a:	2000      	movs	r0, #0
 800324c:	6360      	str	r0, [r4, #52]	; 0x34
 800324e:	e7c1      	b.n	80031d4 <__sflush_r+0x1c>
 8003250:	6a21      	ldr	r1, [r4, #32]
 8003252:	2301      	movs	r3, #1
 8003254:	4628      	mov	r0, r5
 8003256:	47b0      	blx	r6
 8003258:	1c41      	adds	r1, r0, #1
 800325a:	d1c7      	bne.n	80031ec <__sflush_r+0x34>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0c4      	beq.n	80031ec <__sflush_r+0x34>
 8003262:	2b1d      	cmp	r3, #29
 8003264:	d001      	beq.n	800326a <__sflush_r+0xb2>
 8003266:	2b16      	cmp	r3, #22
 8003268:	d101      	bne.n	800326e <__sflush_r+0xb6>
 800326a:	602f      	str	r7, [r5, #0]
 800326c:	e7b1      	b.n	80031d2 <__sflush_r+0x1a>
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003274:	81a3      	strh	r3, [r4, #12]
 8003276:	e7ad      	b.n	80031d4 <__sflush_r+0x1c>
 8003278:	690f      	ldr	r7, [r1, #16]
 800327a:	2f00      	cmp	r7, #0
 800327c:	d0a9      	beq.n	80031d2 <__sflush_r+0x1a>
 800327e:	0793      	lsls	r3, r2, #30
 8003280:	680e      	ldr	r6, [r1, #0]
 8003282:	bf08      	it	eq
 8003284:	694b      	ldreq	r3, [r1, #20]
 8003286:	600f      	str	r7, [r1, #0]
 8003288:	bf18      	it	ne
 800328a:	2300      	movne	r3, #0
 800328c:	eba6 0807 	sub.w	r8, r6, r7
 8003290:	608b      	str	r3, [r1, #8]
 8003292:	f1b8 0f00 	cmp.w	r8, #0
 8003296:	dd9c      	ble.n	80031d2 <__sflush_r+0x1a>
 8003298:	6a21      	ldr	r1, [r4, #32]
 800329a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800329c:	4643      	mov	r3, r8
 800329e:	463a      	mov	r2, r7
 80032a0:	4628      	mov	r0, r5
 80032a2:	47b0      	blx	r6
 80032a4:	2800      	cmp	r0, #0
 80032a6:	dc06      	bgt.n	80032b6 <__sflush_r+0xfe>
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ae:	81a3      	strh	r3, [r4, #12]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	e78e      	b.n	80031d4 <__sflush_r+0x1c>
 80032b6:	4407      	add	r7, r0
 80032b8:	eba8 0800 	sub.w	r8, r8, r0
 80032bc:	e7e9      	b.n	8003292 <__sflush_r+0xda>
 80032be:	bf00      	nop
 80032c0:	20400001 	.word	0x20400001

080032c4 <_fflush_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	690b      	ldr	r3, [r1, #16]
 80032c8:	4605      	mov	r5, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	b913      	cbnz	r3, 80032d4 <_fflush_r+0x10>
 80032ce:	2500      	movs	r5, #0
 80032d0:	4628      	mov	r0, r5
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	b118      	cbz	r0, 80032de <_fflush_r+0x1a>
 80032d6:	6983      	ldr	r3, [r0, #24]
 80032d8:	b90b      	cbnz	r3, 80032de <_fflush_r+0x1a>
 80032da:	f000 f887 	bl	80033ec <__sinit>
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <_fflush_r+0x6c>)
 80032e0:	429c      	cmp	r4, r3
 80032e2:	d11b      	bne.n	800331c <_fflush_r+0x58>
 80032e4:	686c      	ldr	r4, [r5, #4]
 80032e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ef      	beq.n	80032ce <_fflush_r+0xa>
 80032ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032f0:	07d0      	lsls	r0, r2, #31
 80032f2:	d404      	bmi.n	80032fe <_fflush_r+0x3a>
 80032f4:	0599      	lsls	r1, r3, #22
 80032f6:	d402      	bmi.n	80032fe <_fflush_r+0x3a>
 80032f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032fa:	f000 f915 	bl	8003528 <__retarget_lock_acquire_recursive>
 80032fe:	4628      	mov	r0, r5
 8003300:	4621      	mov	r1, r4
 8003302:	f7ff ff59 	bl	80031b8 <__sflush_r>
 8003306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003308:	07da      	lsls	r2, r3, #31
 800330a:	4605      	mov	r5, r0
 800330c:	d4e0      	bmi.n	80032d0 <_fflush_r+0xc>
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	059b      	lsls	r3, r3, #22
 8003312:	d4dd      	bmi.n	80032d0 <_fflush_r+0xc>
 8003314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003316:	f000 f908 	bl	800352a <__retarget_lock_release_recursive>
 800331a:	e7d9      	b.n	80032d0 <_fflush_r+0xc>
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <_fflush_r+0x70>)
 800331e:	429c      	cmp	r4, r3
 8003320:	d101      	bne.n	8003326 <_fflush_r+0x62>
 8003322:	68ac      	ldr	r4, [r5, #8]
 8003324:	e7df      	b.n	80032e6 <_fflush_r+0x22>
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <_fflush_r+0x74>)
 8003328:	429c      	cmp	r4, r3
 800332a:	bf08      	it	eq
 800332c:	68ec      	ldreq	r4, [r5, #12]
 800332e:	e7da      	b.n	80032e6 <_fflush_r+0x22>
 8003330:	08003ef4 	.word	0x08003ef4
 8003334:	08003f14 	.word	0x08003f14
 8003338:	08003ed4 	.word	0x08003ed4

0800333c <std>:
 800333c:	2300      	movs	r3, #0
 800333e:	b510      	push	{r4, lr}
 8003340:	4604      	mov	r4, r0
 8003342:	e9c0 3300 	strd	r3, r3, [r0]
 8003346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800334a:	6083      	str	r3, [r0, #8]
 800334c:	8181      	strh	r1, [r0, #12]
 800334e:	6643      	str	r3, [r0, #100]	; 0x64
 8003350:	81c2      	strh	r2, [r0, #14]
 8003352:	6183      	str	r3, [r0, #24]
 8003354:	4619      	mov	r1, r3
 8003356:	2208      	movs	r2, #8
 8003358:	305c      	adds	r0, #92	; 0x5c
 800335a:	f7ff fdef 	bl	8002f3c <memset>
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <std+0x38>)
 8003360:	6263      	str	r3, [r4, #36]	; 0x24
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <std+0x3c>)
 8003364:	62a3      	str	r3, [r4, #40]	; 0x28
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <std+0x40>)
 8003368:	62e3      	str	r3, [r4, #44]	; 0x2c
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <std+0x44>)
 800336c:	6224      	str	r4, [r4, #32]
 800336e:	6323      	str	r3, [r4, #48]	; 0x30
 8003370:	bd10      	pop	{r4, pc}
 8003372:	bf00      	nop
 8003374:	08003769 	.word	0x08003769
 8003378:	0800378b 	.word	0x0800378b
 800337c:	080037c3 	.word	0x080037c3
 8003380:	080037e7 	.word	0x080037e7

08003384 <_cleanup_r>:
 8003384:	4901      	ldr	r1, [pc, #4]	; (800338c <_cleanup_r+0x8>)
 8003386:	f000 b8af 	b.w	80034e8 <_fwalk_reent>
 800338a:	bf00      	nop
 800338c:	080032c5 	.word	0x080032c5

08003390 <__sfmoreglue>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	1e4a      	subs	r2, r1, #1
 8003394:	2568      	movs	r5, #104	; 0x68
 8003396:	4355      	muls	r5, r2
 8003398:	460e      	mov	r6, r1
 800339a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800339e:	f000 f979 	bl	8003694 <_malloc_r>
 80033a2:	4604      	mov	r4, r0
 80033a4:	b140      	cbz	r0, 80033b8 <__sfmoreglue+0x28>
 80033a6:	2100      	movs	r1, #0
 80033a8:	e9c0 1600 	strd	r1, r6, [r0]
 80033ac:	300c      	adds	r0, #12
 80033ae:	60a0      	str	r0, [r4, #8]
 80033b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033b4:	f7ff fdc2 	bl	8002f3c <memset>
 80033b8:	4620      	mov	r0, r4
 80033ba:	bd70      	pop	{r4, r5, r6, pc}

080033bc <__sfp_lock_acquire>:
 80033bc:	4801      	ldr	r0, [pc, #4]	; (80033c4 <__sfp_lock_acquire+0x8>)
 80033be:	f000 b8b3 	b.w	8003528 <__retarget_lock_acquire_recursive>
 80033c2:	bf00      	nop
 80033c4:	200001dc 	.word	0x200001dc

080033c8 <__sfp_lock_release>:
 80033c8:	4801      	ldr	r0, [pc, #4]	; (80033d0 <__sfp_lock_release+0x8>)
 80033ca:	f000 b8ae 	b.w	800352a <__retarget_lock_release_recursive>
 80033ce:	bf00      	nop
 80033d0:	200001dc 	.word	0x200001dc

080033d4 <__sinit_lock_acquire>:
 80033d4:	4801      	ldr	r0, [pc, #4]	; (80033dc <__sinit_lock_acquire+0x8>)
 80033d6:	f000 b8a7 	b.w	8003528 <__retarget_lock_acquire_recursive>
 80033da:	bf00      	nop
 80033dc:	200001d7 	.word	0x200001d7

080033e0 <__sinit_lock_release>:
 80033e0:	4801      	ldr	r0, [pc, #4]	; (80033e8 <__sinit_lock_release+0x8>)
 80033e2:	f000 b8a2 	b.w	800352a <__retarget_lock_release_recursive>
 80033e6:	bf00      	nop
 80033e8:	200001d7 	.word	0x200001d7

080033ec <__sinit>:
 80033ec:	b510      	push	{r4, lr}
 80033ee:	4604      	mov	r4, r0
 80033f0:	f7ff fff0 	bl	80033d4 <__sinit_lock_acquire>
 80033f4:	69a3      	ldr	r3, [r4, #24]
 80033f6:	b11b      	cbz	r3, 8003400 <__sinit+0x14>
 80033f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033fc:	f7ff bff0 	b.w	80033e0 <__sinit_lock_release>
 8003400:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003404:	6523      	str	r3, [r4, #80]	; 0x50
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <__sinit+0x68>)
 8003408:	4a13      	ldr	r2, [pc, #76]	; (8003458 <__sinit+0x6c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	62a2      	str	r2, [r4, #40]	; 0x28
 800340e:	42a3      	cmp	r3, r4
 8003410:	bf04      	itt	eq
 8003412:	2301      	moveq	r3, #1
 8003414:	61a3      	streq	r3, [r4, #24]
 8003416:	4620      	mov	r0, r4
 8003418:	f000 f820 	bl	800345c <__sfp>
 800341c:	6060      	str	r0, [r4, #4]
 800341e:	4620      	mov	r0, r4
 8003420:	f000 f81c 	bl	800345c <__sfp>
 8003424:	60a0      	str	r0, [r4, #8]
 8003426:	4620      	mov	r0, r4
 8003428:	f000 f818 	bl	800345c <__sfp>
 800342c:	2200      	movs	r2, #0
 800342e:	60e0      	str	r0, [r4, #12]
 8003430:	2104      	movs	r1, #4
 8003432:	6860      	ldr	r0, [r4, #4]
 8003434:	f7ff ff82 	bl	800333c <std>
 8003438:	68a0      	ldr	r0, [r4, #8]
 800343a:	2201      	movs	r2, #1
 800343c:	2109      	movs	r1, #9
 800343e:	f7ff ff7d 	bl	800333c <std>
 8003442:	68e0      	ldr	r0, [r4, #12]
 8003444:	2202      	movs	r2, #2
 8003446:	2112      	movs	r1, #18
 8003448:	f7ff ff78 	bl	800333c <std>
 800344c:	2301      	movs	r3, #1
 800344e:	61a3      	str	r3, [r4, #24]
 8003450:	e7d2      	b.n	80033f8 <__sinit+0xc>
 8003452:	bf00      	nop
 8003454:	08003ed0 	.word	0x08003ed0
 8003458:	08003385 	.word	0x08003385

0800345c <__sfp>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	4607      	mov	r7, r0
 8003460:	f7ff ffac 	bl	80033bc <__sfp_lock_acquire>
 8003464:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <__sfp+0x84>)
 8003466:	681e      	ldr	r6, [r3, #0]
 8003468:	69b3      	ldr	r3, [r6, #24]
 800346a:	b913      	cbnz	r3, 8003472 <__sfp+0x16>
 800346c:	4630      	mov	r0, r6
 800346e:	f7ff ffbd 	bl	80033ec <__sinit>
 8003472:	3648      	adds	r6, #72	; 0x48
 8003474:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003478:	3b01      	subs	r3, #1
 800347a:	d503      	bpl.n	8003484 <__sfp+0x28>
 800347c:	6833      	ldr	r3, [r6, #0]
 800347e:	b30b      	cbz	r3, 80034c4 <__sfp+0x68>
 8003480:	6836      	ldr	r6, [r6, #0]
 8003482:	e7f7      	b.n	8003474 <__sfp+0x18>
 8003484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003488:	b9d5      	cbnz	r5, 80034c0 <__sfp+0x64>
 800348a:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <__sfp+0x88>)
 800348c:	60e3      	str	r3, [r4, #12]
 800348e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003492:	6665      	str	r5, [r4, #100]	; 0x64
 8003494:	f000 f847 	bl	8003526 <__retarget_lock_init_recursive>
 8003498:	f7ff ff96 	bl	80033c8 <__sfp_lock_release>
 800349c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034a4:	6025      	str	r5, [r4, #0]
 80034a6:	61a5      	str	r5, [r4, #24]
 80034a8:	2208      	movs	r2, #8
 80034aa:	4629      	mov	r1, r5
 80034ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034b0:	f7ff fd44 	bl	8002f3c <memset>
 80034b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034bc:	4620      	mov	r0, r4
 80034be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c0:	3468      	adds	r4, #104	; 0x68
 80034c2:	e7d9      	b.n	8003478 <__sfp+0x1c>
 80034c4:	2104      	movs	r1, #4
 80034c6:	4638      	mov	r0, r7
 80034c8:	f7ff ff62 	bl	8003390 <__sfmoreglue>
 80034cc:	4604      	mov	r4, r0
 80034ce:	6030      	str	r0, [r6, #0]
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d1d5      	bne.n	8003480 <__sfp+0x24>
 80034d4:	f7ff ff78 	bl	80033c8 <__sfp_lock_release>
 80034d8:	230c      	movs	r3, #12
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	e7ee      	b.n	80034bc <__sfp+0x60>
 80034de:	bf00      	nop
 80034e0:	08003ed0 	.word	0x08003ed0
 80034e4:	ffff0001 	.word	0xffff0001

080034e8 <_fwalk_reent>:
 80034e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034ec:	4606      	mov	r6, r0
 80034ee:	4688      	mov	r8, r1
 80034f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034f4:	2700      	movs	r7, #0
 80034f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034fa:	f1b9 0901 	subs.w	r9, r9, #1
 80034fe:	d505      	bpl.n	800350c <_fwalk_reent+0x24>
 8003500:	6824      	ldr	r4, [r4, #0]
 8003502:	2c00      	cmp	r4, #0
 8003504:	d1f7      	bne.n	80034f6 <_fwalk_reent+0xe>
 8003506:	4638      	mov	r0, r7
 8003508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800350c:	89ab      	ldrh	r3, [r5, #12]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d907      	bls.n	8003522 <_fwalk_reent+0x3a>
 8003512:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003516:	3301      	adds	r3, #1
 8003518:	d003      	beq.n	8003522 <_fwalk_reent+0x3a>
 800351a:	4629      	mov	r1, r5
 800351c:	4630      	mov	r0, r6
 800351e:	47c0      	blx	r8
 8003520:	4307      	orrs	r7, r0
 8003522:	3568      	adds	r5, #104	; 0x68
 8003524:	e7e9      	b.n	80034fa <_fwalk_reent+0x12>

08003526 <__retarget_lock_init_recursive>:
 8003526:	4770      	bx	lr

08003528 <__retarget_lock_acquire_recursive>:
 8003528:	4770      	bx	lr

0800352a <__retarget_lock_release_recursive>:
 800352a:	4770      	bx	lr

0800352c <__swhatbuf_r>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	460e      	mov	r6, r1
 8003530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003534:	2900      	cmp	r1, #0
 8003536:	b096      	sub	sp, #88	; 0x58
 8003538:	4614      	mov	r4, r2
 800353a:	461d      	mov	r5, r3
 800353c:	da07      	bge.n	800354e <__swhatbuf_r+0x22>
 800353e:	2300      	movs	r3, #0
 8003540:	602b      	str	r3, [r5, #0]
 8003542:	89b3      	ldrh	r3, [r6, #12]
 8003544:	061a      	lsls	r2, r3, #24
 8003546:	d410      	bmi.n	800356a <__swhatbuf_r+0x3e>
 8003548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354c:	e00e      	b.n	800356c <__swhatbuf_r+0x40>
 800354e:	466a      	mov	r2, sp
 8003550:	f000 f970 	bl	8003834 <_fstat_r>
 8003554:	2800      	cmp	r0, #0
 8003556:	dbf2      	blt.n	800353e <__swhatbuf_r+0x12>
 8003558:	9a01      	ldr	r2, [sp, #4]
 800355a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800355e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003562:	425a      	negs	r2, r3
 8003564:	415a      	adcs	r2, r3
 8003566:	602a      	str	r2, [r5, #0]
 8003568:	e7ee      	b.n	8003548 <__swhatbuf_r+0x1c>
 800356a:	2340      	movs	r3, #64	; 0x40
 800356c:	2000      	movs	r0, #0
 800356e:	6023      	str	r3, [r4, #0]
 8003570:	b016      	add	sp, #88	; 0x58
 8003572:	bd70      	pop	{r4, r5, r6, pc}

08003574 <__smakebuf_r>:
 8003574:	898b      	ldrh	r3, [r1, #12]
 8003576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003578:	079d      	lsls	r5, r3, #30
 800357a:	4606      	mov	r6, r0
 800357c:	460c      	mov	r4, r1
 800357e:	d507      	bpl.n	8003590 <__smakebuf_r+0x1c>
 8003580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	6123      	str	r3, [r4, #16]
 8003588:	2301      	movs	r3, #1
 800358a:	6163      	str	r3, [r4, #20]
 800358c:	b002      	add	sp, #8
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	ab01      	add	r3, sp, #4
 8003592:	466a      	mov	r2, sp
 8003594:	f7ff ffca 	bl	800352c <__swhatbuf_r>
 8003598:	9900      	ldr	r1, [sp, #0]
 800359a:	4605      	mov	r5, r0
 800359c:	4630      	mov	r0, r6
 800359e:	f000 f879 	bl	8003694 <_malloc_r>
 80035a2:	b948      	cbnz	r0, 80035b8 <__smakebuf_r+0x44>
 80035a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035a8:	059a      	lsls	r2, r3, #22
 80035aa:	d4ef      	bmi.n	800358c <__smakebuf_r+0x18>
 80035ac:	f023 0303 	bic.w	r3, r3, #3
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	81a3      	strh	r3, [r4, #12]
 80035b6:	e7e3      	b.n	8003580 <__smakebuf_r+0xc>
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <__smakebuf_r+0x7c>)
 80035ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	6020      	str	r0, [r4, #0]
 80035c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c4:	81a3      	strh	r3, [r4, #12]
 80035c6:	9b00      	ldr	r3, [sp, #0]
 80035c8:	6163      	str	r3, [r4, #20]
 80035ca:	9b01      	ldr	r3, [sp, #4]
 80035cc:	6120      	str	r0, [r4, #16]
 80035ce:	b15b      	cbz	r3, 80035e8 <__smakebuf_r+0x74>
 80035d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035d4:	4630      	mov	r0, r6
 80035d6:	f000 f93f 	bl	8003858 <_isatty_r>
 80035da:	b128      	cbz	r0, 80035e8 <__smakebuf_r+0x74>
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	81a3      	strh	r3, [r4, #12]
 80035e8:	89a0      	ldrh	r0, [r4, #12]
 80035ea:	4305      	orrs	r5, r0
 80035ec:	81a5      	strh	r5, [r4, #12]
 80035ee:	e7cd      	b.n	800358c <__smakebuf_r+0x18>
 80035f0:	08003385 	.word	0x08003385

080035f4 <_free_r>:
 80035f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035f6:	2900      	cmp	r1, #0
 80035f8:	d048      	beq.n	800368c <_free_r+0x98>
 80035fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035fe:	9001      	str	r0, [sp, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f1a1 0404 	sub.w	r4, r1, #4
 8003606:	bfb8      	it	lt
 8003608:	18e4      	addlt	r4, r4, r3
 800360a:	f000 f947 	bl	800389c <__malloc_lock>
 800360e:	4a20      	ldr	r2, [pc, #128]	; (8003690 <_free_r+0x9c>)
 8003610:	9801      	ldr	r0, [sp, #4]
 8003612:	6813      	ldr	r3, [r2, #0]
 8003614:	4615      	mov	r5, r2
 8003616:	b933      	cbnz	r3, 8003626 <_free_r+0x32>
 8003618:	6063      	str	r3, [r4, #4]
 800361a:	6014      	str	r4, [r2, #0]
 800361c:	b003      	add	sp, #12
 800361e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003622:	f000 b941 	b.w	80038a8 <__malloc_unlock>
 8003626:	42a3      	cmp	r3, r4
 8003628:	d90b      	bls.n	8003642 <_free_r+0x4e>
 800362a:	6821      	ldr	r1, [r4, #0]
 800362c:	1862      	adds	r2, r4, r1
 800362e:	4293      	cmp	r3, r2
 8003630:	bf04      	itt	eq
 8003632:	681a      	ldreq	r2, [r3, #0]
 8003634:	685b      	ldreq	r3, [r3, #4]
 8003636:	6063      	str	r3, [r4, #4]
 8003638:	bf04      	itt	eq
 800363a:	1852      	addeq	r2, r2, r1
 800363c:	6022      	streq	r2, [r4, #0]
 800363e:	602c      	str	r4, [r5, #0]
 8003640:	e7ec      	b.n	800361c <_free_r+0x28>
 8003642:	461a      	mov	r2, r3
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b10b      	cbz	r3, 800364c <_free_r+0x58>
 8003648:	42a3      	cmp	r3, r4
 800364a:	d9fa      	bls.n	8003642 <_free_r+0x4e>
 800364c:	6811      	ldr	r1, [r2, #0]
 800364e:	1855      	adds	r5, r2, r1
 8003650:	42a5      	cmp	r5, r4
 8003652:	d10b      	bne.n	800366c <_free_r+0x78>
 8003654:	6824      	ldr	r4, [r4, #0]
 8003656:	4421      	add	r1, r4
 8003658:	1854      	adds	r4, r2, r1
 800365a:	42a3      	cmp	r3, r4
 800365c:	6011      	str	r1, [r2, #0]
 800365e:	d1dd      	bne.n	800361c <_free_r+0x28>
 8003660:	681c      	ldr	r4, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	6053      	str	r3, [r2, #4]
 8003666:	4421      	add	r1, r4
 8003668:	6011      	str	r1, [r2, #0]
 800366a:	e7d7      	b.n	800361c <_free_r+0x28>
 800366c:	d902      	bls.n	8003674 <_free_r+0x80>
 800366e:	230c      	movs	r3, #12
 8003670:	6003      	str	r3, [r0, #0]
 8003672:	e7d3      	b.n	800361c <_free_r+0x28>
 8003674:	6825      	ldr	r5, [r4, #0]
 8003676:	1961      	adds	r1, r4, r5
 8003678:	428b      	cmp	r3, r1
 800367a:	bf04      	itt	eq
 800367c:	6819      	ldreq	r1, [r3, #0]
 800367e:	685b      	ldreq	r3, [r3, #4]
 8003680:	6063      	str	r3, [r4, #4]
 8003682:	bf04      	itt	eq
 8003684:	1949      	addeq	r1, r1, r5
 8003686:	6021      	streq	r1, [r4, #0]
 8003688:	6054      	str	r4, [r2, #4]
 800368a:	e7c7      	b.n	800361c <_free_r+0x28>
 800368c:	b003      	add	sp, #12
 800368e:	bd30      	pop	{r4, r5, pc}
 8003690:	20000098 	.word	0x20000098

08003694 <_malloc_r>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	1ccd      	adds	r5, r1, #3
 8003698:	f025 0503 	bic.w	r5, r5, #3
 800369c:	3508      	adds	r5, #8
 800369e:	2d0c      	cmp	r5, #12
 80036a0:	bf38      	it	cc
 80036a2:	250c      	movcc	r5, #12
 80036a4:	2d00      	cmp	r5, #0
 80036a6:	4606      	mov	r6, r0
 80036a8:	db01      	blt.n	80036ae <_malloc_r+0x1a>
 80036aa:	42a9      	cmp	r1, r5
 80036ac:	d903      	bls.n	80036b6 <_malloc_r+0x22>
 80036ae:	230c      	movs	r3, #12
 80036b0:	6033      	str	r3, [r6, #0]
 80036b2:	2000      	movs	r0, #0
 80036b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b6:	f000 f8f1 	bl	800389c <__malloc_lock>
 80036ba:	4921      	ldr	r1, [pc, #132]	; (8003740 <_malloc_r+0xac>)
 80036bc:	680a      	ldr	r2, [r1, #0]
 80036be:	4614      	mov	r4, r2
 80036c0:	b99c      	cbnz	r4, 80036ea <_malloc_r+0x56>
 80036c2:	4f20      	ldr	r7, [pc, #128]	; (8003744 <_malloc_r+0xb0>)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b923      	cbnz	r3, 80036d2 <_malloc_r+0x3e>
 80036c8:	4621      	mov	r1, r4
 80036ca:	4630      	mov	r0, r6
 80036cc:	f000 f83c 	bl	8003748 <_sbrk_r>
 80036d0:	6038      	str	r0, [r7, #0]
 80036d2:	4629      	mov	r1, r5
 80036d4:	4630      	mov	r0, r6
 80036d6:	f000 f837 	bl	8003748 <_sbrk_r>
 80036da:	1c43      	adds	r3, r0, #1
 80036dc:	d123      	bne.n	8003726 <_malloc_r+0x92>
 80036de:	230c      	movs	r3, #12
 80036e0:	6033      	str	r3, [r6, #0]
 80036e2:	4630      	mov	r0, r6
 80036e4:	f000 f8e0 	bl	80038a8 <__malloc_unlock>
 80036e8:	e7e3      	b.n	80036b2 <_malloc_r+0x1e>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	1b5b      	subs	r3, r3, r5
 80036ee:	d417      	bmi.n	8003720 <_malloc_r+0x8c>
 80036f0:	2b0b      	cmp	r3, #11
 80036f2:	d903      	bls.n	80036fc <_malloc_r+0x68>
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	441c      	add	r4, r3
 80036f8:	6025      	str	r5, [r4, #0]
 80036fa:	e004      	b.n	8003706 <_malloc_r+0x72>
 80036fc:	6863      	ldr	r3, [r4, #4]
 80036fe:	42a2      	cmp	r2, r4
 8003700:	bf0c      	ite	eq
 8003702:	600b      	streq	r3, [r1, #0]
 8003704:	6053      	strne	r3, [r2, #4]
 8003706:	4630      	mov	r0, r6
 8003708:	f000 f8ce 	bl	80038a8 <__malloc_unlock>
 800370c:	f104 000b 	add.w	r0, r4, #11
 8003710:	1d23      	adds	r3, r4, #4
 8003712:	f020 0007 	bic.w	r0, r0, #7
 8003716:	1ac2      	subs	r2, r0, r3
 8003718:	d0cc      	beq.n	80036b4 <_malloc_r+0x20>
 800371a:	1a1b      	subs	r3, r3, r0
 800371c:	50a3      	str	r3, [r4, r2]
 800371e:	e7c9      	b.n	80036b4 <_malloc_r+0x20>
 8003720:	4622      	mov	r2, r4
 8003722:	6864      	ldr	r4, [r4, #4]
 8003724:	e7cc      	b.n	80036c0 <_malloc_r+0x2c>
 8003726:	1cc4      	adds	r4, r0, #3
 8003728:	f024 0403 	bic.w	r4, r4, #3
 800372c:	42a0      	cmp	r0, r4
 800372e:	d0e3      	beq.n	80036f8 <_malloc_r+0x64>
 8003730:	1a21      	subs	r1, r4, r0
 8003732:	4630      	mov	r0, r6
 8003734:	f000 f808 	bl	8003748 <_sbrk_r>
 8003738:	3001      	adds	r0, #1
 800373a:	d1dd      	bne.n	80036f8 <_malloc_r+0x64>
 800373c:	e7cf      	b.n	80036de <_malloc_r+0x4a>
 800373e:	bf00      	nop
 8003740:	20000098 	.word	0x20000098
 8003744:	2000009c 	.word	0x2000009c

08003748 <_sbrk_r>:
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	4d06      	ldr	r5, [pc, #24]	; (8003764 <_sbrk_r+0x1c>)
 800374c:	2300      	movs	r3, #0
 800374e:	4604      	mov	r4, r0
 8003750:	4608      	mov	r0, r1
 8003752:	602b      	str	r3, [r5, #0]
 8003754:	f7fd f87a 	bl	800084c <_sbrk>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	d102      	bne.n	8003762 <_sbrk_r+0x1a>
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	b103      	cbz	r3, 8003762 <_sbrk_r+0x1a>
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	bd38      	pop	{r3, r4, r5, pc}
 8003764:	200001e0 	.word	0x200001e0

08003768 <__sread>:
 8003768:	b510      	push	{r4, lr}
 800376a:	460c      	mov	r4, r1
 800376c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003770:	f000 f8a0 	bl	80038b4 <_read_r>
 8003774:	2800      	cmp	r0, #0
 8003776:	bfab      	itete	ge
 8003778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800377a:	89a3      	ldrhlt	r3, [r4, #12]
 800377c:	181b      	addge	r3, r3, r0
 800377e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003782:	bfac      	ite	ge
 8003784:	6563      	strge	r3, [r4, #84]	; 0x54
 8003786:	81a3      	strhlt	r3, [r4, #12]
 8003788:	bd10      	pop	{r4, pc}

0800378a <__swrite>:
 800378a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800378e:	461f      	mov	r7, r3
 8003790:	898b      	ldrh	r3, [r1, #12]
 8003792:	05db      	lsls	r3, r3, #23
 8003794:	4605      	mov	r5, r0
 8003796:	460c      	mov	r4, r1
 8003798:	4616      	mov	r6, r2
 800379a:	d505      	bpl.n	80037a8 <__swrite+0x1e>
 800379c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a0:	2302      	movs	r3, #2
 80037a2:	2200      	movs	r2, #0
 80037a4:	f000 f868 	bl	8003878 <_lseek_r>
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037b2:	81a3      	strh	r3, [r4, #12]
 80037b4:	4632      	mov	r2, r6
 80037b6:	463b      	mov	r3, r7
 80037b8:	4628      	mov	r0, r5
 80037ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037be:	f000 b817 	b.w	80037f0 <_write_r>

080037c2 <__sseek>:
 80037c2:	b510      	push	{r4, lr}
 80037c4:	460c      	mov	r4, r1
 80037c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ca:	f000 f855 	bl	8003878 <_lseek_r>
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	89a3      	ldrh	r3, [r4, #12]
 80037d2:	bf15      	itete	ne
 80037d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80037d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037de:	81a3      	strheq	r3, [r4, #12]
 80037e0:	bf18      	it	ne
 80037e2:	81a3      	strhne	r3, [r4, #12]
 80037e4:	bd10      	pop	{r4, pc}

080037e6 <__sclose>:
 80037e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ea:	f000 b813 	b.w	8003814 <_close_r>
	...

080037f0 <_write_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4d07      	ldr	r5, [pc, #28]	; (8003810 <_write_r+0x20>)
 80037f4:	4604      	mov	r4, r0
 80037f6:	4608      	mov	r0, r1
 80037f8:	4611      	mov	r1, r2
 80037fa:	2200      	movs	r2, #0
 80037fc:	602a      	str	r2, [r5, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	f000 f91c 	bl	8003a3c <_write>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	d102      	bne.n	800380e <_write_r+0x1e>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	b103      	cbz	r3, 800380e <_write_r+0x1e>
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	200001e0 	.word	0x200001e0

08003814 <_close_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	4d06      	ldr	r5, [pc, #24]	; (8003830 <_close_r+0x1c>)
 8003818:	2300      	movs	r3, #0
 800381a:	4604      	mov	r4, r0
 800381c:	4608      	mov	r0, r1
 800381e:	602b      	str	r3, [r5, #0]
 8003820:	f000 f93e 	bl	8003aa0 <_close>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	d102      	bne.n	800382e <_close_r+0x1a>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	b103      	cbz	r3, 800382e <_close_r+0x1a>
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	200001e0 	.word	0x200001e0

08003834 <_fstat_r>:
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	4d07      	ldr	r5, [pc, #28]	; (8003854 <_fstat_r+0x20>)
 8003838:	2300      	movs	r3, #0
 800383a:	4604      	mov	r4, r0
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	602b      	str	r3, [r5, #0]
 8003842:	f000 f974 	bl	8003b2e <_fstat>
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	d102      	bne.n	8003850 <_fstat_r+0x1c>
 800384a:	682b      	ldr	r3, [r5, #0]
 800384c:	b103      	cbz	r3, 8003850 <_fstat_r+0x1c>
 800384e:	6023      	str	r3, [r4, #0]
 8003850:	bd38      	pop	{r3, r4, r5, pc}
 8003852:	bf00      	nop
 8003854:	200001e0 	.word	0x200001e0

08003858 <_isatty_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4d06      	ldr	r5, [pc, #24]	; (8003874 <_isatty_r+0x1c>)
 800385c:	2300      	movs	r3, #0
 800385e:	4604      	mov	r4, r0
 8003860:	4608      	mov	r0, r1
 8003862:	602b      	str	r3, [r5, #0]
 8003864:	f000 fac8 	bl	8003df8 <_isatty>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d102      	bne.n	8003872 <_isatty_r+0x1a>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	b103      	cbz	r3, 8003872 <_isatty_r+0x1a>
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	bd38      	pop	{r3, r4, r5, pc}
 8003874:	200001e0 	.word	0x200001e0

08003878 <_lseek_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4d07      	ldr	r5, [pc, #28]	; (8003898 <_lseek_r+0x20>)
 800387c:	4604      	mov	r4, r0
 800387e:	4608      	mov	r0, r1
 8003880:	4611      	mov	r1, r2
 8003882:	2200      	movs	r2, #0
 8003884:	602a      	str	r2, [r5, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	f000 f8c6 	bl	8003a18 <_lseek>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_lseek_r+0x1e>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_lseek_r+0x1e>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	200001e0 	.word	0x200001e0

0800389c <__malloc_lock>:
 800389c:	4801      	ldr	r0, [pc, #4]	; (80038a4 <__malloc_lock+0x8>)
 800389e:	f7ff be43 	b.w	8003528 <__retarget_lock_acquire_recursive>
 80038a2:	bf00      	nop
 80038a4:	200001d8 	.word	0x200001d8

080038a8 <__malloc_unlock>:
 80038a8:	4801      	ldr	r0, [pc, #4]	; (80038b0 <__malloc_unlock+0x8>)
 80038aa:	f7ff be3e 	b.w	800352a <__retarget_lock_release_recursive>
 80038ae:	bf00      	nop
 80038b0:	200001d8 	.word	0x200001d8

080038b4 <_read_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4d07      	ldr	r5, [pc, #28]	; (80038d4 <_read_r+0x20>)
 80038b8:	4604      	mov	r4, r0
 80038ba:	4608      	mov	r0, r1
 80038bc:	4611      	mov	r1, r2
 80038be:	2200      	movs	r2, #0
 80038c0:	602a      	str	r2, [r5, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	f000 f850 	bl	8003968 <_read>
 80038c8:	1c43      	adds	r3, r0, #1
 80038ca:	d102      	bne.n	80038d2 <_read_r+0x1e>
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	b103      	cbz	r3, 80038d2 <_read_r+0x1e>
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
 80038d4:	200001e0 	.word	0x200001e0

080038d8 <findslot>:
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <findslot+0x2c>)
 80038da:	b510      	push	{r4, lr}
 80038dc:	4604      	mov	r4, r0
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	b118      	cbz	r0, 80038ea <findslot+0x12>
 80038e2:	6983      	ldr	r3, [r0, #24]
 80038e4:	b90b      	cbnz	r3, 80038ea <findslot+0x12>
 80038e6:	f7ff fd81 	bl	80033ec <__sinit>
 80038ea:	2c13      	cmp	r4, #19
 80038ec:	d807      	bhi.n	80038fe <findslot+0x26>
 80038ee:	4806      	ldr	r0, [pc, #24]	; (8003908 <findslot+0x30>)
 80038f0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80038f4:	3201      	adds	r2, #1
 80038f6:	d002      	beq.n	80038fe <findslot+0x26>
 80038f8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80038fc:	bd10      	pop	{r4, pc}
 80038fe:	2000      	movs	r0, #0
 8003900:	e7fc      	b.n	80038fc <findslot+0x24>
 8003902:	bf00      	nop
 8003904:	2000000c 	.word	0x2000000c
 8003908:	200000ac 	.word	0x200000ac

0800390c <checkerror>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	1c43      	adds	r3, r0, #1
 8003910:	4604      	mov	r4, r0
 8003912:	d109      	bne.n	8003928 <checkerror+0x1c>
 8003914:	f7ff fae8 	bl	8002ee8 <__errno>
 8003918:	2613      	movs	r6, #19
 800391a:	4605      	mov	r5, r0
 800391c:	2700      	movs	r7, #0
 800391e:	4630      	mov	r0, r6
 8003920:	4639      	mov	r1, r7
 8003922:	beab      	bkpt	0x00ab
 8003924:	4606      	mov	r6, r0
 8003926:	602e      	str	r6, [r5, #0]
 8003928:	4620      	mov	r0, r4
 800392a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800392c <error>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	4604      	mov	r4, r0
 8003930:	f7ff fada 	bl	8002ee8 <__errno>
 8003934:	2613      	movs	r6, #19
 8003936:	4605      	mov	r5, r0
 8003938:	2700      	movs	r7, #0
 800393a:	4630      	mov	r0, r6
 800393c:	4639      	mov	r1, r7
 800393e:	beab      	bkpt	0x00ab
 8003940:	4606      	mov	r6, r0
 8003942:	602e      	str	r6, [r5, #0]
 8003944:	4620      	mov	r0, r4
 8003946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003948 <_swiread>:
 8003948:	b530      	push	{r4, r5, lr}
 800394a:	b085      	sub	sp, #20
 800394c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003950:	9203      	str	r2, [sp, #12]
 8003952:	2406      	movs	r4, #6
 8003954:	ad01      	add	r5, sp, #4
 8003956:	4620      	mov	r0, r4
 8003958:	4629      	mov	r1, r5
 800395a:	beab      	bkpt	0x00ab
 800395c:	4604      	mov	r4, r0
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff ffd4 	bl	800390c <checkerror>
 8003964:	b005      	add	sp, #20
 8003966:	bd30      	pop	{r4, r5, pc}

08003968 <_read>:
 8003968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800396a:	4615      	mov	r5, r2
 800396c:	9101      	str	r1, [sp, #4]
 800396e:	f7ff ffb3 	bl	80038d8 <findslot>
 8003972:	9901      	ldr	r1, [sp, #4]
 8003974:	4604      	mov	r4, r0
 8003976:	b938      	cbnz	r0, 8003988 <_read+0x20>
 8003978:	f7ff fab6 	bl	8002ee8 <__errno>
 800397c:	2309      	movs	r3, #9
 800397e:	6003      	str	r3, [r0, #0]
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	b003      	add	sp, #12
 8003986:	bd30      	pop	{r4, r5, pc}
 8003988:	6800      	ldr	r0, [r0, #0]
 800398a:	462a      	mov	r2, r5
 800398c:	f7ff ffdc 	bl	8003948 <_swiread>
 8003990:	1c43      	adds	r3, r0, #1
 8003992:	d0f7      	beq.n	8003984 <_read+0x1c>
 8003994:	6863      	ldr	r3, [r4, #4]
 8003996:	1a2a      	subs	r2, r5, r0
 8003998:	4413      	add	r3, r2
 800399a:	6063      	str	r3, [r4, #4]
 800399c:	4610      	mov	r0, r2
 800399e:	e7f1      	b.n	8003984 <_read+0x1c>

080039a0 <_swilseek>:
 80039a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039a2:	460c      	mov	r4, r1
 80039a4:	4616      	mov	r6, r2
 80039a6:	f7ff ff97 	bl	80038d8 <findslot>
 80039aa:	4605      	mov	r5, r0
 80039ac:	b940      	cbnz	r0, 80039c0 <_swilseek+0x20>
 80039ae:	f7ff fa9b 	bl	8002ee8 <__errno>
 80039b2:	2309      	movs	r3, #9
 80039b4:	6003      	str	r3, [r0, #0]
 80039b6:	f04f 34ff 	mov.w	r4, #4294967295
 80039ba:	4620      	mov	r0, r4
 80039bc:	b003      	add	sp, #12
 80039be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c0:	2e02      	cmp	r6, #2
 80039c2:	d903      	bls.n	80039cc <_swilseek+0x2c>
 80039c4:	f7ff fa90 	bl	8002ee8 <__errno>
 80039c8:	2316      	movs	r3, #22
 80039ca:	e7f3      	b.n	80039b4 <_swilseek+0x14>
 80039cc:	2e01      	cmp	r6, #1
 80039ce:	d112      	bne.n	80039f6 <_swilseek+0x56>
 80039d0:	6843      	ldr	r3, [r0, #4]
 80039d2:	18e4      	adds	r4, r4, r3
 80039d4:	d4f6      	bmi.n	80039c4 <_swilseek+0x24>
 80039d6:	682b      	ldr	r3, [r5, #0]
 80039d8:	260a      	movs	r6, #10
 80039da:	e9cd 3400 	strd	r3, r4, [sp]
 80039de:	466f      	mov	r7, sp
 80039e0:	4630      	mov	r0, r6
 80039e2:	4639      	mov	r1, r7
 80039e4:	beab      	bkpt	0x00ab
 80039e6:	4606      	mov	r6, r0
 80039e8:	4630      	mov	r0, r6
 80039ea:	f7ff ff8f 	bl	800390c <checkerror>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	dbe1      	blt.n	80039b6 <_swilseek+0x16>
 80039f2:	606c      	str	r4, [r5, #4]
 80039f4:	e7e1      	b.n	80039ba <_swilseek+0x1a>
 80039f6:	2e02      	cmp	r6, #2
 80039f8:	d1ed      	bne.n	80039d6 <_swilseek+0x36>
 80039fa:	6803      	ldr	r3, [r0, #0]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	260c      	movs	r6, #12
 8003a00:	466f      	mov	r7, sp
 8003a02:	4630      	mov	r0, r6
 8003a04:	4639      	mov	r1, r7
 8003a06:	beab      	bkpt	0x00ab
 8003a08:	4606      	mov	r6, r0
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f7ff ff7e 	bl	800390c <checkerror>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d0d0      	beq.n	80039b6 <_swilseek+0x16>
 8003a14:	4404      	add	r4, r0
 8003a16:	e7de      	b.n	80039d6 <_swilseek+0x36>

08003a18 <_lseek>:
 8003a18:	f7ff bfc2 	b.w	80039a0 <_swilseek>

08003a1c <_swiwrite>:
 8003a1c:	b530      	push	{r4, r5, lr}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003a24:	9203      	str	r2, [sp, #12]
 8003a26:	2405      	movs	r4, #5
 8003a28:	ad01      	add	r5, sp, #4
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	beab      	bkpt	0x00ab
 8003a30:	4604      	mov	r4, r0
 8003a32:	4620      	mov	r0, r4
 8003a34:	f7ff ff6a 	bl	800390c <checkerror>
 8003a38:	b005      	add	sp, #20
 8003a3a:	bd30      	pop	{r4, r5, pc}

08003a3c <_write>:
 8003a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a3e:	4615      	mov	r5, r2
 8003a40:	9101      	str	r1, [sp, #4]
 8003a42:	f7ff ff49 	bl	80038d8 <findslot>
 8003a46:	9901      	ldr	r1, [sp, #4]
 8003a48:	4604      	mov	r4, r0
 8003a4a:	b930      	cbnz	r0, 8003a5a <_write+0x1e>
 8003a4c:	f7ff fa4c 	bl	8002ee8 <__errno>
 8003a50:	2309      	movs	r3, #9
 8003a52:	6003      	str	r3, [r0, #0]
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	e012      	b.n	8003a80 <_write+0x44>
 8003a5a:	6800      	ldr	r0, [r0, #0]
 8003a5c:	462a      	mov	r2, r5
 8003a5e:	f7ff ffdd 	bl	8003a1c <_swiwrite>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	dbf6      	blt.n	8003a54 <_write+0x18>
 8003a66:	6862      	ldr	r2, [r4, #4]
 8003a68:	1a2b      	subs	r3, r5, r0
 8003a6a:	441a      	add	r2, r3
 8003a6c:	42a8      	cmp	r0, r5
 8003a6e:	6062      	str	r2, [r4, #4]
 8003a70:	d105      	bne.n	8003a7e <_write+0x42>
 8003a72:	2000      	movs	r0, #0
 8003a74:	b003      	add	sp, #12
 8003a76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a7a:	f7ff bf57 	b.w	800392c <error>
 8003a7e:	4618      	mov	r0, r3
 8003a80:	b003      	add	sp, #12
 8003a82:	bd30      	pop	{r4, r5, pc}

08003a84 <_swiclose>:
 8003a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a86:	2402      	movs	r4, #2
 8003a88:	9001      	str	r0, [sp, #4]
 8003a8a:	ad01      	add	r5, sp, #4
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	4629      	mov	r1, r5
 8003a90:	beab      	bkpt	0x00ab
 8003a92:	4604      	mov	r4, r0
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff ff39 	bl	800390c <checkerror>
 8003a9a:	b003      	add	sp, #12
 8003a9c:	bd30      	pop	{r4, r5, pc}
	...

08003aa0 <_close>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	f7ff ff18 	bl	80038d8 <findslot>
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	b930      	cbnz	r0, 8003aba <_close+0x1a>
 8003aac:	f7ff fa1c 	bl	8002ee8 <__errno>
 8003ab0:	2309      	movs	r3, #9
 8003ab2:	6003      	str	r3, [r0, #0]
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	bd38      	pop	{r3, r4, r5, pc}
 8003aba:	3d01      	subs	r5, #1
 8003abc:	2d01      	cmp	r5, #1
 8003abe:	d809      	bhi.n	8003ad4 <_close+0x34>
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <_close+0x48>)
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d104      	bne.n	8003ad4 <_close+0x34>
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ace:	6003      	str	r3, [r0, #0]
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	e7f1      	b.n	8003ab8 <_close+0x18>
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	f7ff ffd5 	bl	8003a84 <_swiclose>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d1ec      	bne.n	8003ab8 <_close+0x18>
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	e7e8      	b.n	8003ab8 <_close+0x18>
 8003ae6:	bf00      	nop
 8003ae8:	200000ac 	.word	0x200000ac

08003aec <_swistat>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	460c      	mov	r4, r1
 8003af0:	f7ff fef2 	bl	80038d8 <findslot>
 8003af4:	4605      	mov	r5, r0
 8003af6:	b930      	cbnz	r0, 8003b06 <_swistat+0x1a>
 8003af8:	f7ff f9f6 	bl	8002ee8 <__errno>
 8003afc:	2309      	movs	r3, #9
 8003afe:	6003      	str	r3, [r0, #0]
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
 8003b06:	6863      	ldr	r3, [r4, #4]
 8003b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b0c:	6063      	str	r3, [r4, #4]
 8003b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b12:	64a3      	str	r3, [r4, #72]	; 0x48
 8003b14:	260c      	movs	r6, #12
 8003b16:	4630      	mov	r0, r6
 8003b18:	4629      	mov	r1, r5
 8003b1a:	beab      	bkpt	0x00ab
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f7ff fef4 	bl	800390c <checkerror>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	bf1c      	itt	ne
 8003b28:	6120      	strne	r0, [r4, #16]
 8003b2a:	2000      	movne	r0, #0
 8003b2c:	e7ea      	b.n	8003b04 <_swistat+0x18>

08003b2e <_fstat>:
 8003b2e:	460b      	mov	r3, r1
 8003b30:	b510      	push	{r4, lr}
 8003b32:	2100      	movs	r1, #0
 8003b34:	4604      	mov	r4, r0
 8003b36:	2258      	movs	r2, #88	; 0x58
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff f9ff 	bl	8002f3c <memset>
 8003b3e:	4601      	mov	r1, r0
 8003b40:	4620      	mov	r0, r4
 8003b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b46:	f7ff bfd1 	b.w	8003aec <_swistat>

08003b4a <_stat>:
 8003b4a:	b538      	push	{r3, r4, r5, lr}
 8003b4c:	460d      	mov	r5, r1
 8003b4e:	4604      	mov	r4, r0
 8003b50:	2258      	movs	r2, #88	; 0x58
 8003b52:	2100      	movs	r1, #0
 8003b54:	4628      	mov	r0, r5
 8003b56:	f7ff f9f1 	bl	8002f3c <memset>
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	f000 f811 	bl	8003b84 <_swiopen>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	4604      	mov	r4, r0
 8003b66:	d00b      	beq.n	8003b80 <_stat+0x36>
 8003b68:	686b      	ldr	r3, [r5, #4]
 8003b6a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003b6e:	606b      	str	r3, [r5, #4]
 8003b70:	4629      	mov	r1, r5
 8003b72:	f7ff ffbb 	bl	8003aec <_swistat>
 8003b76:	4605      	mov	r5, r0
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7ff ff91 	bl	8003aa0 <_close>
 8003b7e:	462c      	mov	r4, r5
 8003b80:	4620      	mov	r0, r4
 8003b82:	bd38      	pop	{r3, r4, r5, pc}

08003b84 <_swiopen>:
 8003b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b88:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <_swiopen+0xb0>)
 8003b8a:	b097      	sub	sp, #92	; 0x5c
 8003b8c:	4681      	mov	r9, r0
 8003b8e:	460f      	mov	r7, r1
 8003b90:	2500      	movs	r5, #0
 8003b92:	461e      	mov	r6, r3
 8003b94:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8003b98:	1c61      	adds	r1, r4, #1
 8003b9a:	d037      	beq.n	8003c0c <_swiopen+0x88>
 8003b9c:	3501      	adds	r5, #1
 8003b9e:	2d14      	cmp	r5, #20
 8003ba0:	d1f8      	bne.n	8003b94 <_swiopen+0x10>
 8003ba2:	f7ff f9a1 	bl	8002ee8 <__errno>
 8003ba6:	2318      	movs	r3, #24
 8003ba8:	6003      	str	r3, [r0, #0]
 8003baa:	f04f 34ff 	mov.w	r4, #4294967295
 8003bae:	e03d      	b.n	8003c2c <_swiopen+0xa8>
 8003bb0:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8003bb4:	f240 6301 	movw	r3, #1537	; 0x601
 8003bb8:	07ba      	lsls	r2, r7, #30
 8003bba:	bf48      	it	mi
 8003bbc:	f044 0402 	orrmi.w	r4, r4, #2
 8003bc0:	421f      	tst	r7, r3
 8003bc2:	bf18      	it	ne
 8003bc4:	f044 0404 	orrne.w	r4, r4, #4
 8003bc8:	073b      	lsls	r3, r7, #28
 8003bca:	bf48      	it	mi
 8003bcc:	f024 0404 	bicmi.w	r4, r4, #4
 8003bd0:	4648      	mov	r0, r9
 8003bd2:	bf48      	it	mi
 8003bd4:	f044 0408 	orrmi.w	r4, r4, #8
 8003bd8:	f8cd 9000 	str.w	r9, [sp]
 8003bdc:	f7fc faf4 	bl	80001c8 <strlen>
 8003be0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003be4:	2401      	movs	r4, #1
 8003be6:	4620      	mov	r0, r4
 8003be8:	4641      	mov	r1, r8
 8003bea:	beab      	bkpt	0x00ab
 8003bec:	4604      	mov	r4, r0
 8003bee:	2c00      	cmp	r4, #0
 8003bf0:	db07      	blt.n	8003c02 <_swiopen+0x7e>
 8003bf2:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8003bf6:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6073      	str	r3, [r6, #4]
 8003bfe:	462c      	mov	r4, r5
 8003c00:	e014      	b.n	8003c2c <_swiopen+0xa8>
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7ff fe92 	bl	800392c <error>
 8003c08:	4604      	mov	r4, r0
 8003c0a:	e00f      	b.n	8003c2c <_swiopen+0xa8>
 8003c0c:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 8003c10:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003c14:	46e8      	mov	r8, sp
 8003c16:	d1cb      	bne.n	8003bb0 <_swiopen+0x2c>
 8003c18:	4641      	mov	r1, r8
 8003c1a:	4648      	mov	r0, r9
 8003c1c:	f7ff ff95 	bl	8003b4a <_stat>
 8003c20:	3001      	adds	r0, #1
 8003c22:	d0c5      	beq.n	8003bb0 <_swiopen+0x2c>
 8003c24:	f7ff f960 	bl	8002ee8 <__errno>
 8003c28:	2311      	movs	r3, #17
 8003c2a:	6003      	str	r3, [r0, #0]
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	b017      	add	sp, #92	; 0x5c
 8003c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c34:	200000ac 	.word	0x200000ac

08003c38 <_get_semihosting_exts>:
 8003c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c3c:	4606      	mov	r6, r0
 8003c3e:	460f      	mov	r7, r1
 8003c40:	482a      	ldr	r0, [pc, #168]	; (8003cec <_get_semihosting_exts+0xb4>)
 8003c42:	2100      	movs	r1, #0
 8003c44:	4615      	mov	r5, r2
 8003c46:	f7ff ff9d 	bl	8003b84 <_swiopen>
 8003c4a:	462a      	mov	r2, r5
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7ff f973 	bl	8002f3c <memset>
 8003c56:	1c63      	adds	r3, r4, #1
 8003c58:	d016      	beq.n	8003c88 <_get_semihosting_exts+0x50>
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f7ff fe3c 	bl	80038d8 <findslot>
 8003c60:	f04f 090c 	mov.w	r9, #12
 8003c64:	4680      	mov	r8, r0
 8003c66:	4648      	mov	r0, r9
 8003c68:	4641      	mov	r1, r8
 8003c6a:	beab      	bkpt	0x00ab
 8003c6c:	4680      	mov	r8, r0
 8003c6e:	4640      	mov	r0, r8
 8003c70:	f7ff fe4c 	bl	800390c <checkerror>
 8003c74:	2803      	cmp	r0, #3
 8003c76:	dd02      	ble.n	8003c7e <_get_semihosting_exts+0x46>
 8003c78:	1ec3      	subs	r3, r0, #3
 8003c7a:	42ab      	cmp	r3, r5
 8003c7c:	dc08      	bgt.n	8003c90 <_get_semihosting_exts+0x58>
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f7ff ff0e 	bl	8003aa0 <_close>
 8003c84:	f04f 34ff 	mov.w	r4, #4294967295
 8003c88:	4620      	mov	r0, r4
 8003c8a:	b003      	add	sp, #12
 8003c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c90:	2204      	movs	r2, #4
 8003c92:	eb0d 0102 	add.w	r1, sp, r2
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7ff fe66 	bl	8003968 <_read>
 8003c9c:	2803      	cmp	r0, #3
 8003c9e:	ddee      	ble.n	8003c7e <_get_semihosting_exts+0x46>
 8003ca0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ca4:	2b53      	cmp	r3, #83	; 0x53
 8003ca6:	d1ea      	bne.n	8003c7e <_get_semihosting_exts+0x46>
 8003ca8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003cac:	2b48      	cmp	r3, #72	; 0x48
 8003cae:	d1e6      	bne.n	8003c7e <_get_semihosting_exts+0x46>
 8003cb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003cb4:	2b46      	cmp	r3, #70	; 0x46
 8003cb6:	d1e2      	bne.n	8003c7e <_get_semihosting_exts+0x46>
 8003cb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003cbc:	2b42      	cmp	r3, #66	; 0x42
 8003cbe:	d1de      	bne.n	8003c7e <_get_semihosting_exts+0x46>
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4639      	mov	r1, r7
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f7ff fe6b 	bl	80039a0 <_swilseek>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	dbd7      	blt.n	8003c7e <_get_semihosting_exts+0x46>
 8003cce:	462a      	mov	r2, r5
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff fe48 	bl	8003968 <_read>
 8003cd8:	4605      	mov	r5, r0
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f7ff fee0 	bl	8003aa0 <_close>
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f7ff fe13 	bl	800390c <checkerror>
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	e7ce      	b.n	8003c88 <_get_semihosting_exts+0x50>
 8003cea:	bf00      	nop
 8003cec:	08003f34 	.word	0x08003f34

08003cf0 <initialise_semihosting_exts>:
 8003cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cf2:	4d0a      	ldr	r5, [pc, #40]	; (8003d1c <initialise_semihosting_exts+0x2c>)
 8003cf4:	4c0a      	ldr	r4, [pc, #40]	; (8003d20 <initialise_semihosting_exts+0x30>)
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	a801      	add	r0, sp, #4
 8003cfc:	6029      	str	r1, [r5, #0]
 8003cfe:	6022      	str	r2, [r4, #0]
 8003d00:	f7ff ff9a 	bl	8003c38 <_get_semihosting_exts>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	dd07      	ble.n	8003d18 <initialise_semihosting_exts+0x28>
 8003d08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d0c:	f003 0201 	and.w	r2, r3, #1
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	602a      	str	r2, [r5, #0]
 8003d16:	6023      	str	r3, [r4, #0]
 8003d18:	b003      	add	sp, #12
 8003d1a:	bd30      	pop	{r4, r5, pc}
 8003d1c:	20000070 	.word	0x20000070
 8003d20:	20000074 	.word	0x20000074

08003d24 <_has_ext_stdout_stderr>:
 8003d24:	b510      	push	{r4, lr}
 8003d26:	4c04      	ldr	r4, [pc, #16]	; (8003d38 <_has_ext_stdout_stderr+0x14>)
 8003d28:	6822      	ldr	r2, [r4, #0]
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	da01      	bge.n	8003d32 <_has_ext_stdout_stderr+0xe>
 8003d2e:	f7ff ffdf 	bl	8003cf0 <initialise_semihosting_exts>
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	bf00      	nop
 8003d38:	20000074 	.word	0x20000074

08003d3c <initialise_monitor_handles>:
 8003d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d40:	b085      	sub	sp, #20
 8003d42:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003df4 <initialise_monitor_handles+0xb8>
 8003d46:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	2400      	movs	r4, #0
 8003d4e:	9303      	str	r3, [sp, #12]
 8003d50:	f10d 0804 	add.w	r8, sp, #4
 8003d54:	9402      	str	r4, [sp, #8]
 8003d56:	2501      	movs	r5, #1
 8003d58:	4628      	mov	r0, r5
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	beab      	bkpt	0x00ab
 8003d5e:	4605      	mov	r5, r0
 8003d60:	4e20      	ldr	r6, [pc, #128]	; (8003de4 <initialise_monitor_handles+0xa8>)
 8003d62:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <initialise_monitor_handles+0xac>)
 8003d64:	6035      	str	r5, [r6, #0]
 8003d66:	4623      	mov	r3, r4
 8003d68:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8003d72:	3301      	adds	r3, #1
 8003d74:	2b14      	cmp	r3, #20
 8003d76:	d1fa      	bne.n	8003d6e <initialise_monitor_handles+0x32>
 8003d78:	f7ff ffd4 	bl	8003d24 <_has_ext_stdout_stderr>
 8003d7c:	4d1b      	ldr	r5, [pc, #108]	; (8003dec <initialise_monitor_handles+0xb0>)
 8003d7e:	b1d0      	cbz	r0, 8003db6 <initialise_monitor_handles+0x7a>
 8003d80:	f04f 0a03 	mov.w	sl, #3
 8003d84:	2304      	movs	r3, #4
 8003d86:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d8a:	2701      	movs	r7, #1
 8003d8c:	f8cd a00c 	str.w	sl, [sp, #12]
 8003d90:	9302      	str	r3, [sp, #8]
 8003d92:	4638      	mov	r0, r7
 8003d94:	4641      	mov	r1, r8
 8003d96:	beab      	bkpt	0x00ab
 8003d98:	4683      	mov	fp, r0
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <initialise_monitor_handles+0xb4>)
 8003d9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003da0:	f8c3 b000 	str.w	fp, [r3]
 8003da4:	2308      	movs	r3, #8
 8003da6:	f8cd a00c 	str.w	sl, [sp, #12]
 8003daa:	9302      	str	r3, [sp, #8]
 8003dac:	4638      	mov	r0, r7
 8003dae:	4641      	mov	r1, r8
 8003db0:	beab      	bkpt	0x00ab
 8003db2:	4607      	mov	r7, r0
 8003db4:	602f      	str	r7, [r5, #0]
 8003db6:	682b      	ldr	r3, [r5, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	bf02      	ittt	eq
 8003dbc:	4b0c      	ldreq	r3, [pc, #48]	; (8003df0 <initialise_monitor_handles+0xb4>)
 8003dbe:	681b      	ldreq	r3, [r3, #0]
 8003dc0:	602b      	streq	r3, [r5, #0]
 8003dc2:	6833      	ldr	r3, [r6, #0]
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	2600      	movs	r6, #0
 8003dc8:	6066      	str	r6, [r4, #4]
 8003dca:	f7ff ffab 	bl	8003d24 <_has_ext_stdout_stderr>
 8003dce:	b130      	cbz	r0, 8003dde <initialise_monitor_handles+0xa2>
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <initialise_monitor_handles+0xb4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003dde:	b005      	add	sp, #20
 8003de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de4:	200000a4 	.word	0x200000a4
 8003de8:	200000ac 	.word	0x200000ac
 8003dec:	200000a0 	.word	0x200000a0
 8003df0:	200000a8 	.word	0x200000a8
 8003df4:	08003f4a 	.word	0x08003f4a

08003df8 <_isatty>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	f7ff fd6d 	bl	80038d8 <findslot>
 8003dfe:	2509      	movs	r5, #9
 8003e00:	4604      	mov	r4, r0
 8003e02:	b920      	cbnz	r0, 8003e0e <_isatty+0x16>
 8003e04:	f7ff f870 	bl	8002ee8 <__errno>
 8003e08:	6005      	str	r5, [r0, #0]
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	bd70      	pop	{r4, r5, r6, pc}
 8003e0e:	4628      	mov	r0, r5
 8003e10:	4621      	mov	r1, r4
 8003e12:	beab      	bkpt	0x00ab
 8003e14:	4604      	mov	r4, r0
 8003e16:	2c01      	cmp	r4, #1
 8003e18:	d0f7      	beq.n	8003e0a <_isatty+0x12>
 8003e1a:	f7ff f865 	bl	8002ee8 <__errno>
 8003e1e:	2400      	movs	r4, #0
 8003e20:	4605      	mov	r5, r0
 8003e22:	2613      	movs	r6, #19
 8003e24:	4630      	mov	r0, r6
 8003e26:	4621      	mov	r1, r4
 8003e28:	beab      	bkpt	0x00ab
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	602e      	str	r6, [r5, #0]
 8003e2e:	e7ec      	b.n	8003e0a <_isatty+0x12>

08003e30 <_init>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	bf00      	nop
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr

08003e3c <_fini>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr


Cloudometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004018  08004018  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004020  08004020  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000078  080040a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080040a0  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a87c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177f  00000000  00000000  0002a924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002c960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260ac  00000000  00000000  0002d180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab84  00000000  00000000  0005322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e99b7  00000000  00000000  0005ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cac  00000000  00000000  001477b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ef8 	.word	0x08003ef8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08003ef8 	.word	0x08003ef8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80004e0:	f003 fc8e 	bl	8003e00 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fa2a 	bl	800093c <HAL_Init>

  printf("Hello Init! \r\n");
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <main+0x3c>)
 80004ea:	f002 fdd3 	bl	8003094 <puts>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f81b 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f89b 	bl	800062c <MX_GPIO_Init>

  printf("Hello GPIO! \r\n");
 80004f6:	4809      	ldr	r0, [pc, #36]	; (800051c <main+0x40>)
 80004f8:	f002 fdcc 	bl	8003094 <puts>
  MX_USART2_UART_Init();
 80004fc:	f000 f866 	bl	80005cc <MX_USART2_UART_Init>

  printf("Hello UART! \r\n");
 8000500:	4807      	ldr	r0, [pc, #28]	; (8000520 <main+0x44>)
 8000502:	f002 fdc7 	bl	8003094 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello World! \r\n");
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <main+0x48>)
 8000508:	f002 fdc4 	bl	8003094 <puts>
	  HAL_Delay(1000);
 800050c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000510:	f000 fa90 	bl	8000a34 <HAL_Delay>
	  printf("Hello World! \r\n");
 8000514:	e7f7      	b.n	8000506 <main+0x2a>
 8000516:	bf00      	nop
 8000518:	08003f10 	.word	0x08003f10
 800051c:	08003f20 	.word	0x08003f20
 8000520:	08003f30 	.word	0x08003f30
 8000524:	08003f40 	.word	0x08003f40

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fd36 	bl	8002fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054e:	f000 fd4b 	bl	8000fe8 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f8ce 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2310      	movs	r3, #16
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000576:	230a      	movs	r3, #10
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fd82 	bl	8001094 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000596:	f000 f8af 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f956 	bl	8001864 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005be:	f000 f89b 	bl	80006f8 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3758      	adds	r7, #88	; 0x58
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <MX_USART2_UART_Init+0x5c>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_USART2_UART_Init+0x58>)
 8000610:	f001 ffea 	bl	80025e8 <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061a:	f000 f86d 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000094 	.word	0x20000094
 8000628:	40004400 	.word	0x40004400

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f000 fc77 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <MX_GPIO_Init+0xc8>)
 80006c6:	f000 fabf 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ca:	2320      	movs	r3, #32
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f000 fab0 	bl	8000c48 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000800 	.word	0x48000800

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x44>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_MspInit+0x44>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6613      	str	r3, [r2, #96]	; 0x60
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x44>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x44>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <HAL_MspInit+0x44>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6593      	str	r3, [r2, #88]	; 0x58
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x44>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b0ac      	sub	sp, #176	; 0xb0
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2288      	movs	r2, #136	; 0x88
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f002 fc1b 	bl	8002fa8 <memset>
  if(huart->Instance==USART2)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a21      	ldr	r2, [pc, #132]	; (80007fc <HAL_UART_MspInit+0xb0>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d13b      	bne.n	80007f4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800077c:	2302      	movs	r3, #2
 800077e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000780:	2300      	movs	r3, #0
 8000782:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fa71 	bl	8001c70 <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000794:	f7ff ffb0 	bl	80006f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <HAL_UART_MspInit+0xb4>)
 800079a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079c:	4a18      	ldr	r2, [pc, #96]	; (8000800 <HAL_UART_MspInit+0xb4>)
 800079e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a2:	6593      	str	r3, [r2, #88]	; 0x58
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_UART_MspInit+0xb4>)
 80007a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_UART_MspInit+0xb4>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <HAL_UART_MspInit+0xb4>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_UART_MspInit+0xb4>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007c8:	230c      	movs	r3, #12
 80007ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e0:	2307      	movs	r3, #7
 80007e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f000 fa2a 	bl	8000c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	37b0      	adds	r7, #176	; 0xb0
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40004400 	.word	0x40004400
 8000800:	40021000 	.word	0x40021000

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <NMI_Handler+0x4>

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f8d0 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <_sbrk+0x5c>)
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <_sbrk+0x60>)
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <_sbrk+0x64>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <_sbrk+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	429a      	cmp	r2, r3
 8000886:	d207      	bcs.n	8000898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000888:	f002 fb64 	bl	8002f54 <__errno>
 800088c:	4603      	mov	r3, r0
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000896:	e009      	b.n	80008ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_sbrk+0x64>)
 80008a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20018000 	.word	0x20018000
 80008b8:	00000400 	.word	0x00000400
 80008bc:	20000118 	.word	0x20000118
 80008c0:	200001e0 	.word	0x200001e0

080008c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000920 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ec:	f7ff ffea 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	; (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000916:	f002 fb23 	bl	8002f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091a:	f7ff fddf 	bl	80004dc <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000920:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800092c:	08004028 	.word	0x08004028
  ldr r2, =_sbss
 8000930:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000934:	200001dc 	.word	0x200001dc

08000938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_2_IRQHandler>
	...

0800093c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_Init+0x3c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <HAL_Init+0x3c>)
 800094c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000950:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f944 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000958:	2000      	movs	r0, #0
 800095a:	f000 f80f 	bl	800097c <HAL_InitTick>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	71fb      	strb	r3, [r7, #7]
 8000968:	e001      	b.n	800096e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800096a:	f7ff fecb 	bl	8000704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096e:	79fb      	ldrb	r3, [r7, #7]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_InitTick+0x6c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d023      	beq.n	80009d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_InitTick+0x70>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_InitTick+0x6c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f941 	bl	8000c2e <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10f      	bne.n	80009d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d809      	bhi.n	80009cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c0:	f000 f919 	bl	8000bf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_InitTick+0x74>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	e007      	b.n	80009dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e004      	b.n	80009dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
 80009d6:	e001      	b.n	80009dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008
 8000a18:	2000011c 	.word	0x2000011c

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	2000011c 	.word	0x2000011c

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff ffee 	bl	8000a1c <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffde 	bl	8000a1c <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff47 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff5c 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffb0 	bl	8000b9c <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	e17f      	b.n	8000f58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 8171 	beq.w	8000f52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d005      	beq.n	8000c88 <HAL_GPIO_Init+0x40>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d130      	bne.n	8000cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	f003 0201 	and.w	r2, r3, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d118      	bne.n	8000d28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	f003 0201 	and.w	r2, r3, #1
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d017      	beq.n	8000d64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d123      	bne.n	8000db8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	6939      	ldr	r1, [r7, #16]
 8000db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0203 	and.w	r2, r3, #3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80ac 	beq.w	8000f52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b5f      	ldr	r3, [pc, #380]	; (8000f78 <HAL_GPIO_Init+0x330>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfe:	4a5e      	ldr	r2, [pc, #376]	; (8000f78 <HAL_GPIO_Init+0x330>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6613      	str	r3, [r2, #96]	; 0x60
 8000e06:	4b5c      	ldr	r3, [pc, #368]	; (8000f78 <HAL_GPIO_Init+0x330>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e12:	4a5a      	ldr	r2, [pc, #360]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x242>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4f      	ldr	r2, [pc, #316]	; (8000f80 <HAL_GPIO_Init+0x338>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x23e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4e      	ldr	r2, [pc, #312]	; (8000f84 <HAL_GPIO_Init+0x33c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x23a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4d      	ldr	r2, [pc, #308]	; (8000f88 <HAL_GPIO_Init+0x340>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x236>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4c      	ldr	r2, [pc, #304]	; (8000f8c <HAL_GPIO_Init+0x344>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x232>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4b      	ldr	r2, [pc, #300]	; (8000f90 <HAL_GPIO_Init+0x348>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x22e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4a      	ldr	r2, [pc, #296]	; (8000f94 <HAL_GPIO_Init+0x34c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x22a>
 8000e6e:	2306      	movs	r3, #6
 8000e70:	e00c      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e72:	2307      	movs	r3, #7
 8000e74:	e00a      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e76:	2305      	movs	r3, #5
 8000e78:	e008      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	f002 0203 	and.w	r2, r2, #3
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e9c:	4937      	ldr	r1, [pc, #220]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ece:	4a32      	ldr	r2, [pc, #200]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ef8:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f22:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <HAL_GPIO_Init+0x350>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f47f ae78 	bne.w	8000c58 <HAL_GPIO_Init+0x10>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	48000400 	.word	0x48000400
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48000c00 	.word	0x48000c00
 8000f8c:	48001000 	.word	0x48001000
 8000f90:	48001400 	.word	0x48001400
 8000f94:	48001800 	.word	0x48001800
 8000f98:	40010400 	.word	0x40010400

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff6:	d130      	bne.n	800105a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001004:	d038      	beq.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001014:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2232      	movs	r2, #50	; 0x32
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001022:	fba2 2303 	umull	r2, r3, r2, r3
 8001026:	0c9b      	lsrs	r3, r3, #18
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102c:	e002      	b.n	8001034 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3b01      	subs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001040:	d102      	bne.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f2      	bne.n	800102e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001054:	d110      	bne.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e00f      	b.n	800107a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001066:	d007      	beq.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001076:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40007000 	.word	0x40007000
 800108c:	20000000 	.word	0x20000000
 8001090:	431bde83 	.word	0x431bde83

08001094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e3d8      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a6:	4b97      	ldr	r3, [pc, #604]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010b0:	4b94      	ldr	r3, [pc, #592]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 80e4 	beq.w	8001290 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <HAL_RCC_OscConfig+0x4a>
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2b0c      	cmp	r3, #12
 80010d2:	f040 808b 	bne.w	80011ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	f040 8087 	bne.w	80011ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010de:	4b89      	ldr	r3, [pc, #548]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <HAL_RCC_OscConfig+0x62>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e3b0      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1a      	ldr	r2, [r3, #32]
 80010fa:	4b82      	ldr	r3, [pc, #520]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <HAL_RCC_OscConfig+0x7c>
 8001106:	4b7f      	ldr	r3, [pc, #508]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800110e:	e005      	b.n	800111c <HAL_RCC_OscConfig+0x88>
 8001110:	4b7c      	ldr	r3, [pc, #496]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800111c:	4293      	cmp	r3, r2
 800111e:	d223      	bcs.n	8001168 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fd43 	bl	8001bb0 <RCC_SetFlashLatencyFromMSIRange>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e391      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001134:	4b73      	ldr	r3, [pc, #460]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a72      	ldr	r2, [pc, #456]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b70      	ldr	r3, [pc, #448]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	496d      	ldr	r1, [pc, #436]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001152:	4b6c      	ldr	r3, [pc, #432]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	4968      	ldr	r1, [pc, #416]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001162:	4313      	orrs	r3, r2
 8001164:	604b      	str	r3, [r1, #4]
 8001166:	e025      	b.n	80011b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001168:	4b66      	ldr	r3, [pc, #408]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a65      	ldr	r2, [pc, #404]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b63      	ldr	r3, [pc, #396]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4960      	ldr	r1, [pc, #384]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001186:	4b5f      	ldr	r3, [pc, #380]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	495b      	ldr	r1, [pc, #364]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d109      	bne.n	80011b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd03 	bl	8001bb0 <RCC_SetFlashLatencyFromMSIRange>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e351      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011b4:	f000 fc38 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b52      	ldr	r3, [pc, #328]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	4950      	ldr	r1, [pc, #320]	; (8001308 <HAL_RCC_OscConfig+0x274>)
 80011c6:	5ccb      	ldrb	r3, [r1, r3]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	4a4e      	ldr	r2, [pc, #312]	; (800130c <HAL_RCC_OscConfig+0x278>)
 80011d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011d4:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <HAL_RCC_OscConfig+0x27c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fbcf 	bl	800097c <HAL_InitTick>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d052      	beq.n	800128e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	e335      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d032      	beq.n	800125a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011f4:	4b43      	ldr	r3, [pc, #268]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a42      	ldr	r2, [pc, #264]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001200:	f7ff fc0c 	bl	8000a1c <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001208:	f7ff fc08 	bl	8000a1c <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e31e      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800121a:	4b3a      	ldr	r3, [pc, #232]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001226:	4b37      	ldr	r3, [pc, #220]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a36      	ldr	r2, [pc, #216]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b34      	ldr	r3, [pc, #208]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4931      	ldr	r1, [pc, #196]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001244:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	492c      	ldr	r1, [pc, #176]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
 8001258:	e01a      	b.n	8001290 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a29      	ldr	r2, [pc, #164]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001266:	f7ff fbd9 	bl	8000a1c <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800126e:	f7ff fbd5 	bl	8000a1c <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e2eb      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f0      	bne.n	800126e <HAL_RCC_OscConfig+0x1da>
 800128c:	e000      	b.n	8001290 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d074      	beq.n	8001386 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d005      	beq.n	80012ae <HAL_RCC_OscConfig+0x21a>
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	d10e      	bne.n	80012c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d10b      	bne.n	80012c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d064      	beq.n	8001384 <HAL_RCC_OscConfig+0x2f0>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d160      	bne.n	8001384 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e2c8      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ce:	d106      	bne.n	80012de <HAL_RCC_OscConfig+0x24a>
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e026      	b.n	800132c <HAL_RCC_OscConfig+0x298>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e6:	d115      	bne.n	8001314 <HAL_RCC_OscConfig+0x280>
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a05      	ldr	r2, [pc, #20]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80012ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a02      	ldr	r2, [pc, #8]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 80012fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e014      	b.n	800132c <HAL_RCC_OscConfig+0x298>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	08003f50 	.word	0x08003f50
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004
 8001314:	4ba0      	ldr	r3, [pc, #640]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a9f      	ldr	r2, [pc, #636]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b9d      	ldr	r3, [pc, #628]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a9c      	ldr	r2, [pc, #624]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fb72 	bl	8000a1c <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fb6e 	bl	8000a1c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e284      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134e:	4b92      	ldr	r3, [pc, #584]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x2a8>
 800135a:	e014      	b.n	8001386 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fb5e 	bl	8000a1c <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fb5a 	bl	8000a1c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e270      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001376:	4b88      	ldr	r3, [pc, #544]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x2d0>
 8001382:	e000      	b.n	8001386 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d060      	beq.n	8001454 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_OscConfig+0x310>
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b0c      	cmp	r3, #12
 800139c:	d119      	bne.n	80013d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d116      	bne.n	80013d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a4:	4b7c      	ldr	r3, [pc, #496]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x328>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e24d      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b76      	ldr	r3, [pc, #472]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	4973      	ldr	r1, [pc, #460]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d0:	e040      	b.n	8001454 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d023      	beq.n	8001422 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013da:	4b6f      	ldr	r3, [pc, #444]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a6e      	ldr	r2, [pc, #440]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fb19 	bl	8000a1c <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fb15 	bl	8000a1c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e22b      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001400:	4b65      	ldr	r3, [pc, #404]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	4b62      	ldr	r3, [pc, #392]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	061b      	lsls	r3, r3, #24
 800141a:	495f      	ldr	r1, [pc, #380]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
 8001420:	e018      	b.n	8001454 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001422:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a5c      	ldr	r2, [pc, #368]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff faf5 	bl	8000a1c <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff faf1 	bl	8000a1c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e207      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001448:	4b53      	ldr	r3, [pc, #332]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d03c      	beq.n	80014da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001468:	4b4b      	ldr	r3, [pc, #300]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fad0 	bl	8000a1c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff facc 	bl	8000a1c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1e2      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ef      	beq.n	8001480 <HAL_RCC_OscConfig+0x3ec>
 80014a0:	e01b      	b.n	80014da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80014a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a8:	4a3b      	ldr	r2, [pc, #236]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fab3 	bl	8000a1c <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff faaf 	bl	8000a1c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1c5      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80014ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ef      	bne.n	80014ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80a6 	beq.w	8001634 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10d      	bne.n	8001514 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	4a26      	ldr	r2, [pc, #152]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001502:	6593      	str	r3, [r2, #88]	; 0x58
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001510:	2301      	movs	r3, #1
 8001512:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_RCC_OscConfig+0x508>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d118      	bne.n	8001552 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_RCC_OscConfig+0x508>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_RCC_OscConfig+0x508>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152c:	f7ff fa76 	bl	8000a1c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001534:	f7ff fa72 	bl	8000a1c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e188      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_RCC_OscConfig+0x508>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d108      	bne.n	800156c <HAL_RCC_OscConfig+0x4d8>
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 800155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800156a:	e029      	b.n	80015c0 <HAL_RCC_OscConfig+0x52c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b05      	cmp	r3, #5
 8001572:	d115      	bne.n	80015a0 <HAL_RCC_OscConfig+0x50c>
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158a:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_RCC_OscConfig+0x504>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001594:	e014      	b.n	80015c0 <HAL_RCC_OscConfig+0x52c>
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40007000 	.word	0x40007000
 80015a0:	4b91      	ldr	r3, [pc, #580]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a6:	4a90      	ldr	r2, [pc, #576]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015b0:	4b8d      	ldr	r3, [pc, #564]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b6:	4a8c      	ldr	r2, [pc, #560]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d016      	beq.n	80015f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fa28 	bl	8000a1c <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff fa24 	bl	8000a1c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e138      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e6:	4b80      	ldr	r3, [pc, #512]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80015e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0ed      	beq.n	80015d0 <HAL_RCC_OscConfig+0x53c>
 80015f4:	e015      	b.n	8001622 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa11 	bl	8000a1c <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fa0d 	bl	8000a1c <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e121      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001614:	4b74      	ldr	r3, [pc, #464]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ed      	bne.n	80015fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162c:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 800162e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001632:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 810c 	beq.w	8001856 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	2b02      	cmp	r3, #2
 8001644:	f040 80d4 	bne.w	80017f0 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001648:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0203 	and.w	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	429a      	cmp	r2, r3
 800165a:	d130      	bne.n	80016be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	3b01      	subs	r3, #1
 8001668:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d127      	bne.n	80016be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d11f      	bne.n	80016be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001688:	2a07      	cmp	r2, #7
 800168a:	bf14      	ite	ne
 800168c:	2201      	movne	r2, #1
 800168e:	2200      	moveq	r2, #0
 8001690:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001692:	4293      	cmp	r3, r2
 8001694:	d113      	bne.n	80016be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	3b01      	subs	r3, #1
 80016a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d109      	bne.n	80016be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d06e      	beq.n	800179c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d069      	beq.n	8001798 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016c4:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d105      	bne.n	80016dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016d0:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0bb      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a40      	ldr	r2, [pc, #256]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80016e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016ec:	f7ff f996 	bl	8000a1c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff f992 	bl	8000a1c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e0a8      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001706:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_RCC_OscConfig+0x758>)
 8001718:	4013      	ands	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001722:	3a01      	subs	r2, #1
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	4311      	orrs	r1, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800172c:	0212      	lsls	r2, r2, #8
 800172e:	4311      	orrs	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001734:	0852      	lsrs	r2, r2, #1
 8001736:	3a01      	subs	r2, #1
 8001738:	0552      	lsls	r2, r2, #21
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001740:	0852      	lsrs	r2, r2, #1
 8001742:	3a01      	subs	r2, #1
 8001744:	0652      	lsls	r2, r2, #25
 8001746:	4311      	orrs	r1, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800174c:	0912      	lsrs	r2, r2, #4
 800174e:	0452      	lsls	r2, r2, #17
 8001750:	430a      	orrs	r2, r1
 8001752:	4925      	ldr	r1, [pc, #148]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 8001754:	4313      	orrs	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001762:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 800176a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800176e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001770:	f7ff f954 	bl	8000a1c <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff f950 	bl	8000a1c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e066      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001796:	e05e      	b.n	8001856 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e05d      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d156      	bne.n	8001856 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80017ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80017ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017c0:	f7ff f92c 	bl	8000a1c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff f928 	bl	8000a1c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e03e      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_RCC_OscConfig+0x754>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x734>
 80017e6:	e036      	b.n	8001856 <HAL_RCC_OscConfig+0x7c2>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	d02d      	beq.n	8001852 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_RCC_OscConfig+0x7cc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_RCC_OscConfig+0x7cc>)
 80017fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001800:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_RCC_OscConfig+0x7cc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d105      	bne.n	800181a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_RCC_OscConfig+0x7cc>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	4a13      	ldr	r2, [pc, #76]	; (8001860 <HAL_RCC_OscConfig+0x7cc>)
 8001814:	f023 0303 	bic.w	r3, r3, #3
 8001818:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_RCC_OscConfig+0x7cc>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_RCC_OscConfig+0x7cc>)
 8001820:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001828:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff f8f7 	bl	8000a1c <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff f8f3 	bl	8000a1c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e009      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_RCC_OscConfig+0x7cc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x79e>
 8001850:	e001      	b.n	8001856 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0c8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b66      	ldr	r3, [pc, #408]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0207 	bic.w	r2, r3, #7
 800188e:	4961      	ldr	r1, [pc, #388]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b0      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d04c      	beq.n	800194e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018bc:	4b56      	ldr	r3, [pc, #344]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d121      	bne.n	800190c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e09e      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d107      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d115      	bne.n	800190c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e092      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ec:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e086      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	4b46      	ldr	r3, [pc, #280]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e07e      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800190c:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 0203 	bic.w	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	493f      	ldr	r1, [pc, #252]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800191e:	f7ff f87d 	bl	8000a1c <HAL_GetTick>
 8001922:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001924:	e00a      	b.n	800193c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001926:	f7ff f879 	bl	8000a1c <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	; 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e066      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 020c 	and.w	r2, r3, #12
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	429a      	cmp	r2, r3
 800194c:	d1eb      	bne.n	8001926 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	492c      	ldr	r1, [pc, #176]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d210      	bcs.n	800199c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 0207 	bic.w	r2, r3, #7
 8001982:	4924      	ldr	r1, [pc, #144]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e036      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4918      	ldr	r1, [pc, #96]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4910      	ldr	r1, [pc, #64]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019da:	f000 f825 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019de:	4602      	mov	r2, r0
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	490c      	ldr	r1, [pc, #48]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	5ccb      	ldrb	r3, [r1, r3]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe ffbc 	bl	800097c <HAL_InitTick>
 8001a04:	4603      	mov	r3, r0
 8001a06:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a08:	7afb      	ldrb	r3, [r7, #11]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08003f50 	.word	0x08003f50
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a36:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x34>
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d121      	bne.n	8001a9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d11e      	bne.n	8001a9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a5c:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a68:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e005      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a84:	4a2b      	ldr	r2, [pc, #172]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10d      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	e004      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001aae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d134      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0xa6>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d003      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xac>
 8001acc:	e005      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ad0:	617b      	str	r3, [r7, #20]
      break;
 8001ad2:	e005      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ad6:	617b      	str	r3, [r7, #20]
      break;
 8001ad8:	e002      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	617b      	str	r3, [r7, #20]
      break;
 8001ade:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	3301      	adds	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	fb03 f202 	mul.w	r2, r3, r2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	0e5b      	lsrs	r3, r3, #25
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	3301      	adds	r3, #1
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b20:	69bb      	ldr	r3, [r7, #24]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08003f68 	.word	0x08003f68
 8001b38:	00f42400 	.word	0x00f42400
 8001b3c:	007a1200 	.word	0x007a1200

08001b40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000

08001b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b5c:	f7ff fff0 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4904      	ldr	r1, [pc, #16]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08003f60 	.word	0x08003f60

08001b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b88:	f7ff ffda 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0adb      	lsrs	r3, r3, #11
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4904      	ldr	r1, [pc, #16]	; (8001bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08003f60 	.word	0x08003f60

08001bb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bc8:	f7ff fa00 	bl	8000fcc <HAL_PWREx_GetVoltageRange>
 8001bcc:	6178      	str	r0, [r7, #20]
 8001bce:	e014      	b.n	8001bfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	4a24      	ldr	r2, [pc, #144]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6593      	str	r3, [r2, #88]	; 0x58
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001be8:	f7ff f9f0 	bl	8000fcc <HAL_PWREx_GetVoltageRange>
 8001bec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bee:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c00:	d10b      	bne.n	8001c1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b80      	cmp	r3, #128	; 0x80
 8001c06:	d919      	bls.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2ba0      	cmp	r3, #160	; 0xa0
 8001c0c:	d902      	bls.n	8001c14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c0e:	2302      	movs	r3, #2
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	e013      	b.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c14:	2301      	movs	r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	e010      	b.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b80      	cmp	r3, #128	; 0x80
 8001c1e:	d902      	bls.n	8001c26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c20:	2303      	movs	r3, #3
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	e00a      	b.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b80      	cmp	r3, #128	; 0x80
 8001c2a:	d102      	bne.n	8001c32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	e004      	b.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b70      	cmp	r3, #112	; 0x70
 8001c36:	d101      	bne.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c38:	2301      	movs	r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 0207 	bic.w	r2, r3, #7
 8001c44:	4909      	ldr	r1, [pc, #36]	; (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40022000 	.word	0x40022000

08001c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c78:	2300      	movs	r3, #0
 8001c7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d041      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c94:	d02a      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c9a:	d824      	bhi.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ca0:	d008      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ca2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ca6:	d81e      	bhi.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00a      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cb0:	d010      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001cb2:	e018      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cb4:	4b86      	ldr	r3, [pc, #536]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4a85      	ldr	r2, [pc, #532]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cc0:	e015      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 fabb 	bl	8002244 <RCCEx_PLLSAI1_Config>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cd2:	e00c      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3320      	adds	r3, #32
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fba6 	bl	800242c <RCCEx_PLLSAI2_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ce4:	e003      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	74fb      	strb	r3, [r7, #19]
      break;
 8001cea:	e000      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cee:	7cfb      	ldrb	r3, [r7, #19]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10b      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cf4:	4b76      	ldr	r3, [pc, #472]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d02:	4973      	ldr	r1, [pc, #460]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d0a:	e001      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d0c:	7cfb      	ldrb	r3, [r7, #19]
 8001d0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d041      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d24:	d02a      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d2a:	d824      	bhi.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d30:	d008      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d36:	d81e      	bhi.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00a      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d010      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d42:	e018      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d44:	4b62      	ldr	r3, [pc, #392]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4a61      	ldr	r2, [pc, #388]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d50:	e015      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fa73 	bl	8002244 <RCCEx_PLLSAI1_Config>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d62:	e00c      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3320      	adds	r3, #32
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fb5e 	bl	800242c <RCCEx_PLLSAI2_Config>
 8001d70:	4603      	mov	r3, r0
 8001d72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d74:	e003      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	74fb      	strb	r3, [r7, #19]
      break;
 8001d7a:	e000      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d7e:	7cfb      	ldrb	r3, [r7, #19]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d84:	4b52      	ldr	r3, [pc, #328]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d92:	494f      	ldr	r1, [pc, #316]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d9a:	e001      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d9c:	7cfb      	ldrb	r3, [r7, #19]
 8001d9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a0 	beq.w	8001eee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001db2:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	4a40      	ldr	r2, [pc, #256]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd4:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de0:	2301      	movs	r3, #1
 8001de2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001df0:	f7fe fe14 	bl	8000a1c <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001df6:	e009      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7fe fe10 	bl	8000a1c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d902      	bls.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	74fb      	strb	r3, [r7, #19]
        break;
 8001e0a:	e005      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ef      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e18:	7cfb      	ldrb	r3, [r7, #19]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d15c      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01f      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d019      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d016      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fdcf 	bl	8000a1c <HAL_GetTick>
 8001e7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e80:	e00b      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7fe fdcb 	bl	8000a1c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d902      	bls.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	74fb      	strb	r3, [r7, #19]
            break;
 8001e98:	e006      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ec      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ebe:	4904      	ldr	r1, [pc, #16]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ec6:	e009      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	74bb      	strb	r3, [r7, #18]
 8001ecc:	e006      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001edc:	7c7b      	ldrb	r3, [r7, #17]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d105      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee2:	4b9e      	ldr	r3, [pc, #632]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	4a9d      	ldr	r2, [pc, #628]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001efa:	4b98      	ldr	r3, [pc, #608]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f00:	f023 0203 	bic.w	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	4994      	ldr	r1, [pc, #592]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f1c:	4b8f      	ldr	r3, [pc, #572]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	f023 020c 	bic.w	r2, r3, #12
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2a:	498c      	ldr	r1, [pc, #560]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f3e:	4b87      	ldr	r3, [pc, #540]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4983      	ldr	r1, [pc, #524]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f60:	4b7e      	ldr	r3, [pc, #504]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	497b      	ldr	r1, [pc, #492]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f82:	4b76      	ldr	r3, [pc, #472]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f90:	4972      	ldr	r1, [pc, #456]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fa4:	4b6d      	ldr	r3, [pc, #436]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	496a      	ldr	r1, [pc, #424]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fc6:	4b65      	ldr	r3, [pc, #404]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	4961      	ldr	r1, [pc, #388]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fe8:	4b5c      	ldr	r3, [pc, #368]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff6:	4959      	ldr	r1, [pc, #356]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800200a:	4b54      	ldr	r3, [pc, #336]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002010:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002018:	4950      	ldr	r1, [pc, #320]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800202c:	4b4b      	ldr	r3, [pc, #300]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	4948      	ldr	r1, [pc, #288]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800204e:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	493f      	ldr	r1, [pc, #252]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d028      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800207e:	4937      	ldr	r1, [pc, #220]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800208a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800208e:	d106      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002090:	4b32      	ldr	r3, [pc, #200]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a31      	ldr	r2, [pc, #196]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800209a:	60d3      	str	r3, [r2, #12]
 800209c:	e011      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020a6:	d10c      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3304      	adds	r3, #4
 80020ac:	2101      	movs	r1, #1
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f8c8 	bl	8002244 <RCCEx_PLLSAI1_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d028      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	491f      	ldr	r1, [pc, #124]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ec:	d106      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020f8:	60d3      	str	r3, [r2, #12]
 80020fa:	e011      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002104:	d10c      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	2101      	movs	r1, #1
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f899 	bl	8002244 <RCCEx_PLLSAI1_Config>
 8002112:	4603      	mov	r3, r0
 8002114:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002116:	7cfb      	ldrb	r3, [r7, #19]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02b      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800214a:	d109      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a02      	ldr	r2, [pc, #8]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002156:	60d3      	str	r3, [r2, #12]
 8002158:	e014      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002164:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002168:	d10c      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f867 	bl	8002244 <RCCEx_PLLSAI1_Config>
 8002176:	4603      	mov	r3, r0
 8002178:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800217a:	7cfb      	ldrb	r3, [r7, #19]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d02f      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800219e:	4928      	ldr	r1, [pc, #160]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021ae:	d10d      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	2102      	movs	r1, #2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f844 	bl	8002244 <RCCEx_PLLSAI1_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d014      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	74bb      	strb	r3, [r7, #18]
 80021ca:	e011      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3320      	adds	r3, #32
 80021da:	2102      	movs	r1, #2
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f925 	bl	800242c <RCCEx_PLLSAI2_Config>
 80021e2:	4603      	mov	r3, r0
 80021e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800220a:	490d      	ldr	r1, [pc, #52]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800222e:	4904      	ldr	r1, [pc, #16]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002236:	7cbb      	ldrb	r3, [r7, #18]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000

08002244 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002252:	4b75      	ldr	r3, [pc, #468]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d018      	beq.n	8002290 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f003 0203 	and.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d10d      	bne.n	800228a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
       ||
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
       ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d047      	beq.n	800231a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	e044      	b.n	800231a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d018      	beq.n	80022ca <RCCEx_PLLSAI1_Config+0x86>
 8002298:	2b03      	cmp	r3, #3
 800229a:	d825      	bhi.n	80022e8 <RCCEx_PLLSAI1_Config+0xa4>
 800229c:	2b01      	cmp	r3, #1
 800229e:	d002      	beq.n	80022a6 <RCCEx_PLLSAI1_Config+0x62>
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d009      	beq.n	80022b8 <RCCEx_PLLSAI1_Config+0x74>
 80022a4:	e020      	b.n	80022e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022a6:	4b60      	ldr	r3, [pc, #384]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d11d      	bne.n	80022ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b6:	e01a      	b.n	80022ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022b8:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d116      	bne.n	80022f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c8:	e013      	b.n	80022f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022ca:	4b57      	ldr	r3, [pc, #348]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10f      	bne.n	80022f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022d6:	4b54      	ldr	r3, [pc, #336]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022e6:	e006      	b.n	80022f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      break;
 80022ec:	e004      	b.n	80022f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ee:	bf00      	nop
 80022f0:	e002      	b.n	80022f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022f2:	bf00      	nop
 80022f4:	e000      	b.n	80022f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10d      	bne.n	800231a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022fe:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6819      	ldr	r1, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	430b      	orrs	r3, r1
 8002314:	4944      	ldr	r1, [pc, #272]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d17d      	bne.n	800241c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002320:	4b41      	ldr	r3, [pc, #260]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a40      	ldr	r2, [pc, #256]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002326:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800232a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232c:	f7fe fb76 	bl	8000a1c <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002332:	e009      	b.n	8002348 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002334:	f7fe fb72 	bl	8000a1c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d902      	bls.n	8002348 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	73fb      	strb	r3, [r7, #15]
        break;
 8002346:	e005      	b.n	8002354 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1ef      	bne.n	8002334 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d160      	bne.n	800241c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d111      	bne.n	8002384 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6892      	ldr	r2, [r2, #8]
 8002370:	0211      	lsls	r1, r2, #8
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	0912      	lsrs	r2, r2, #4
 8002378:	0452      	lsls	r2, r2, #17
 800237a:	430a      	orrs	r2, r1
 800237c:	492a      	ldr	r1, [pc, #168]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237e:	4313      	orrs	r3, r2
 8002380:	610b      	str	r3, [r1, #16]
 8002382:	e027      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d112      	bne.n	80023b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800238a:	4b27      	ldr	r3, [pc, #156]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002392:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6892      	ldr	r2, [r2, #8]
 800239a:	0211      	lsls	r1, r2, #8
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6912      	ldr	r2, [r2, #16]
 80023a0:	0852      	lsrs	r2, r2, #1
 80023a2:	3a01      	subs	r2, #1
 80023a4:	0552      	lsls	r2, r2, #21
 80023a6:	430a      	orrs	r2, r1
 80023a8:	491f      	ldr	r1, [pc, #124]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	610b      	str	r3, [r1, #16]
 80023ae:	e011      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6892      	ldr	r2, [r2, #8]
 80023c0:	0211      	lsls	r1, r2, #8
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6952      	ldr	r2, [r2, #20]
 80023c6:	0852      	lsrs	r2, r2, #1
 80023c8:	3a01      	subs	r2, #1
 80023ca:	0652      	lsls	r2, r2, #25
 80023cc:	430a      	orrs	r2, r1
 80023ce:	4916      	ldr	r1, [pc, #88]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a13      	ldr	r2, [pc, #76]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe fb1c 	bl	8000a1c <HAL_GetTick>
 80023e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023e6:	e009      	b.n	80023fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023e8:	f7fe fb18 	bl	8000a1c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d902      	bls.n	80023fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	73fb      	strb	r3, [r7, #15]
          break;
 80023fa:	e005      	b.n	8002408 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ef      	beq.n	80023e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	4904      	ldr	r1, [pc, #16]	; (8002428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000

0800242c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800243a:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d018      	beq.n	8002478 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0203 	and.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d10d      	bne.n	8002472 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
       ||
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800245e:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
       ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d047      	beq.n	8002502 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	e044      	b.n	8002502 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d018      	beq.n	80024b2 <RCCEx_PLLSAI2_Config+0x86>
 8002480:	2b03      	cmp	r3, #3
 8002482:	d825      	bhi.n	80024d0 <RCCEx_PLLSAI2_Config+0xa4>
 8002484:	2b01      	cmp	r3, #1
 8002486:	d002      	beq.n	800248e <RCCEx_PLLSAI2_Config+0x62>
 8002488:	2b02      	cmp	r3, #2
 800248a:	d009      	beq.n	80024a0 <RCCEx_PLLSAI2_Config+0x74>
 800248c:	e020      	b.n	80024d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800248e:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11d      	bne.n	80024d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249e:	e01a      	b.n	80024d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024a0:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d116      	bne.n	80024da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b0:	e013      	b.n	80024da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024b2:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024be:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ce:	e006      	b.n	80024de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      break;
 80024d4:	e004      	b.n	80024e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024de:	bf00      	nop
    }

    if(status == HAL_OK)
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024e6:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6819      	ldr	r1, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	430b      	orrs	r3, r1
 80024fc:	4939      	ldr	r1, [pc, #228]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d167      	bne.n	80025d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002508:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a35      	ldr	r2, [pc, #212]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800250e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7fe fa82 	bl	8000a1c <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800251a:	e009      	b.n	8002530 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800251c:	f7fe fa7e 	bl	8000a1c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d902      	bls.n	8002530 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	73fb      	strb	r3, [r7, #15]
        break;
 800252e:	e005      	b.n	800253c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002530:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ef      	bne.n	800251c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d14a      	bne.n	80025d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d111      	bne.n	800256c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002548:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6892      	ldr	r2, [r2, #8]
 8002558:	0211      	lsls	r1, r2, #8
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68d2      	ldr	r2, [r2, #12]
 800255e:	0912      	lsrs	r2, r2, #4
 8002560:	0452      	lsls	r2, r2, #17
 8002562:	430a      	orrs	r2, r1
 8002564:	491f      	ldr	r1, [pc, #124]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002566:	4313      	orrs	r3, r2
 8002568:	614b      	str	r3, [r1, #20]
 800256a:	e011      	b.n	8002590 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	0211      	lsls	r1, r2, #8
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6912      	ldr	r2, [r2, #16]
 8002582:	0852      	lsrs	r2, r2, #1
 8002584:	3a01      	subs	r2, #1
 8002586:	0652      	lsls	r2, r2, #25
 8002588:	430a      	orrs	r2, r1
 800258a:	4916      	ldr	r1, [pc, #88]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258c:	4313      	orrs	r3, r2
 800258e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe fa3e 	bl	8000a1c <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025a2:	e009      	b.n	80025b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025a4:	f7fe fa3a 	bl	8000a1c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	73fb      	strb	r3, [r7, #15]
          break;
 80025b6:	e005      	b.n	80025c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	4904      	ldr	r1, [pc, #16]	; (80025e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e040      	b.n	800267c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe f89e 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2224      	movs	r2, #36	; 0x24
 8002614:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f82c 	bl	8002684 <UART_SetConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e022      	b.n	800267c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fad8 	bl	8002bf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fb5f 	bl	8002d38 <UART_CheckIdleState>
 800267a:	4603      	mov	r3, r0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002688:	b08a      	sub	sp, #40	; 0x28
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	431a      	orrs	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4ba4      	ldr	r3, [pc, #656]	; (8002944 <UART_SetConfig+0x2c0>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026bc:	430b      	orrs	r3, r1
 80026be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a99      	ldr	r2, [pc, #612]	; (8002948 <UART_SetConfig+0x2c4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	4313      	orrs	r3, r2
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002700:	430a      	orrs	r2, r1
 8002702:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a90      	ldr	r2, [pc, #576]	; (800294c <UART_SetConfig+0x2c8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d126      	bne.n	800275c <UART_SetConfig+0xd8>
 800270e:	4b90      	ldr	r3, [pc, #576]	; (8002950 <UART_SetConfig+0x2cc>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b03      	cmp	r3, #3
 800271a:	d81b      	bhi.n	8002754 <UART_SetConfig+0xd0>
 800271c:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <UART_SetConfig+0xa0>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002735 	.word	0x08002735
 8002728:	08002745 	.word	0x08002745
 800272c:	0800273d 	.word	0x0800273d
 8002730:	0800274d 	.word	0x0800274d
 8002734:	2301      	movs	r3, #1
 8002736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800273a:	e116      	b.n	800296a <UART_SetConfig+0x2e6>
 800273c:	2302      	movs	r3, #2
 800273e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002742:	e112      	b.n	800296a <UART_SetConfig+0x2e6>
 8002744:	2304      	movs	r3, #4
 8002746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800274a:	e10e      	b.n	800296a <UART_SetConfig+0x2e6>
 800274c:	2308      	movs	r3, #8
 800274e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002752:	e10a      	b.n	800296a <UART_SetConfig+0x2e6>
 8002754:	2310      	movs	r3, #16
 8002756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800275a:	e106      	b.n	800296a <UART_SetConfig+0x2e6>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a7c      	ldr	r2, [pc, #496]	; (8002954 <UART_SetConfig+0x2d0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d138      	bne.n	80027d8 <UART_SetConfig+0x154>
 8002766:	4b7a      	ldr	r3, [pc, #488]	; (8002950 <UART_SetConfig+0x2cc>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d82d      	bhi.n	80027d0 <UART_SetConfig+0x14c>
 8002774:	a201      	add	r2, pc, #4	; (adr r2, 800277c <UART_SetConfig+0xf8>)
 8002776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277a:	bf00      	nop
 800277c:	080027b1 	.word	0x080027b1
 8002780:	080027d1 	.word	0x080027d1
 8002784:	080027d1 	.word	0x080027d1
 8002788:	080027d1 	.word	0x080027d1
 800278c:	080027c1 	.word	0x080027c1
 8002790:	080027d1 	.word	0x080027d1
 8002794:	080027d1 	.word	0x080027d1
 8002798:	080027d1 	.word	0x080027d1
 800279c:	080027b9 	.word	0x080027b9
 80027a0:	080027d1 	.word	0x080027d1
 80027a4:	080027d1 	.word	0x080027d1
 80027a8:	080027d1 	.word	0x080027d1
 80027ac:	080027c9 	.word	0x080027c9
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027b6:	e0d8      	b.n	800296a <UART_SetConfig+0x2e6>
 80027b8:	2302      	movs	r3, #2
 80027ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027be:	e0d4      	b.n	800296a <UART_SetConfig+0x2e6>
 80027c0:	2304      	movs	r3, #4
 80027c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c6:	e0d0      	b.n	800296a <UART_SetConfig+0x2e6>
 80027c8:	2308      	movs	r3, #8
 80027ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ce:	e0cc      	b.n	800296a <UART_SetConfig+0x2e6>
 80027d0:	2310      	movs	r3, #16
 80027d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027d6:	e0c8      	b.n	800296a <UART_SetConfig+0x2e6>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5e      	ldr	r2, [pc, #376]	; (8002958 <UART_SetConfig+0x2d4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d125      	bne.n	800282e <UART_SetConfig+0x1aa>
 80027e2:	4b5b      	ldr	r3, [pc, #364]	; (8002950 <UART_SetConfig+0x2cc>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027ec:	2b30      	cmp	r3, #48	; 0x30
 80027ee:	d016      	beq.n	800281e <UART_SetConfig+0x19a>
 80027f0:	2b30      	cmp	r3, #48	; 0x30
 80027f2:	d818      	bhi.n	8002826 <UART_SetConfig+0x1a2>
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d00a      	beq.n	800280e <UART_SetConfig+0x18a>
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d814      	bhi.n	8002826 <UART_SetConfig+0x1a2>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <UART_SetConfig+0x182>
 8002800:	2b10      	cmp	r3, #16
 8002802:	d008      	beq.n	8002816 <UART_SetConfig+0x192>
 8002804:	e00f      	b.n	8002826 <UART_SetConfig+0x1a2>
 8002806:	2300      	movs	r3, #0
 8002808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800280c:	e0ad      	b.n	800296a <UART_SetConfig+0x2e6>
 800280e:	2302      	movs	r3, #2
 8002810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002814:	e0a9      	b.n	800296a <UART_SetConfig+0x2e6>
 8002816:	2304      	movs	r3, #4
 8002818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800281c:	e0a5      	b.n	800296a <UART_SetConfig+0x2e6>
 800281e:	2308      	movs	r3, #8
 8002820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002824:	e0a1      	b.n	800296a <UART_SetConfig+0x2e6>
 8002826:	2310      	movs	r3, #16
 8002828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800282c:	e09d      	b.n	800296a <UART_SetConfig+0x2e6>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a4a      	ldr	r2, [pc, #296]	; (800295c <UART_SetConfig+0x2d8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d125      	bne.n	8002884 <UART_SetConfig+0x200>
 8002838:	4b45      	ldr	r3, [pc, #276]	; (8002950 <UART_SetConfig+0x2cc>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002842:	2bc0      	cmp	r3, #192	; 0xc0
 8002844:	d016      	beq.n	8002874 <UART_SetConfig+0x1f0>
 8002846:	2bc0      	cmp	r3, #192	; 0xc0
 8002848:	d818      	bhi.n	800287c <UART_SetConfig+0x1f8>
 800284a:	2b80      	cmp	r3, #128	; 0x80
 800284c:	d00a      	beq.n	8002864 <UART_SetConfig+0x1e0>
 800284e:	2b80      	cmp	r3, #128	; 0x80
 8002850:	d814      	bhi.n	800287c <UART_SetConfig+0x1f8>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <UART_SetConfig+0x1d8>
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d008      	beq.n	800286c <UART_SetConfig+0x1e8>
 800285a:	e00f      	b.n	800287c <UART_SetConfig+0x1f8>
 800285c:	2300      	movs	r3, #0
 800285e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002862:	e082      	b.n	800296a <UART_SetConfig+0x2e6>
 8002864:	2302      	movs	r3, #2
 8002866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800286a:	e07e      	b.n	800296a <UART_SetConfig+0x2e6>
 800286c:	2304      	movs	r3, #4
 800286e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002872:	e07a      	b.n	800296a <UART_SetConfig+0x2e6>
 8002874:	2308      	movs	r3, #8
 8002876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800287a:	e076      	b.n	800296a <UART_SetConfig+0x2e6>
 800287c:	2310      	movs	r3, #16
 800287e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002882:	e072      	b.n	800296a <UART_SetConfig+0x2e6>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a35      	ldr	r2, [pc, #212]	; (8002960 <UART_SetConfig+0x2dc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d12a      	bne.n	80028e4 <UART_SetConfig+0x260>
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <UART_SetConfig+0x2cc>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800289c:	d01a      	beq.n	80028d4 <UART_SetConfig+0x250>
 800289e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028a2:	d81b      	bhi.n	80028dc <UART_SetConfig+0x258>
 80028a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a8:	d00c      	beq.n	80028c4 <UART_SetConfig+0x240>
 80028aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ae:	d815      	bhi.n	80028dc <UART_SetConfig+0x258>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <UART_SetConfig+0x238>
 80028b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b8:	d008      	beq.n	80028cc <UART_SetConfig+0x248>
 80028ba:	e00f      	b.n	80028dc <UART_SetConfig+0x258>
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028c2:	e052      	b.n	800296a <UART_SetConfig+0x2e6>
 80028c4:	2302      	movs	r3, #2
 80028c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ca:	e04e      	b.n	800296a <UART_SetConfig+0x2e6>
 80028cc:	2304      	movs	r3, #4
 80028ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028d2:	e04a      	b.n	800296a <UART_SetConfig+0x2e6>
 80028d4:	2308      	movs	r3, #8
 80028d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028da:	e046      	b.n	800296a <UART_SetConfig+0x2e6>
 80028dc:	2310      	movs	r3, #16
 80028de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028e2:	e042      	b.n	800296a <UART_SetConfig+0x2e6>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a17      	ldr	r2, [pc, #92]	; (8002948 <UART_SetConfig+0x2c4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d13a      	bne.n	8002964 <UART_SetConfig+0x2e0>
 80028ee:	4b18      	ldr	r3, [pc, #96]	; (8002950 <UART_SetConfig+0x2cc>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028fc:	d01a      	beq.n	8002934 <UART_SetConfig+0x2b0>
 80028fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002902:	d81b      	bhi.n	800293c <UART_SetConfig+0x2b8>
 8002904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002908:	d00c      	beq.n	8002924 <UART_SetConfig+0x2a0>
 800290a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800290e:	d815      	bhi.n	800293c <UART_SetConfig+0x2b8>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <UART_SetConfig+0x298>
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	d008      	beq.n	800292c <UART_SetConfig+0x2a8>
 800291a:	e00f      	b.n	800293c <UART_SetConfig+0x2b8>
 800291c:	2300      	movs	r3, #0
 800291e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002922:	e022      	b.n	800296a <UART_SetConfig+0x2e6>
 8002924:	2302      	movs	r3, #2
 8002926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800292a:	e01e      	b.n	800296a <UART_SetConfig+0x2e6>
 800292c:	2304      	movs	r3, #4
 800292e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002932:	e01a      	b.n	800296a <UART_SetConfig+0x2e6>
 8002934:	2308      	movs	r3, #8
 8002936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800293a:	e016      	b.n	800296a <UART_SetConfig+0x2e6>
 800293c:	2310      	movs	r3, #16
 800293e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002942:	e012      	b.n	800296a <UART_SetConfig+0x2e6>
 8002944:	efff69f3 	.word	0xefff69f3
 8002948:	40008000 	.word	0x40008000
 800294c:	40013800 	.word	0x40013800
 8002950:	40021000 	.word	0x40021000
 8002954:	40004400 	.word	0x40004400
 8002958:	40004800 	.word	0x40004800
 800295c:	40004c00 	.word	0x40004c00
 8002960:	40005000 	.word	0x40005000
 8002964:	2310      	movs	r3, #16
 8002966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a9f      	ldr	r2, [pc, #636]	; (8002bec <UART_SetConfig+0x568>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d17a      	bne.n	8002a6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002978:	2b08      	cmp	r3, #8
 800297a:	d824      	bhi.n	80029c6 <UART_SetConfig+0x342>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <UART_SetConfig+0x300>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	080029a9 	.word	0x080029a9
 8002988:	080029c7 	.word	0x080029c7
 800298c:	080029b1 	.word	0x080029b1
 8002990:	080029c7 	.word	0x080029c7
 8002994:	080029b7 	.word	0x080029b7
 8002998:	080029c7 	.word	0x080029c7
 800299c:	080029c7 	.word	0x080029c7
 80029a0:	080029c7 	.word	0x080029c7
 80029a4:	080029bf 	.word	0x080029bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029a8:	f7ff f8d6 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 80029ac:	61f8      	str	r0, [r7, #28]
        break;
 80029ae:	e010      	b.n	80029d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029b0:	4b8f      	ldr	r3, [pc, #572]	; (8002bf0 <UART_SetConfig+0x56c>)
 80029b2:	61fb      	str	r3, [r7, #28]
        break;
 80029b4:	e00d      	b.n	80029d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029b6:	f7ff f837 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80029ba:	61f8      	str	r0, [r7, #28]
        break;
 80029bc:	e009      	b.n	80029d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c2:	61fb      	str	r3, [r7, #28]
        break;
 80029c4:	e005      	b.n	80029d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80029d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80fb 	beq.w	8002bd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d305      	bcc.n	80029f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d903      	bls.n	80029fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80029fc:	e0e8      	b.n	8002bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	2200      	movs	r2, #0
 8002a02:	461c      	mov	r4, r3
 8002a04:	4615      	mov	r5, r2
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	022b      	lsls	r3, r5, #8
 8002a10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a14:	0222      	lsls	r2, r4, #8
 8002a16:	68f9      	ldr	r1, [r7, #12]
 8002a18:	6849      	ldr	r1, [r1, #4]
 8002a1a:	0849      	lsrs	r1, r1, #1
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	4688      	mov	r8, r1
 8002a20:	4681      	mov	r9, r0
 8002a22:	eb12 0a08 	adds.w	sl, r2, r8
 8002a26:	eb43 0b09 	adc.w	fp, r3, r9
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a38:	4650      	mov	r0, sl
 8002a3a:	4659      	mov	r1, fp
 8002a3c:	f7fd fbcc 	bl	80001d8 <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4613      	mov	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a4e:	d308      	bcc.n	8002a62 <UART_SetConfig+0x3de>
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a56:	d204      	bcs.n	8002a62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	60da      	str	r2, [r3, #12]
 8002a60:	e0b6      	b.n	8002bd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a68:	e0b2      	b.n	8002bd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a72:	d15e      	bne.n	8002b32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002a74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d828      	bhi.n	8002ace <UART_SetConfig+0x44a>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <UART_SetConfig+0x400>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002aa9 	.word	0x08002aa9
 8002a88:	08002ab1 	.word	0x08002ab1
 8002a8c:	08002ab9 	.word	0x08002ab9
 8002a90:	08002acf 	.word	0x08002acf
 8002a94:	08002abf 	.word	0x08002abf
 8002a98:	08002acf 	.word	0x08002acf
 8002a9c:	08002acf 	.word	0x08002acf
 8002aa0:	08002acf 	.word	0x08002acf
 8002aa4:	08002ac7 	.word	0x08002ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aa8:	f7ff f856 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002aac:	61f8      	str	r0, [r7, #28]
        break;
 8002aae:	e014      	b.n	8002ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ab0:	f7ff f868 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8002ab4:	61f8      	str	r0, [r7, #28]
        break;
 8002ab6:	e010      	b.n	8002ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <UART_SetConfig+0x56c>)
 8002aba:	61fb      	str	r3, [r7, #28]
        break;
 8002abc:	e00d      	b.n	8002ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002abe:	f7fe ffb3 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 8002ac2:	61f8      	str	r0, [r7, #28]
        break;
 8002ac4:	e009      	b.n	8002ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aca:	61fb      	str	r3, [r7, #28]
        break;
 8002acc:	e005      	b.n	8002ada <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d077      	beq.n	8002bd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005a      	lsls	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	441a      	add	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2b0f      	cmp	r3, #15
 8002afa:	d916      	bls.n	8002b2a <UART_SetConfig+0x4a6>
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b02:	d212      	bcs.n	8002b2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f023 030f 	bic.w	r3, r3, #15
 8002b0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	8afb      	ldrh	r3, [r7, #22]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	8afa      	ldrh	r2, [r7, #22]
 8002b26:	60da      	str	r2, [r3, #12]
 8002b28:	e052      	b.n	8002bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b30:	e04e      	b.n	8002bd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d827      	bhi.n	8002b8a <UART_SetConfig+0x506>
 8002b3a:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <UART_SetConfig+0x4bc>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b65 	.word	0x08002b65
 8002b44:	08002b6d 	.word	0x08002b6d
 8002b48:	08002b75 	.word	0x08002b75
 8002b4c:	08002b8b 	.word	0x08002b8b
 8002b50:	08002b7b 	.word	0x08002b7b
 8002b54:	08002b8b 	.word	0x08002b8b
 8002b58:	08002b8b 	.word	0x08002b8b
 8002b5c:	08002b8b 	.word	0x08002b8b
 8002b60:	08002b83 	.word	0x08002b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b64:	f7fe fff8 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002b68:	61f8      	str	r0, [r7, #28]
        break;
 8002b6a:	e014      	b.n	8002b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b6c:	f7ff f80a 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8002b70:	61f8      	str	r0, [r7, #28]
        break;
 8002b72:	e010      	b.n	8002b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b74:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <UART_SetConfig+0x56c>)
 8002b76:	61fb      	str	r3, [r7, #28]
        break;
 8002b78:	e00d      	b.n	8002b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b7a:	f7fe ff55 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 8002b7e:	61f8      	str	r0, [r7, #28]
        break;
 8002b80:	e009      	b.n	8002b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b86:	61fb      	str	r3, [r7, #28]
        break;
 8002b88:	e005      	b.n	8002b96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b94:	bf00      	nop
    }

    if (pclk != 0U)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d019      	beq.n	8002bd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	085a      	lsrs	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	441a      	add	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b0f      	cmp	r3, #15
 8002bb4:	d909      	bls.n	8002bca <UART_SetConfig+0x546>
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbc:	d205      	bcs.n	8002bca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	e002      	b.n	8002bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002bdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3728      	adds	r7, #40	; 0x28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bea:	bf00      	nop
 8002bec:	40008000 	.word	0x40008000
 8002bf0:	00f42400 	.word	0x00f42400

08002bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01a      	beq.n	8002d0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf2:	d10a      	bne.n	8002d0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d48:	f7fd fe68 	bl	8000a1c <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d10e      	bne.n	8002d7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f82d 	bl	8002dca <UART_WaitOnFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e023      	b.n	8002dc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d10e      	bne.n	8002da6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f817 	bl	8002dca <UART_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e00d      	b.n	8002dc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b09c      	sub	sp, #112	; 0x70
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dda:	e0a5      	b.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de2:	f000 80a1 	beq.w	8002f28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fd fe19 	bl	8000a1c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x32>
 8002df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d13e      	bne.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e04:	e853 3f00 	ldrex	r3, [r3]
 8002e08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e10:	667b      	str	r3, [r7, #100]	; 0x64
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e6      	bne.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3308      	adds	r3, #8
 8002e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	663b      	str	r3, [r7, #96]	; 0x60
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e5      	bne.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e067      	b.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d04f      	beq.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e96:	d147      	bne.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ea0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e6      	bne.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3308      	adds	r3, #8
 8002eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ef4:	623a      	str	r2, [r7, #32]
 8002ef6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	69f9      	ldr	r1, [r7, #28]
 8002efa:	6a3a      	ldr	r2, [r7, #32]
 8002efc:	e841 2300 	strex	r3, r2, [r1]
 8002f00:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e5      	bne.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e010      	b.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4013      	ands	r3, r2
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	f43f af4a 	beq.w	8002ddc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3770      	adds	r7, #112	; 0x70
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <__errno>:
 8002f54:	4b01      	ldr	r3, [pc, #4]	; (8002f5c <__errno+0x8>)
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	2000000c 	.word	0x2000000c

08002f60 <__libc_init_array>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	4d0d      	ldr	r5, [pc, #52]	; (8002f98 <__libc_init_array+0x38>)
 8002f64:	4c0d      	ldr	r4, [pc, #52]	; (8002f9c <__libc_init_array+0x3c>)
 8002f66:	1b64      	subs	r4, r4, r5
 8002f68:	10a4      	asrs	r4, r4, #2
 8002f6a:	2600      	movs	r6, #0
 8002f6c:	42a6      	cmp	r6, r4
 8002f6e:	d109      	bne.n	8002f84 <__libc_init_array+0x24>
 8002f70:	4d0b      	ldr	r5, [pc, #44]	; (8002fa0 <__libc_init_array+0x40>)
 8002f72:	4c0c      	ldr	r4, [pc, #48]	; (8002fa4 <__libc_init_array+0x44>)
 8002f74:	f000 ffc0 	bl	8003ef8 <_init>
 8002f78:	1b64      	subs	r4, r4, r5
 8002f7a:	10a4      	asrs	r4, r4, #2
 8002f7c:	2600      	movs	r6, #0
 8002f7e:	42a6      	cmp	r6, r4
 8002f80:	d105      	bne.n	8002f8e <__libc_init_array+0x2e>
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
 8002f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f88:	4798      	blx	r3
 8002f8a:	3601      	adds	r6, #1
 8002f8c:	e7ee      	b.n	8002f6c <__libc_init_array+0xc>
 8002f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f92:	4798      	blx	r3
 8002f94:	3601      	adds	r6, #1
 8002f96:	e7f2      	b.n	8002f7e <__libc_init_array+0x1e>
 8002f98:	08004020 	.word	0x08004020
 8002f9c:	08004020 	.word	0x08004020
 8002fa0:	08004020 	.word	0x08004020
 8002fa4:	08004024 	.word	0x08004024

08002fa8 <memset>:
 8002fa8:	4402      	add	r2, r0
 8002faa:	4603      	mov	r3, r0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <memset+0xa>
 8002fb0:	4770      	bx	lr
 8002fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb6:	e7f9      	b.n	8002fac <memset+0x4>

08002fb8 <_puts_r>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	460e      	mov	r6, r1
 8002fbc:	4605      	mov	r5, r0
 8002fbe:	b118      	cbz	r0, 8002fc8 <_puts_r+0x10>
 8002fc0:	6983      	ldr	r3, [r0, #24]
 8002fc2:	b90b      	cbnz	r3, 8002fc8 <_puts_r+0x10>
 8002fc4:	f000 fa48 	bl	8003458 <__sinit>
 8002fc8:	69ab      	ldr	r3, [r5, #24]
 8002fca:	68ac      	ldr	r4, [r5, #8]
 8002fcc:	b913      	cbnz	r3, 8002fd4 <_puts_r+0x1c>
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f000 fa42 	bl	8003458 <__sinit>
 8002fd4:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <_puts_r+0xd0>)
 8002fd6:	429c      	cmp	r4, r3
 8002fd8:	d120      	bne.n	800301c <_puts_r+0x64>
 8002fda:	686c      	ldr	r4, [r5, #4]
 8002fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fde:	07db      	lsls	r3, r3, #31
 8002fe0:	d405      	bmi.n	8002fee <_puts_r+0x36>
 8002fe2:	89a3      	ldrh	r3, [r4, #12]
 8002fe4:	0598      	lsls	r0, r3, #22
 8002fe6:	d402      	bmi.n	8002fee <_puts_r+0x36>
 8002fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fea:	f000 fad3 	bl	8003594 <__retarget_lock_acquire_recursive>
 8002fee:	89a3      	ldrh	r3, [r4, #12]
 8002ff0:	0719      	lsls	r1, r3, #28
 8002ff2:	d51d      	bpl.n	8003030 <_puts_r+0x78>
 8002ff4:	6923      	ldr	r3, [r4, #16]
 8002ff6:	b1db      	cbz	r3, 8003030 <_puts_r+0x78>
 8002ff8:	3e01      	subs	r6, #1
 8002ffa:	68a3      	ldr	r3, [r4, #8]
 8002ffc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003000:	3b01      	subs	r3, #1
 8003002:	60a3      	str	r3, [r4, #8]
 8003004:	bb39      	cbnz	r1, 8003056 <_puts_r+0x9e>
 8003006:	2b00      	cmp	r3, #0
 8003008:	da38      	bge.n	800307c <_puts_r+0xc4>
 800300a:	4622      	mov	r2, r4
 800300c:	210a      	movs	r1, #10
 800300e:	4628      	mov	r0, r5
 8003010:	f000 f848 	bl	80030a4 <__swbuf_r>
 8003014:	3001      	adds	r0, #1
 8003016:	d011      	beq.n	800303c <_puts_r+0x84>
 8003018:	250a      	movs	r5, #10
 800301a:	e011      	b.n	8003040 <_puts_r+0x88>
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <_puts_r+0xd4>)
 800301e:	429c      	cmp	r4, r3
 8003020:	d101      	bne.n	8003026 <_puts_r+0x6e>
 8003022:	68ac      	ldr	r4, [r5, #8]
 8003024:	e7da      	b.n	8002fdc <_puts_r+0x24>
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <_puts_r+0xd8>)
 8003028:	429c      	cmp	r4, r3
 800302a:	bf08      	it	eq
 800302c:	68ec      	ldreq	r4, [r5, #12]
 800302e:	e7d5      	b.n	8002fdc <_puts_r+0x24>
 8003030:	4621      	mov	r1, r4
 8003032:	4628      	mov	r0, r5
 8003034:	f000 f888 	bl	8003148 <__swsetup_r>
 8003038:	2800      	cmp	r0, #0
 800303a:	d0dd      	beq.n	8002ff8 <_puts_r+0x40>
 800303c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003042:	07da      	lsls	r2, r3, #31
 8003044:	d405      	bmi.n	8003052 <_puts_r+0x9a>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	059b      	lsls	r3, r3, #22
 800304a:	d402      	bmi.n	8003052 <_puts_r+0x9a>
 800304c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800304e:	f000 faa2 	bl	8003596 <__retarget_lock_release_recursive>
 8003052:	4628      	mov	r0, r5
 8003054:	bd70      	pop	{r4, r5, r6, pc}
 8003056:	2b00      	cmp	r3, #0
 8003058:	da04      	bge.n	8003064 <_puts_r+0xac>
 800305a:	69a2      	ldr	r2, [r4, #24]
 800305c:	429a      	cmp	r2, r3
 800305e:	dc06      	bgt.n	800306e <_puts_r+0xb6>
 8003060:	290a      	cmp	r1, #10
 8003062:	d004      	beq.n	800306e <_puts_r+0xb6>
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	6022      	str	r2, [r4, #0]
 800306a:	7019      	strb	r1, [r3, #0]
 800306c:	e7c5      	b.n	8002ffa <_puts_r+0x42>
 800306e:	4622      	mov	r2, r4
 8003070:	4628      	mov	r0, r5
 8003072:	f000 f817 	bl	80030a4 <__swbuf_r>
 8003076:	3001      	adds	r0, #1
 8003078:	d1bf      	bne.n	8002ffa <_puts_r+0x42>
 800307a:	e7df      	b.n	800303c <_puts_r+0x84>
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	250a      	movs	r5, #10
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	6022      	str	r2, [r4, #0]
 8003084:	701d      	strb	r5, [r3, #0]
 8003086:	e7db      	b.n	8003040 <_puts_r+0x88>
 8003088:	08003fbc 	.word	0x08003fbc
 800308c:	08003fdc 	.word	0x08003fdc
 8003090:	08003f9c 	.word	0x08003f9c

08003094 <puts>:
 8003094:	4b02      	ldr	r3, [pc, #8]	; (80030a0 <puts+0xc>)
 8003096:	4601      	mov	r1, r0
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	f7ff bf8d 	b.w	8002fb8 <_puts_r>
 800309e:	bf00      	nop
 80030a0:	2000000c 	.word	0x2000000c

080030a4 <__swbuf_r>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	460e      	mov	r6, r1
 80030a8:	4614      	mov	r4, r2
 80030aa:	4605      	mov	r5, r0
 80030ac:	b118      	cbz	r0, 80030b6 <__swbuf_r+0x12>
 80030ae:	6983      	ldr	r3, [r0, #24]
 80030b0:	b90b      	cbnz	r3, 80030b6 <__swbuf_r+0x12>
 80030b2:	f000 f9d1 	bl	8003458 <__sinit>
 80030b6:	4b21      	ldr	r3, [pc, #132]	; (800313c <__swbuf_r+0x98>)
 80030b8:	429c      	cmp	r4, r3
 80030ba:	d12b      	bne.n	8003114 <__swbuf_r+0x70>
 80030bc:	686c      	ldr	r4, [r5, #4]
 80030be:	69a3      	ldr	r3, [r4, #24]
 80030c0:	60a3      	str	r3, [r4, #8]
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	071a      	lsls	r2, r3, #28
 80030c6:	d52f      	bpl.n	8003128 <__swbuf_r+0x84>
 80030c8:	6923      	ldr	r3, [r4, #16]
 80030ca:	b36b      	cbz	r3, 8003128 <__swbuf_r+0x84>
 80030cc:	6923      	ldr	r3, [r4, #16]
 80030ce:	6820      	ldr	r0, [r4, #0]
 80030d0:	1ac0      	subs	r0, r0, r3
 80030d2:	6963      	ldr	r3, [r4, #20]
 80030d4:	b2f6      	uxtb	r6, r6
 80030d6:	4283      	cmp	r3, r0
 80030d8:	4637      	mov	r7, r6
 80030da:	dc04      	bgt.n	80030e6 <__swbuf_r+0x42>
 80030dc:	4621      	mov	r1, r4
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 f926 	bl	8003330 <_fflush_r>
 80030e4:	bb30      	cbnz	r0, 8003134 <__swbuf_r+0x90>
 80030e6:	68a3      	ldr	r3, [r4, #8]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	60a3      	str	r3, [r4, #8]
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	6022      	str	r2, [r4, #0]
 80030f2:	701e      	strb	r6, [r3, #0]
 80030f4:	6963      	ldr	r3, [r4, #20]
 80030f6:	3001      	adds	r0, #1
 80030f8:	4283      	cmp	r3, r0
 80030fa:	d004      	beq.n	8003106 <__swbuf_r+0x62>
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	07db      	lsls	r3, r3, #31
 8003100:	d506      	bpl.n	8003110 <__swbuf_r+0x6c>
 8003102:	2e0a      	cmp	r6, #10
 8003104:	d104      	bne.n	8003110 <__swbuf_r+0x6c>
 8003106:	4621      	mov	r1, r4
 8003108:	4628      	mov	r0, r5
 800310a:	f000 f911 	bl	8003330 <_fflush_r>
 800310e:	b988      	cbnz	r0, 8003134 <__swbuf_r+0x90>
 8003110:	4638      	mov	r0, r7
 8003112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <__swbuf_r+0x9c>)
 8003116:	429c      	cmp	r4, r3
 8003118:	d101      	bne.n	800311e <__swbuf_r+0x7a>
 800311a:	68ac      	ldr	r4, [r5, #8]
 800311c:	e7cf      	b.n	80030be <__swbuf_r+0x1a>
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <__swbuf_r+0xa0>)
 8003120:	429c      	cmp	r4, r3
 8003122:	bf08      	it	eq
 8003124:	68ec      	ldreq	r4, [r5, #12]
 8003126:	e7ca      	b.n	80030be <__swbuf_r+0x1a>
 8003128:	4621      	mov	r1, r4
 800312a:	4628      	mov	r0, r5
 800312c:	f000 f80c 	bl	8003148 <__swsetup_r>
 8003130:	2800      	cmp	r0, #0
 8003132:	d0cb      	beq.n	80030cc <__swbuf_r+0x28>
 8003134:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003138:	e7ea      	b.n	8003110 <__swbuf_r+0x6c>
 800313a:	bf00      	nop
 800313c:	08003fbc 	.word	0x08003fbc
 8003140:	08003fdc 	.word	0x08003fdc
 8003144:	08003f9c 	.word	0x08003f9c

08003148 <__swsetup_r>:
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <__swsetup_r+0xcc>)
 800314a:	b570      	push	{r4, r5, r6, lr}
 800314c:	681d      	ldr	r5, [r3, #0]
 800314e:	4606      	mov	r6, r0
 8003150:	460c      	mov	r4, r1
 8003152:	b125      	cbz	r5, 800315e <__swsetup_r+0x16>
 8003154:	69ab      	ldr	r3, [r5, #24]
 8003156:	b913      	cbnz	r3, 800315e <__swsetup_r+0x16>
 8003158:	4628      	mov	r0, r5
 800315a:	f000 f97d 	bl	8003458 <__sinit>
 800315e:	4b2e      	ldr	r3, [pc, #184]	; (8003218 <__swsetup_r+0xd0>)
 8003160:	429c      	cmp	r4, r3
 8003162:	d10f      	bne.n	8003184 <__swsetup_r+0x3c>
 8003164:	686c      	ldr	r4, [r5, #4]
 8003166:	89a3      	ldrh	r3, [r4, #12]
 8003168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800316c:	0719      	lsls	r1, r3, #28
 800316e:	d42c      	bmi.n	80031ca <__swsetup_r+0x82>
 8003170:	06dd      	lsls	r5, r3, #27
 8003172:	d411      	bmi.n	8003198 <__swsetup_r+0x50>
 8003174:	2309      	movs	r3, #9
 8003176:	6033      	str	r3, [r6, #0]
 8003178:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800317c:	81a3      	strh	r3, [r4, #12]
 800317e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003182:	e03e      	b.n	8003202 <__swsetup_r+0xba>
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <__swsetup_r+0xd4>)
 8003186:	429c      	cmp	r4, r3
 8003188:	d101      	bne.n	800318e <__swsetup_r+0x46>
 800318a:	68ac      	ldr	r4, [r5, #8]
 800318c:	e7eb      	b.n	8003166 <__swsetup_r+0x1e>
 800318e:	4b24      	ldr	r3, [pc, #144]	; (8003220 <__swsetup_r+0xd8>)
 8003190:	429c      	cmp	r4, r3
 8003192:	bf08      	it	eq
 8003194:	68ec      	ldreq	r4, [r5, #12]
 8003196:	e7e6      	b.n	8003166 <__swsetup_r+0x1e>
 8003198:	0758      	lsls	r0, r3, #29
 800319a:	d512      	bpl.n	80031c2 <__swsetup_r+0x7a>
 800319c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800319e:	b141      	cbz	r1, 80031b2 <__swsetup_r+0x6a>
 80031a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031a4:	4299      	cmp	r1, r3
 80031a6:	d002      	beq.n	80031ae <__swsetup_r+0x66>
 80031a8:	4630      	mov	r0, r6
 80031aa:	f000 fa5b 	bl	8003664 <_free_r>
 80031ae:	2300      	movs	r3, #0
 80031b0:	6363      	str	r3, [r4, #52]	; 0x34
 80031b2:	89a3      	ldrh	r3, [r4, #12]
 80031b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031b8:	81a3      	strh	r3, [r4, #12]
 80031ba:	2300      	movs	r3, #0
 80031bc:	6063      	str	r3, [r4, #4]
 80031be:	6923      	ldr	r3, [r4, #16]
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	89a3      	ldrh	r3, [r4, #12]
 80031c4:	f043 0308 	orr.w	r3, r3, #8
 80031c8:	81a3      	strh	r3, [r4, #12]
 80031ca:	6923      	ldr	r3, [r4, #16]
 80031cc:	b94b      	cbnz	r3, 80031e2 <__swsetup_r+0x9a>
 80031ce:	89a3      	ldrh	r3, [r4, #12]
 80031d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d8:	d003      	beq.n	80031e2 <__swsetup_r+0x9a>
 80031da:	4621      	mov	r1, r4
 80031dc:	4630      	mov	r0, r6
 80031de:	f000 fa01 	bl	80035e4 <__smakebuf_r>
 80031e2:	89a0      	ldrh	r0, [r4, #12]
 80031e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031e8:	f010 0301 	ands.w	r3, r0, #1
 80031ec:	d00a      	beq.n	8003204 <__swsetup_r+0xbc>
 80031ee:	2300      	movs	r3, #0
 80031f0:	60a3      	str	r3, [r4, #8]
 80031f2:	6963      	ldr	r3, [r4, #20]
 80031f4:	425b      	negs	r3, r3
 80031f6:	61a3      	str	r3, [r4, #24]
 80031f8:	6923      	ldr	r3, [r4, #16]
 80031fa:	b943      	cbnz	r3, 800320e <__swsetup_r+0xc6>
 80031fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003200:	d1ba      	bne.n	8003178 <__swsetup_r+0x30>
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	0781      	lsls	r1, r0, #30
 8003206:	bf58      	it	pl
 8003208:	6963      	ldrpl	r3, [r4, #20]
 800320a:	60a3      	str	r3, [r4, #8]
 800320c:	e7f4      	b.n	80031f8 <__swsetup_r+0xb0>
 800320e:	2000      	movs	r0, #0
 8003210:	e7f7      	b.n	8003202 <__swsetup_r+0xba>
 8003212:	bf00      	nop
 8003214:	2000000c 	.word	0x2000000c
 8003218:	08003fbc 	.word	0x08003fbc
 800321c:	08003fdc 	.word	0x08003fdc
 8003220:	08003f9c 	.word	0x08003f9c

08003224 <__sflush_r>:
 8003224:	898a      	ldrh	r2, [r1, #12]
 8003226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800322a:	4605      	mov	r5, r0
 800322c:	0710      	lsls	r0, r2, #28
 800322e:	460c      	mov	r4, r1
 8003230:	d458      	bmi.n	80032e4 <__sflush_r+0xc0>
 8003232:	684b      	ldr	r3, [r1, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	dc05      	bgt.n	8003244 <__sflush_r+0x20>
 8003238:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	dc02      	bgt.n	8003244 <__sflush_r+0x20>
 800323e:	2000      	movs	r0, #0
 8003240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003246:	2e00      	cmp	r6, #0
 8003248:	d0f9      	beq.n	800323e <__sflush_r+0x1a>
 800324a:	2300      	movs	r3, #0
 800324c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003250:	682f      	ldr	r7, [r5, #0]
 8003252:	602b      	str	r3, [r5, #0]
 8003254:	d032      	beq.n	80032bc <__sflush_r+0x98>
 8003256:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003258:	89a3      	ldrh	r3, [r4, #12]
 800325a:	075a      	lsls	r2, r3, #29
 800325c:	d505      	bpl.n	800326a <__sflush_r+0x46>
 800325e:	6863      	ldr	r3, [r4, #4]
 8003260:	1ac0      	subs	r0, r0, r3
 8003262:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003264:	b10b      	cbz	r3, 800326a <__sflush_r+0x46>
 8003266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003268:	1ac0      	subs	r0, r0, r3
 800326a:	2300      	movs	r3, #0
 800326c:	4602      	mov	r2, r0
 800326e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003270:	6a21      	ldr	r1, [r4, #32]
 8003272:	4628      	mov	r0, r5
 8003274:	47b0      	blx	r6
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	d106      	bne.n	800328a <__sflush_r+0x66>
 800327c:	6829      	ldr	r1, [r5, #0]
 800327e:	291d      	cmp	r1, #29
 8003280:	d82c      	bhi.n	80032dc <__sflush_r+0xb8>
 8003282:	4a2a      	ldr	r2, [pc, #168]	; (800332c <__sflush_r+0x108>)
 8003284:	40ca      	lsrs	r2, r1
 8003286:	07d6      	lsls	r6, r2, #31
 8003288:	d528      	bpl.n	80032dc <__sflush_r+0xb8>
 800328a:	2200      	movs	r2, #0
 800328c:	6062      	str	r2, [r4, #4]
 800328e:	04d9      	lsls	r1, r3, #19
 8003290:	6922      	ldr	r2, [r4, #16]
 8003292:	6022      	str	r2, [r4, #0]
 8003294:	d504      	bpl.n	80032a0 <__sflush_r+0x7c>
 8003296:	1c42      	adds	r2, r0, #1
 8003298:	d101      	bne.n	800329e <__sflush_r+0x7a>
 800329a:	682b      	ldr	r3, [r5, #0]
 800329c:	b903      	cbnz	r3, 80032a0 <__sflush_r+0x7c>
 800329e:	6560      	str	r0, [r4, #84]	; 0x54
 80032a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032a2:	602f      	str	r7, [r5, #0]
 80032a4:	2900      	cmp	r1, #0
 80032a6:	d0ca      	beq.n	800323e <__sflush_r+0x1a>
 80032a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032ac:	4299      	cmp	r1, r3
 80032ae:	d002      	beq.n	80032b6 <__sflush_r+0x92>
 80032b0:	4628      	mov	r0, r5
 80032b2:	f000 f9d7 	bl	8003664 <_free_r>
 80032b6:	2000      	movs	r0, #0
 80032b8:	6360      	str	r0, [r4, #52]	; 0x34
 80032ba:	e7c1      	b.n	8003240 <__sflush_r+0x1c>
 80032bc:	6a21      	ldr	r1, [r4, #32]
 80032be:	2301      	movs	r3, #1
 80032c0:	4628      	mov	r0, r5
 80032c2:	47b0      	blx	r6
 80032c4:	1c41      	adds	r1, r0, #1
 80032c6:	d1c7      	bne.n	8003258 <__sflush_r+0x34>
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0c4      	beq.n	8003258 <__sflush_r+0x34>
 80032ce:	2b1d      	cmp	r3, #29
 80032d0:	d001      	beq.n	80032d6 <__sflush_r+0xb2>
 80032d2:	2b16      	cmp	r3, #22
 80032d4:	d101      	bne.n	80032da <__sflush_r+0xb6>
 80032d6:	602f      	str	r7, [r5, #0]
 80032d8:	e7b1      	b.n	800323e <__sflush_r+0x1a>
 80032da:	89a3      	ldrh	r3, [r4, #12]
 80032dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	e7ad      	b.n	8003240 <__sflush_r+0x1c>
 80032e4:	690f      	ldr	r7, [r1, #16]
 80032e6:	2f00      	cmp	r7, #0
 80032e8:	d0a9      	beq.n	800323e <__sflush_r+0x1a>
 80032ea:	0793      	lsls	r3, r2, #30
 80032ec:	680e      	ldr	r6, [r1, #0]
 80032ee:	bf08      	it	eq
 80032f0:	694b      	ldreq	r3, [r1, #20]
 80032f2:	600f      	str	r7, [r1, #0]
 80032f4:	bf18      	it	ne
 80032f6:	2300      	movne	r3, #0
 80032f8:	eba6 0807 	sub.w	r8, r6, r7
 80032fc:	608b      	str	r3, [r1, #8]
 80032fe:	f1b8 0f00 	cmp.w	r8, #0
 8003302:	dd9c      	ble.n	800323e <__sflush_r+0x1a>
 8003304:	6a21      	ldr	r1, [r4, #32]
 8003306:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003308:	4643      	mov	r3, r8
 800330a:	463a      	mov	r2, r7
 800330c:	4628      	mov	r0, r5
 800330e:	47b0      	blx	r6
 8003310:	2800      	cmp	r0, #0
 8003312:	dc06      	bgt.n	8003322 <__sflush_r+0xfe>
 8003314:	89a3      	ldrh	r3, [r4, #12]
 8003316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003320:	e78e      	b.n	8003240 <__sflush_r+0x1c>
 8003322:	4407      	add	r7, r0
 8003324:	eba8 0800 	sub.w	r8, r8, r0
 8003328:	e7e9      	b.n	80032fe <__sflush_r+0xda>
 800332a:	bf00      	nop
 800332c:	20400001 	.word	0x20400001

08003330 <_fflush_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	690b      	ldr	r3, [r1, #16]
 8003334:	4605      	mov	r5, r0
 8003336:	460c      	mov	r4, r1
 8003338:	b913      	cbnz	r3, 8003340 <_fflush_r+0x10>
 800333a:	2500      	movs	r5, #0
 800333c:	4628      	mov	r0, r5
 800333e:	bd38      	pop	{r3, r4, r5, pc}
 8003340:	b118      	cbz	r0, 800334a <_fflush_r+0x1a>
 8003342:	6983      	ldr	r3, [r0, #24]
 8003344:	b90b      	cbnz	r3, 800334a <_fflush_r+0x1a>
 8003346:	f000 f887 	bl	8003458 <__sinit>
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <_fflush_r+0x6c>)
 800334c:	429c      	cmp	r4, r3
 800334e:	d11b      	bne.n	8003388 <_fflush_r+0x58>
 8003350:	686c      	ldr	r4, [r5, #4]
 8003352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0ef      	beq.n	800333a <_fflush_r+0xa>
 800335a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800335c:	07d0      	lsls	r0, r2, #31
 800335e:	d404      	bmi.n	800336a <_fflush_r+0x3a>
 8003360:	0599      	lsls	r1, r3, #22
 8003362:	d402      	bmi.n	800336a <_fflush_r+0x3a>
 8003364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003366:	f000 f915 	bl	8003594 <__retarget_lock_acquire_recursive>
 800336a:	4628      	mov	r0, r5
 800336c:	4621      	mov	r1, r4
 800336e:	f7ff ff59 	bl	8003224 <__sflush_r>
 8003372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003374:	07da      	lsls	r2, r3, #31
 8003376:	4605      	mov	r5, r0
 8003378:	d4e0      	bmi.n	800333c <_fflush_r+0xc>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	059b      	lsls	r3, r3, #22
 800337e:	d4dd      	bmi.n	800333c <_fflush_r+0xc>
 8003380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003382:	f000 f908 	bl	8003596 <__retarget_lock_release_recursive>
 8003386:	e7d9      	b.n	800333c <_fflush_r+0xc>
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <_fflush_r+0x70>)
 800338a:	429c      	cmp	r4, r3
 800338c:	d101      	bne.n	8003392 <_fflush_r+0x62>
 800338e:	68ac      	ldr	r4, [r5, #8]
 8003390:	e7df      	b.n	8003352 <_fflush_r+0x22>
 8003392:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <_fflush_r+0x74>)
 8003394:	429c      	cmp	r4, r3
 8003396:	bf08      	it	eq
 8003398:	68ec      	ldreq	r4, [r5, #12]
 800339a:	e7da      	b.n	8003352 <_fflush_r+0x22>
 800339c:	08003fbc 	.word	0x08003fbc
 80033a0:	08003fdc 	.word	0x08003fdc
 80033a4:	08003f9c 	.word	0x08003f9c

080033a8 <std>:
 80033a8:	2300      	movs	r3, #0
 80033aa:	b510      	push	{r4, lr}
 80033ac:	4604      	mov	r4, r0
 80033ae:	e9c0 3300 	strd	r3, r3, [r0]
 80033b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033b6:	6083      	str	r3, [r0, #8]
 80033b8:	8181      	strh	r1, [r0, #12]
 80033ba:	6643      	str	r3, [r0, #100]	; 0x64
 80033bc:	81c2      	strh	r2, [r0, #14]
 80033be:	6183      	str	r3, [r0, #24]
 80033c0:	4619      	mov	r1, r3
 80033c2:	2208      	movs	r2, #8
 80033c4:	305c      	adds	r0, #92	; 0x5c
 80033c6:	f7ff fdef 	bl	8002fa8 <memset>
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <std+0x38>)
 80033cc:	6263      	str	r3, [r4, #36]	; 0x24
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <std+0x3c>)
 80033d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <std+0x40>)
 80033d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <std+0x44>)
 80033d8:	6224      	str	r4, [r4, #32]
 80033da:	6323      	str	r3, [r4, #48]	; 0x30
 80033dc:	bd10      	pop	{r4, pc}
 80033de:	bf00      	nop
 80033e0:	08003845 	.word	0x08003845
 80033e4:	08003867 	.word	0x08003867
 80033e8:	0800389f 	.word	0x0800389f
 80033ec:	080038c3 	.word	0x080038c3

080033f0 <_cleanup_r>:
 80033f0:	4901      	ldr	r1, [pc, #4]	; (80033f8 <_cleanup_r+0x8>)
 80033f2:	f000 b8af 	b.w	8003554 <_fwalk_reent>
 80033f6:	bf00      	nop
 80033f8:	08003331 	.word	0x08003331

080033fc <__sfmoreglue>:
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	2268      	movs	r2, #104	; 0x68
 8003400:	1e4d      	subs	r5, r1, #1
 8003402:	4355      	muls	r5, r2
 8003404:	460e      	mov	r6, r1
 8003406:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800340a:	f000 f997 	bl	800373c <_malloc_r>
 800340e:	4604      	mov	r4, r0
 8003410:	b140      	cbz	r0, 8003424 <__sfmoreglue+0x28>
 8003412:	2100      	movs	r1, #0
 8003414:	e9c0 1600 	strd	r1, r6, [r0]
 8003418:	300c      	adds	r0, #12
 800341a:	60a0      	str	r0, [r4, #8]
 800341c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003420:	f7ff fdc2 	bl	8002fa8 <memset>
 8003424:	4620      	mov	r0, r4
 8003426:	bd70      	pop	{r4, r5, r6, pc}

08003428 <__sfp_lock_acquire>:
 8003428:	4801      	ldr	r0, [pc, #4]	; (8003430 <__sfp_lock_acquire+0x8>)
 800342a:	f000 b8b3 	b.w	8003594 <__retarget_lock_acquire_recursive>
 800342e:	bf00      	nop
 8003430:	20000121 	.word	0x20000121

08003434 <__sfp_lock_release>:
 8003434:	4801      	ldr	r0, [pc, #4]	; (800343c <__sfp_lock_release+0x8>)
 8003436:	f000 b8ae 	b.w	8003596 <__retarget_lock_release_recursive>
 800343a:	bf00      	nop
 800343c:	20000121 	.word	0x20000121

08003440 <__sinit_lock_acquire>:
 8003440:	4801      	ldr	r0, [pc, #4]	; (8003448 <__sinit_lock_acquire+0x8>)
 8003442:	f000 b8a7 	b.w	8003594 <__retarget_lock_acquire_recursive>
 8003446:	bf00      	nop
 8003448:	20000122 	.word	0x20000122

0800344c <__sinit_lock_release>:
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <__sinit_lock_release+0x8>)
 800344e:	f000 b8a2 	b.w	8003596 <__retarget_lock_release_recursive>
 8003452:	bf00      	nop
 8003454:	20000122 	.word	0x20000122

08003458 <__sinit>:
 8003458:	b510      	push	{r4, lr}
 800345a:	4604      	mov	r4, r0
 800345c:	f7ff fff0 	bl	8003440 <__sinit_lock_acquire>
 8003460:	69a3      	ldr	r3, [r4, #24]
 8003462:	b11b      	cbz	r3, 800346c <__sinit+0x14>
 8003464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003468:	f7ff bff0 	b.w	800344c <__sinit_lock_release>
 800346c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003470:	6523      	str	r3, [r4, #80]	; 0x50
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <__sinit+0x68>)
 8003474:	4a13      	ldr	r2, [pc, #76]	; (80034c4 <__sinit+0x6c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	62a2      	str	r2, [r4, #40]	; 0x28
 800347a:	42a3      	cmp	r3, r4
 800347c:	bf04      	itt	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	61a3      	streq	r3, [r4, #24]
 8003482:	4620      	mov	r0, r4
 8003484:	f000 f820 	bl	80034c8 <__sfp>
 8003488:	6060      	str	r0, [r4, #4]
 800348a:	4620      	mov	r0, r4
 800348c:	f000 f81c 	bl	80034c8 <__sfp>
 8003490:	60a0      	str	r0, [r4, #8]
 8003492:	4620      	mov	r0, r4
 8003494:	f000 f818 	bl	80034c8 <__sfp>
 8003498:	2200      	movs	r2, #0
 800349a:	60e0      	str	r0, [r4, #12]
 800349c:	2104      	movs	r1, #4
 800349e:	6860      	ldr	r0, [r4, #4]
 80034a0:	f7ff ff82 	bl	80033a8 <std>
 80034a4:	68a0      	ldr	r0, [r4, #8]
 80034a6:	2201      	movs	r2, #1
 80034a8:	2109      	movs	r1, #9
 80034aa:	f7ff ff7d 	bl	80033a8 <std>
 80034ae:	68e0      	ldr	r0, [r4, #12]
 80034b0:	2202      	movs	r2, #2
 80034b2:	2112      	movs	r1, #18
 80034b4:	f7ff ff78 	bl	80033a8 <std>
 80034b8:	2301      	movs	r3, #1
 80034ba:	61a3      	str	r3, [r4, #24]
 80034bc:	e7d2      	b.n	8003464 <__sinit+0xc>
 80034be:	bf00      	nop
 80034c0:	08003f98 	.word	0x08003f98
 80034c4:	080033f1 	.word	0x080033f1

080034c8 <__sfp>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	4607      	mov	r7, r0
 80034cc:	f7ff ffac 	bl	8003428 <__sfp_lock_acquire>
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <__sfp+0x84>)
 80034d2:	681e      	ldr	r6, [r3, #0]
 80034d4:	69b3      	ldr	r3, [r6, #24]
 80034d6:	b913      	cbnz	r3, 80034de <__sfp+0x16>
 80034d8:	4630      	mov	r0, r6
 80034da:	f7ff ffbd 	bl	8003458 <__sinit>
 80034de:	3648      	adds	r6, #72	; 0x48
 80034e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	d503      	bpl.n	80034f0 <__sfp+0x28>
 80034e8:	6833      	ldr	r3, [r6, #0]
 80034ea:	b30b      	cbz	r3, 8003530 <__sfp+0x68>
 80034ec:	6836      	ldr	r6, [r6, #0]
 80034ee:	e7f7      	b.n	80034e0 <__sfp+0x18>
 80034f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034f4:	b9d5      	cbnz	r5, 800352c <__sfp+0x64>
 80034f6:	4b16      	ldr	r3, [pc, #88]	; (8003550 <__sfp+0x88>)
 80034f8:	60e3      	str	r3, [r4, #12]
 80034fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034fe:	6665      	str	r5, [r4, #100]	; 0x64
 8003500:	f000 f847 	bl	8003592 <__retarget_lock_init_recursive>
 8003504:	f7ff ff96 	bl	8003434 <__sfp_lock_release>
 8003508:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800350c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003510:	6025      	str	r5, [r4, #0]
 8003512:	61a5      	str	r5, [r4, #24]
 8003514:	2208      	movs	r2, #8
 8003516:	4629      	mov	r1, r5
 8003518:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800351c:	f7ff fd44 	bl	8002fa8 <memset>
 8003520:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003524:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003528:	4620      	mov	r0, r4
 800352a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800352c:	3468      	adds	r4, #104	; 0x68
 800352e:	e7d9      	b.n	80034e4 <__sfp+0x1c>
 8003530:	2104      	movs	r1, #4
 8003532:	4638      	mov	r0, r7
 8003534:	f7ff ff62 	bl	80033fc <__sfmoreglue>
 8003538:	4604      	mov	r4, r0
 800353a:	6030      	str	r0, [r6, #0]
 800353c:	2800      	cmp	r0, #0
 800353e:	d1d5      	bne.n	80034ec <__sfp+0x24>
 8003540:	f7ff ff78 	bl	8003434 <__sfp_lock_release>
 8003544:	230c      	movs	r3, #12
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	e7ee      	b.n	8003528 <__sfp+0x60>
 800354a:	bf00      	nop
 800354c:	08003f98 	.word	0x08003f98
 8003550:	ffff0001 	.word	0xffff0001

08003554 <_fwalk_reent>:
 8003554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003558:	4606      	mov	r6, r0
 800355a:	4688      	mov	r8, r1
 800355c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003560:	2700      	movs	r7, #0
 8003562:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003566:	f1b9 0901 	subs.w	r9, r9, #1
 800356a:	d505      	bpl.n	8003578 <_fwalk_reent+0x24>
 800356c:	6824      	ldr	r4, [r4, #0]
 800356e:	2c00      	cmp	r4, #0
 8003570:	d1f7      	bne.n	8003562 <_fwalk_reent+0xe>
 8003572:	4638      	mov	r0, r7
 8003574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003578:	89ab      	ldrh	r3, [r5, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d907      	bls.n	800358e <_fwalk_reent+0x3a>
 800357e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003582:	3301      	adds	r3, #1
 8003584:	d003      	beq.n	800358e <_fwalk_reent+0x3a>
 8003586:	4629      	mov	r1, r5
 8003588:	4630      	mov	r0, r6
 800358a:	47c0      	blx	r8
 800358c:	4307      	orrs	r7, r0
 800358e:	3568      	adds	r5, #104	; 0x68
 8003590:	e7e9      	b.n	8003566 <_fwalk_reent+0x12>

08003592 <__retarget_lock_init_recursive>:
 8003592:	4770      	bx	lr

08003594 <__retarget_lock_acquire_recursive>:
 8003594:	4770      	bx	lr

08003596 <__retarget_lock_release_recursive>:
 8003596:	4770      	bx	lr

08003598 <__swhatbuf_r>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	460e      	mov	r6, r1
 800359c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035a0:	2900      	cmp	r1, #0
 80035a2:	b096      	sub	sp, #88	; 0x58
 80035a4:	4614      	mov	r4, r2
 80035a6:	461d      	mov	r5, r3
 80035a8:	da08      	bge.n	80035bc <__swhatbuf_r+0x24>
 80035aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	602a      	str	r2, [r5, #0]
 80035b2:	061a      	lsls	r2, r3, #24
 80035b4:	d410      	bmi.n	80035d8 <__swhatbuf_r+0x40>
 80035b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ba:	e00e      	b.n	80035da <__swhatbuf_r+0x42>
 80035bc:	466a      	mov	r2, sp
 80035be:	f000 f9a7 	bl	8003910 <_fstat_r>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	dbf1      	blt.n	80035aa <__swhatbuf_r+0x12>
 80035c6:	9a01      	ldr	r2, [sp, #4]
 80035c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035d0:	425a      	negs	r2, r3
 80035d2:	415a      	adcs	r2, r3
 80035d4:	602a      	str	r2, [r5, #0]
 80035d6:	e7ee      	b.n	80035b6 <__swhatbuf_r+0x1e>
 80035d8:	2340      	movs	r3, #64	; 0x40
 80035da:	2000      	movs	r0, #0
 80035dc:	6023      	str	r3, [r4, #0]
 80035de:	b016      	add	sp, #88	; 0x58
 80035e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080035e4 <__smakebuf_r>:
 80035e4:	898b      	ldrh	r3, [r1, #12]
 80035e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035e8:	079d      	lsls	r5, r3, #30
 80035ea:	4606      	mov	r6, r0
 80035ec:	460c      	mov	r4, r1
 80035ee:	d507      	bpl.n	8003600 <__smakebuf_r+0x1c>
 80035f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	6123      	str	r3, [r4, #16]
 80035f8:	2301      	movs	r3, #1
 80035fa:	6163      	str	r3, [r4, #20]
 80035fc:	b002      	add	sp, #8
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	ab01      	add	r3, sp, #4
 8003602:	466a      	mov	r2, sp
 8003604:	f7ff ffc8 	bl	8003598 <__swhatbuf_r>
 8003608:	9900      	ldr	r1, [sp, #0]
 800360a:	4605      	mov	r5, r0
 800360c:	4630      	mov	r0, r6
 800360e:	f000 f895 	bl	800373c <_malloc_r>
 8003612:	b948      	cbnz	r0, 8003628 <__smakebuf_r+0x44>
 8003614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003618:	059a      	lsls	r2, r3, #22
 800361a:	d4ef      	bmi.n	80035fc <__smakebuf_r+0x18>
 800361c:	f023 0303 	bic.w	r3, r3, #3
 8003620:	f043 0302 	orr.w	r3, r3, #2
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	e7e3      	b.n	80035f0 <__smakebuf_r+0xc>
 8003628:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <__smakebuf_r+0x7c>)
 800362a:	62b3      	str	r3, [r6, #40]	; 0x28
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	6020      	str	r0, [r4, #0]
 8003630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003634:	81a3      	strh	r3, [r4, #12]
 8003636:	9b00      	ldr	r3, [sp, #0]
 8003638:	6163      	str	r3, [r4, #20]
 800363a:	9b01      	ldr	r3, [sp, #4]
 800363c:	6120      	str	r0, [r4, #16]
 800363e:	b15b      	cbz	r3, 8003658 <__smakebuf_r+0x74>
 8003640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003644:	4630      	mov	r0, r6
 8003646:	f000 f975 	bl	8003934 <_isatty_r>
 800364a:	b128      	cbz	r0, 8003658 <__smakebuf_r+0x74>
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	81a3      	strh	r3, [r4, #12]
 8003658:	89a0      	ldrh	r0, [r4, #12]
 800365a:	4305      	orrs	r5, r0
 800365c:	81a5      	strh	r5, [r4, #12]
 800365e:	e7cd      	b.n	80035fc <__smakebuf_r+0x18>
 8003660:	080033f1 	.word	0x080033f1

08003664 <_free_r>:
 8003664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003666:	2900      	cmp	r1, #0
 8003668:	d044      	beq.n	80036f4 <_free_r+0x90>
 800366a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800366e:	9001      	str	r0, [sp, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f1a1 0404 	sub.w	r4, r1, #4
 8003676:	bfb8      	it	lt
 8003678:	18e4      	addlt	r4, r4, r3
 800367a:	f000 f97d 	bl	8003978 <__malloc_lock>
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <_free_r+0x94>)
 8003680:	9801      	ldr	r0, [sp, #4]
 8003682:	6813      	ldr	r3, [r2, #0]
 8003684:	b933      	cbnz	r3, 8003694 <_free_r+0x30>
 8003686:	6063      	str	r3, [r4, #4]
 8003688:	6014      	str	r4, [r2, #0]
 800368a:	b003      	add	sp, #12
 800368c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003690:	f000 b978 	b.w	8003984 <__malloc_unlock>
 8003694:	42a3      	cmp	r3, r4
 8003696:	d908      	bls.n	80036aa <_free_r+0x46>
 8003698:	6825      	ldr	r5, [r4, #0]
 800369a:	1961      	adds	r1, r4, r5
 800369c:	428b      	cmp	r3, r1
 800369e:	bf01      	itttt	eq
 80036a0:	6819      	ldreq	r1, [r3, #0]
 80036a2:	685b      	ldreq	r3, [r3, #4]
 80036a4:	1949      	addeq	r1, r1, r5
 80036a6:	6021      	streq	r1, [r4, #0]
 80036a8:	e7ed      	b.n	8003686 <_free_r+0x22>
 80036aa:	461a      	mov	r2, r3
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	b10b      	cbz	r3, 80036b4 <_free_r+0x50>
 80036b0:	42a3      	cmp	r3, r4
 80036b2:	d9fa      	bls.n	80036aa <_free_r+0x46>
 80036b4:	6811      	ldr	r1, [r2, #0]
 80036b6:	1855      	adds	r5, r2, r1
 80036b8:	42a5      	cmp	r5, r4
 80036ba:	d10b      	bne.n	80036d4 <_free_r+0x70>
 80036bc:	6824      	ldr	r4, [r4, #0]
 80036be:	4421      	add	r1, r4
 80036c0:	1854      	adds	r4, r2, r1
 80036c2:	42a3      	cmp	r3, r4
 80036c4:	6011      	str	r1, [r2, #0]
 80036c6:	d1e0      	bne.n	800368a <_free_r+0x26>
 80036c8:	681c      	ldr	r4, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	6053      	str	r3, [r2, #4]
 80036ce:	4421      	add	r1, r4
 80036d0:	6011      	str	r1, [r2, #0]
 80036d2:	e7da      	b.n	800368a <_free_r+0x26>
 80036d4:	d902      	bls.n	80036dc <_free_r+0x78>
 80036d6:	230c      	movs	r3, #12
 80036d8:	6003      	str	r3, [r0, #0]
 80036da:	e7d6      	b.n	800368a <_free_r+0x26>
 80036dc:	6825      	ldr	r5, [r4, #0]
 80036de:	1961      	adds	r1, r4, r5
 80036e0:	428b      	cmp	r3, r1
 80036e2:	bf04      	itt	eq
 80036e4:	6819      	ldreq	r1, [r3, #0]
 80036e6:	685b      	ldreq	r3, [r3, #4]
 80036e8:	6063      	str	r3, [r4, #4]
 80036ea:	bf04      	itt	eq
 80036ec:	1949      	addeq	r1, r1, r5
 80036ee:	6021      	streq	r1, [r4, #0]
 80036f0:	6054      	str	r4, [r2, #4]
 80036f2:	e7ca      	b.n	800368a <_free_r+0x26>
 80036f4:	b003      	add	sp, #12
 80036f6:	bd30      	pop	{r4, r5, pc}
 80036f8:	20000124 	.word	0x20000124

080036fc <sbrk_aligned>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	4e0e      	ldr	r6, [pc, #56]	; (8003738 <sbrk_aligned+0x3c>)
 8003700:	460c      	mov	r4, r1
 8003702:	6831      	ldr	r1, [r6, #0]
 8003704:	4605      	mov	r5, r0
 8003706:	b911      	cbnz	r1, 800370e <sbrk_aligned+0x12>
 8003708:	f000 f88c 	bl	8003824 <_sbrk_r>
 800370c:	6030      	str	r0, [r6, #0]
 800370e:	4621      	mov	r1, r4
 8003710:	4628      	mov	r0, r5
 8003712:	f000 f887 	bl	8003824 <_sbrk_r>
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	d00a      	beq.n	8003730 <sbrk_aligned+0x34>
 800371a:	1cc4      	adds	r4, r0, #3
 800371c:	f024 0403 	bic.w	r4, r4, #3
 8003720:	42a0      	cmp	r0, r4
 8003722:	d007      	beq.n	8003734 <sbrk_aligned+0x38>
 8003724:	1a21      	subs	r1, r4, r0
 8003726:	4628      	mov	r0, r5
 8003728:	f000 f87c 	bl	8003824 <_sbrk_r>
 800372c:	3001      	adds	r0, #1
 800372e:	d101      	bne.n	8003734 <sbrk_aligned+0x38>
 8003730:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003734:	4620      	mov	r0, r4
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	20000128 	.word	0x20000128

0800373c <_malloc_r>:
 800373c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003740:	1ccd      	adds	r5, r1, #3
 8003742:	f025 0503 	bic.w	r5, r5, #3
 8003746:	3508      	adds	r5, #8
 8003748:	2d0c      	cmp	r5, #12
 800374a:	bf38      	it	cc
 800374c:	250c      	movcc	r5, #12
 800374e:	2d00      	cmp	r5, #0
 8003750:	4607      	mov	r7, r0
 8003752:	db01      	blt.n	8003758 <_malloc_r+0x1c>
 8003754:	42a9      	cmp	r1, r5
 8003756:	d905      	bls.n	8003764 <_malloc_r+0x28>
 8003758:	230c      	movs	r3, #12
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	2600      	movs	r6, #0
 800375e:	4630      	mov	r0, r6
 8003760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003764:	4e2e      	ldr	r6, [pc, #184]	; (8003820 <_malloc_r+0xe4>)
 8003766:	f000 f907 	bl	8003978 <__malloc_lock>
 800376a:	6833      	ldr	r3, [r6, #0]
 800376c:	461c      	mov	r4, r3
 800376e:	bb34      	cbnz	r4, 80037be <_malloc_r+0x82>
 8003770:	4629      	mov	r1, r5
 8003772:	4638      	mov	r0, r7
 8003774:	f7ff ffc2 	bl	80036fc <sbrk_aligned>
 8003778:	1c43      	adds	r3, r0, #1
 800377a:	4604      	mov	r4, r0
 800377c:	d14d      	bne.n	800381a <_malloc_r+0xde>
 800377e:	6834      	ldr	r4, [r6, #0]
 8003780:	4626      	mov	r6, r4
 8003782:	2e00      	cmp	r6, #0
 8003784:	d140      	bne.n	8003808 <_malloc_r+0xcc>
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	4631      	mov	r1, r6
 800378a:	4638      	mov	r0, r7
 800378c:	eb04 0803 	add.w	r8, r4, r3
 8003790:	f000 f848 	bl	8003824 <_sbrk_r>
 8003794:	4580      	cmp	r8, r0
 8003796:	d13a      	bne.n	800380e <_malloc_r+0xd2>
 8003798:	6821      	ldr	r1, [r4, #0]
 800379a:	3503      	adds	r5, #3
 800379c:	1a6d      	subs	r5, r5, r1
 800379e:	f025 0503 	bic.w	r5, r5, #3
 80037a2:	3508      	adds	r5, #8
 80037a4:	2d0c      	cmp	r5, #12
 80037a6:	bf38      	it	cc
 80037a8:	250c      	movcc	r5, #12
 80037aa:	4629      	mov	r1, r5
 80037ac:	4638      	mov	r0, r7
 80037ae:	f7ff ffa5 	bl	80036fc <sbrk_aligned>
 80037b2:	3001      	adds	r0, #1
 80037b4:	d02b      	beq.n	800380e <_malloc_r+0xd2>
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	442b      	add	r3, r5
 80037ba:	6023      	str	r3, [r4, #0]
 80037bc:	e00e      	b.n	80037dc <_malloc_r+0xa0>
 80037be:	6822      	ldr	r2, [r4, #0]
 80037c0:	1b52      	subs	r2, r2, r5
 80037c2:	d41e      	bmi.n	8003802 <_malloc_r+0xc6>
 80037c4:	2a0b      	cmp	r2, #11
 80037c6:	d916      	bls.n	80037f6 <_malloc_r+0xba>
 80037c8:	1961      	adds	r1, r4, r5
 80037ca:	42a3      	cmp	r3, r4
 80037cc:	6025      	str	r5, [r4, #0]
 80037ce:	bf18      	it	ne
 80037d0:	6059      	strne	r1, [r3, #4]
 80037d2:	6863      	ldr	r3, [r4, #4]
 80037d4:	bf08      	it	eq
 80037d6:	6031      	streq	r1, [r6, #0]
 80037d8:	5162      	str	r2, [r4, r5]
 80037da:	604b      	str	r3, [r1, #4]
 80037dc:	4638      	mov	r0, r7
 80037de:	f104 060b 	add.w	r6, r4, #11
 80037e2:	f000 f8cf 	bl	8003984 <__malloc_unlock>
 80037e6:	f026 0607 	bic.w	r6, r6, #7
 80037ea:	1d23      	adds	r3, r4, #4
 80037ec:	1af2      	subs	r2, r6, r3
 80037ee:	d0b6      	beq.n	800375e <_malloc_r+0x22>
 80037f0:	1b9b      	subs	r3, r3, r6
 80037f2:	50a3      	str	r3, [r4, r2]
 80037f4:	e7b3      	b.n	800375e <_malloc_r+0x22>
 80037f6:	6862      	ldr	r2, [r4, #4]
 80037f8:	42a3      	cmp	r3, r4
 80037fa:	bf0c      	ite	eq
 80037fc:	6032      	streq	r2, [r6, #0]
 80037fe:	605a      	strne	r2, [r3, #4]
 8003800:	e7ec      	b.n	80037dc <_malloc_r+0xa0>
 8003802:	4623      	mov	r3, r4
 8003804:	6864      	ldr	r4, [r4, #4]
 8003806:	e7b2      	b.n	800376e <_malloc_r+0x32>
 8003808:	4634      	mov	r4, r6
 800380a:	6876      	ldr	r6, [r6, #4]
 800380c:	e7b9      	b.n	8003782 <_malloc_r+0x46>
 800380e:	230c      	movs	r3, #12
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	4638      	mov	r0, r7
 8003814:	f000 f8b6 	bl	8003984 <__malloc_unlock>
 8003818:	e7a1      	b.n	800375e <_malloc_r+0x22>
 800381a:	6025      	str	r5, [r4, #0]
 800381c:	e7de      	b.n	80037dc <_malloc_r+0xa0>
 800381e:	bf00      	nop
 8003820:	20000124 	.word	0x20000124

08003824 <_sbrk_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4d06      	ldr	r5, [pc, #24]	; (8003840 <_sbrk_r+0x1c>)
 8003828:	2300      	movs	r3, #0
 800382a:	4604      	mov	r4, r0
 800382c:	4608      	mov	r0, r1
 800382e:	602b      	str	r3, [r5, #0]
 8003830:	f7fd f812 	bl	8000858 <_sbrk>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	d102      	bne.n	800383e <_sbrk_r+0x1a>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	b103      	cbz	r3, 800383e <_sbrk_r+0x1a>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	2000012c 	.word	0x2000012c

08003844 <__sread>:
 8003844:	b510      	push	{r4, lr}
 8003846:	460c      	mov	r4, r1
 8003848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800384c:	f000 f8a0 	bl	8003990 <_read_r>
 8003850:	2800      	cmp	r0, #0
 8003852:	bfab      	itete	ge
 8003854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003856:	89a3      	ldrhlt	r3, [r4, #12]
 8003858:	181b      	addge	r3, r3, r0
 800385a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800385e:	bfac      	ite	ge
 8003860:	6563      	strge	r3, [r4, #84]	; 0x54
 8003862:	81a3      	strhlt	r3, [r4, #12]
 8003864:	bd10      	pop	{r4, pc}

08003866 <__swrite>:
 8003866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800386a:	461f      	mov	r7, r3
 800386c:	898b      	ldrh	r3, [r1, #12]
 800386e:	05db      	lsls	r3, r3, #23
 8003870:	4605      	mov	r5, r0
 8003872:	460c      	mov	r4, r1
 8003874:	4616      	mov	r6, r2
 8003876:	d505      	bpl.n	8003884 <__swrite+0x1e>
 8003878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800387c:	2302      	movs	r3, #2
 800387e:	2200      	movs	r2, #0
 8003880:	f000 f868 	bl	8003954 <_lseek_r>
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800388a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800388e:	81a3      	strh	r3, [r4, #12]
 8003890:	4632      	mov	r2, r6
 8003892:	463b      	mov	r3, r7
 8003894:	4628      	mov	r0, r5
 8003896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800389a:	f000 b817 	b.w	80038cc <_write_r>

0800389e <__sseek>:
 800389e:	b510      	push	{r4, lr}
 80038a0:	460c      	mov	r4, r1
 80038a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a6:	f000 f855 	bl	8003954 <_lseek_r>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	bf15      	itete	ne
 80038b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80038b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038ba:	81a3      	strheq	r3, [r4, #12]
 80038bc:	bf18      	it	ne
 80038be:	81a3      	strhne	r3, [r4, #12]
 80038c0:	bd10      	pop	{r4, pc}

080038c2 <__sclose>:
 80038c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c6:	f000 b813 	b.w	80038f0 <_close_r>
	...

080038cc <_write_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4d07      	ldr	r5, [pc, #28]	; (80038ec <_write_r+0x20>)
 80038d0:	4604      	mov	r4, r0
 80038d2:	4608      	mov	r0, r1
 80038d4:	4611      	mov	r1, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	602a      	str	r2, [r5, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 f911 	bl	8003b02 <_write>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d102      	bne.n	80038ea <_write_r+0x1e>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	b103      	cbz	r3, 80038ea <_write_r+0x1e>
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	2000012c 	.word	0x2000012c

080038f0 <_close_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4d06      	ldr	r5, [pc, #24]	; (800390c <_close_r+0x1c>)
 80038f4:	2300      	movs	r3, #0
 80038f6:	4604      	mov	r4, r0
 80038f8:	4608      	mov	r0, r1
 80038fa:	602b      	str	r3, [r5, #0]
 80038fc:	f000 f932 	bl	8003b64 <_close>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d102      	bne.n	800390a <_close_r+0x1a>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	b103      	cbz	r3, 800390a <_close_r+0x1a>
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	2000012c 	.word	0x2000012c

08003910 <_fstat_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4d07      	ldr	r5, [pc, #28]	; (8003930 <_fstat_r+0x20>)
 8003914:	2300      	movs	r3, #0
 8003916:	4604      	mov	r4, r0
 8003918:	4608      	mov	r0, r1
 800391a:	4611      	mov	r1, r2
 800391c:	602b      	str	r3, [r5, #0]
 800391e:	f000 f968 	bl	8003bf2 <_fstat>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	d102      	bne.n	800392c <_fstat_r+0x1c>
 8003926:	682b      	ldr	r3, [r5, #0]
 8003928:	b103      	cbz	r3, 800392c <_fstat_r+0x1c>
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	bd38      	pop	{r3, r4, r5, pc}
 800392e:	bf00      	nop
 8003930:	2000012c 	.word	0x2000012c

08003934 <_isatty_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4d06      	ldr	r5, [pc, #24]	; (8003950 <_isatty_r+0x1c>)
 8003938:	2300      	movs	r3, #0
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	f000 fabe 	bl	8003ec0 <_isatty>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_isatty_r+0x1a>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_isatty_r+0x1a>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	2000012c 	.word	0x2000012c

08003954 <_lseek_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4d07      	ldr	r5, [pc, #28]	; (8003974 <_lseek_r+0x20>)
 8003958:	4604      	mov	r4, r0
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	2200      	movs	r2, #0
 8003960:	602a      	str	r2, [r5, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f000 f8bb 	bl	8003ade <_lseek>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_lseek_r+0x1e>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_lseek_r+0x1e>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	2000012c 	.word	0x2000012c

08003978 <__malloc_lock>:
 8003978:	4801      	ldr	r0, [pc, #4]	; (8003980 <__malloc_lock+0x8>)
 800397a:	f7ff be0b 	b.w	8003594 <__retarget_lock_acquire_recursive>
 800397e:	bf00      	nop
 8003980:	20000120 	.word	0x20000120

08003984 <__malloc_unlock>:
 8003984:	4801      	ldr	r0, [pc, #4]	; (800398c <__malloc_unlock+0x8>)
 8003986:	f7ff be06 	b.w	8003596 <__retarget_lock_release_recursive>
 800398a:	bf00      	nop
 800398c:	20000120 	.word	0x20000120

08003990 <_read_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	4d07      	ldr	r5, [pc, #28]	; (80039b0 <_read_r+0x20>)
 8003994:	4604      	mov	r4, r0
 8003996:	4608      	mov	r0, r1
 8003998:	4611      	mov	r1, r2
 800399a:	2200      	movs	r2, #0
 800399c:	602a      	str	r2, [r5, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	f000 f845 	bl	8003a2e <_read>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_read_r+0x1e>
 80039a8:	682b      	ldr	r3, [r5, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_read_r+0x1e>
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	2000012c 	.word	0x2000012c

080039b4 <findslot>:
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <findslot+0x2c>)
 80039b6:	b510      	push	{r4, lr}
 80039b8:	4604      	mov	r4, r0
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	b118      	cbz	r0, 80039c6 <findslot+0x12>
 80039be:	6983      	ldr	r3, [r0, #24]
 80039c0:	b90b      	cbnz	r3, 80039c6 <findslot+0x12>
 80039c2:	f7ff fd49 	bl	8003458 <__sinit>
 80039c6:	2c13      	cmp	r4, #19
 80039c8:	d807      	bhi.n	80039da <findslot+0x26>
 80039ca:	4806      	ldr	r0, [pc, #24]	; (80039e4 <findslot+0x30>)
 80039cc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80039d0:	3201      	adds	r2, #1
 80039d2:	d002      	beq.n	80039da <findslot+0x26>
 80039d4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	2000      	movs	r0, #0
 80039dc:	e7fc      	b.n	80039d8 <findslot+0x24>
 80039de:	bf00      	nop
 80039e0:	2000000c 	.word	0x2000000c
 80039e4:	2000013c 	.word	0x2000013c

080039e8 <error>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	4604      	mov	r4, r0
 80039ec:	f7ff fab2 	bl	8002f54 <__errno>
 80039f0:	2613      	movs	r6, #19
 80039f2:	4605      	mov	r5, r0
 80039f4:	2700      	movs	r7, #0
 80039f6:	4630      	mov	r0, r6
 80039f8:	4639      	mov	r1, r7
 80039fa:	beab      	bkpt	0x00ab
 80039fc:	4606      	mov	r6, r0
 80039fe:	602e      	str	r6, [r5, #0]
 8003a00:	4620      	mov	r0, r4
 8003a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a04 <checkerror>:
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	d101      	bne.n	8003a0c <checkerror+0x8>
 8003a08:	f7ff bfee 	b.w	80039e8 <error>
 8003a0c:	4770      	bx	lr

08003a0e <_swiread>:
 8003a0e:	b530      	push	{r4, r5, lr}
 8003a10:	b085      	sub	sp, #20
 8003a12:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003a16:	9203      	str	r2, [sp, #12]
 8003a18:	2406      	movs	r4, #6
 8003a1a:	ad01      	add	r5, sp, #4
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	4629      	mov	r1, r5
 8003a20:	beab      	bkpt	0x00ab
 8003a22:	4604      	mov	r4, r0
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff ffed 	bl	8003a04 <checkerror>
 8003a2a:	b005      	add	sp, #20
 8003a2c:	bd30      	pop	{r4, r5, pc}

08003a2e <_read>:
 8003a2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a30:	4615      	mov	r5, r2
 8003a32:	9101      	str	r1, [sp, #4]
 8003a34:	f7ff ffbe 	bl	80039b4 <findslot>
 8003a38:	9901      	ldr	r1, [sp, #4]
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	b938      	cbnz	r0, 8003a4e <_read+0x20>
 8003a3e:	f7ff fa89 	bl	8002f54 <__errno>
 8003a42:	2309      	movs	r3, #9
 8003a44:	6003      	str	r3, [r0, #0]
 8003a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a4a:	b003      	add	sp, #12
 8003a4c:	bd30      	pop	{r4, r5, pc}
 8003a4e:	6800      	ldr	r0, [r0, #0]
 8003a50:	462a      	mov	r2, r5
 8003a52:	f7ff ffdc 	bl	8003a0e <_swiread>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	d0f7      	beq.n	8003a4a <_read+0x1c>
 8003a5a:	6863      	ldr	r3, [r4, #4]
 8003a5c:	1a2a      	subs	r2, r5, r0
 8003a5e:	4413      	add	r3, r2
 8003a60:	6063      	str	r3, [r4, #4]
 8003a62:	4610      	mov	r0, r2
 8003a64:	e7f1      	b.n	8003a4a <_read+0x1c>

08003a66 <_swilseek>:
 8003a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a68:	460c      	mov	r4, r1
 8003a6a:	4616      	mov	r6, r2
 8003a6c:	f7ff ffa2 	bl	80039b4 <findslot>
 8003a70:	4605      	mov	r5, r0
 8003a72:	b940      	cbnz	r0, 8003a86 <_swilseek+0x20>
 8003a74:	f7ff fa6e 	bl	8002f54 <__errno>
 8003a78:	2309      	movs	r3, #9
 8003a7a:	6003      	str	r3, [r0, #0]
 8003a7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003a80:	4620      	mov	r0, r4
 8003a82:	b003      	add	sp, #12
 8003a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a86:	2e02      	cmp	r6, #2
 8003a88:	d903      	bls.n	8003a92 <_swilseek+0x2c>
 8003a8a:	f7ff fa63 	bl	8002f54 <__errno>
 8003a8e:	2316      	movs	r3, #22
 8003a90:	e7f3      	b.n	8003a7a <_swilseek+0x14>
 8003a92:	2e01      	cmp	r6, #1
 8003a94:	d112      	bne.n	8003abc <_swilseek+0x56>
 8003a96:	6843      	ldr	r3, [r0, #4]
 8003a98:	18e4      	adds	r4, r4, r3
 8003a9a:	d4f6      	bmi.n	8003a8a <_swilseek+0x24>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	260a      	movs	r6, #10
 8003aa0:	e9cd 3400 	strd	r3, r4, [sp]
 8003aa4:	466f      	mov	r7, sp
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	4639      	mov	r1, r7
 8003aaa:	beab      	bkpt	0x00ab
 8003aac:	4606      	mov	r6, r0
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f7ff ffa8 	bl	8003a04 <checkerror>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	dbe1      	blt.n	8003a7c <_swilseek+0x16>
 8003ab8:	606c      	str	r4, [r5, #4]
 8003aba:	e7e1      	b.n	8003a80 <_swilseek+0x1a>
 8003abc:	2e02      	cmp	r6, #2
 8003abe:	d1ed      	bne.n	8003a9c <_swilseek+0x36>
 8003ac0:	6803      	ldr	r3, [r0, #0]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	260c      	movs	r6, #12
 8003ac6:	466f      	mov	r7, sp
 8003ac8:	4630      	mov	r0, r6
 8003aca:	4639      	mov	r1, r7
 8003acc:	beab      	bkpt	0x00ab
 8003ace:	4606      	mov	r6, r0
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	f7ff ff97 	bl	8003a04 <checkerror>
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	d0d0      	beq.n	8003a7c <_swilseek+0x16>
 8003ada:	4404      	add	r4, r0
 8003adc:	e7de      	b.n	8003a9c <_swilseek+0x36>

08003ade <_lseek>:
 8003ade:	f7ff bfc2 	b.w	8003a66 <_swilseek>

08003ae2 <_swiwrite>:
 8003ae2:	b530      	push	{r4, r5, lr}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003aea:	9203      	str	r2, [sp, #12]
 8003aec:	2405      	movs	r4, #5
 8003aee:	ad01      	add	r5, sp, #4
 8003af0:	4620      	mov	r0, r4
 8003af2:	4629      	mov	r1, r5
 8003af4:	beab      	bkpt	0x00ab
 8003af6:	4604      	mov	r4, r0
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7ff ff83 	bl	8003a04 <checkerror>
 8003afe:	b005      	add	sp, #20
 8003b00:	bd30      	pop	{r4, r5, pc}

08003b02 <_write>:
 8003b02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b04:	4615      	mov	r5, r2
 8003b06:	9101      	str	r1, [sp, #4]
 8003b08:	f7ff ff54 	bl	80039b4 <findslot>
 8003b0c:	9901      	ldr	r1, [sp, #4]
 8003b0e:	4604      	mov	r4, r0
 8003b10:	b930      	cbnz	r0, 8003b20 <_write+0x1e>
 8003b12:	f7ff fa1f 	bl	8002f54 <__errno>
 8003b16:	2309      	movs	r3, #9
 8003b18:	6003      	str	r3, [r0, #0]
 8003b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b1e:	e012      	b.n	8003b46 <_write+0x44>
 8003b20:	6800      	ldr	r0, [r0, #0]
 8003b22:	462a      	mov	r2, r5
 8003b24:	f7ff ffdd 	bl	8003ae2 <_swiwrite>
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	dbf6      	blt.n	8003b1a <_write+0x18>
 8003b2c:	6862      	ldr	r2, [r4, #4]
 8003b2e:	1a2b      	subs	r3, r5, r0
 8003b30:	441a      	add	r2, r3
 8003b32:	42a8      	cmp	r0, r5
 8003b34:	6062      	str	r2, [r4, #4]
 8003b36:	d105      	bne.n	8003b44 <_write+0x42>
 8003b38:	2000      	movs	r0, #0
 8003b3a:	b003      	add	sp, #12
 8003b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b40:	f7ff bf52 	b.w	80039e8 <error>
 8003b44:	4618      	mov	r0, r3
 8003b46:	b003      	add	sp, #12
 8003b48:	bd30      	pop	{r4, r5, pc}

08003b4a <_swiclose>:
 8003b4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b4c:	2402      	movs	r4, #2
 8003b4e:	9001      	str	r0, [sp, #4]
 8003b50:	ad01      	add	r5, sp, #4
 8003b52:	4620      	mov	r0, r4
 8003b54:	4629      	mov	r1, r5
 8003b56:	beab      	bkpt	0x00ab
 8003b58:	4604      	mov	r4, r0
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f7ff ff52 	bl	8003a04 <checkerror>
 8003b60:	b003      	add	sp, #12
 8003b62:	bd30      	pop	{r4, r5, pc}

08003b64 <_close>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	4605      	mov	r5, r0
 8003b68:	f7ff ff24 	bl	80039b4 <findslot>
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	b930      	cbnz	r0, 8003b7e <_close+0x1a>
 8003b70:	f7ff f9f0 	bl	8002f54 <__errno>
 8003b74:	2309      	movs	r3, #9
 8003b76:	6003      	str	r3, [r0, #0]
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b7c:	bd38      	pop	{r3, r4, r5, pc}
 8003b7e:	3d01      	subs	r5, #1
 8003b80:	2d01      	cmp	r5, #1
 8003b82:	d809      	bhi.n	8003b98 <_close+0x34>
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <_close+0x48>)
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d104      	bne.n	8003b98 <_close+0x34>
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b92:	6003      	str	r3, [r0, #0]
 8003b94:	2000      	movs	r0, #0
 8003b96:	e7f1      	b.n	8003b7c <_close+0x18>
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	f7ff ffd6 	bl	8003b4a <_swiclose>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d1ec      	bne.n	8003b7c <_close+0x18>
 8003ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba6:	6023      	str	r3, [r4, #0]
 8003ba8:	e7e8      	b.n	8003b7c <_close+0x18>
 8003baa:	bf00      	nop
 8003bac:	2000013c 	.word	0x2000013c

08003bb0 <_swistat>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	f7ff fefe 	bl	80039b4 <findslot>
 8003bb8:	4605      	mov	r5, r0
 8003bba:	b930      	cbnz	r0, 8003bca <_swistat+0x1a>
 8003bbc:	f7ff f9ca 	bl	8002f54 <__errno>
 8003bc0:	2309      	movs	r3, #9
 8003bc2:	6003      	str	r3, [r0, #0]
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bc8:	bd70      	pop	{r4, r5, r6, pc}
 8003bca:	6863      	ldr	r3, [r4, #4]
 8003bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bd0:	6063      	str	r3, [r4, #4]
 8003bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bd6:	64a3      	str	r3, [r4, #72]	; 0x48
 8003bd8:	260c      	movs	r6, #12
 8003bda:	4630      	mov	r0, r6
 8003bdc:	4629      	mov	r1, r5
 8003bde:	beab      	bkpt	0x00ab
 8003be0:	4605      	mov	r5, r0
 8003be2:	4628      	mov	r0, r5
 8003be4:	f7ff ff0e 	bl	8003a04 <checkerror>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	bf1c      	itt	ne
 8003bec:	6120      	strne	r0, [r4, #16]
 8003bee:	2000      	movne	r0, #0
 8003bf0:	e7ea      	b.n	8003bc8 <_swistat+0x18>

08003bf2 <_fstat>:
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	2258      	movs	r2, #88	; 0x58
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff f9d3 	bl	8002fa8 <memset>
 8003c02:	4601      	mov	r1, r0
 8003c04:	4620      	mov	r0, r4
 8003c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c0a:	f7ff bfd1 	b.w	8003bb0 <_swistat>

08003c0e <_stat>:
 8003c0e:	b538      	push	{r3, r4, r5, lr}
 8003c10:	460d      	mov	r5, r1
 8003c12:	4604      	mov	r4, r0
 8003c14:	2258      	movs	r2, #88	; 0x58
 8003c16:	2100      	movs	r1, #0
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f7ff f9c5 	bl	8002fa8 <memset>
 8003c1e:	4620      	mov	r0, r4
 8003c20:	2100      	movs	r1, #0
 8003c22:	f000 f811 	bl	8003c48 <_swiopen>
 8003c26:	1c43      	adds	r3, r0, #1
 8003c28:	4604      	mov	r4, r0
 8003c2a:	d00b      	beq.n	8003c44 <_stat+0x36>
 8003c2c:	686b      	ldr	r3, [r5, #4]
 8003c2e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c32:	606b      	str	r3, [r5, #4]
 8003c34:	4629      	mov	r1, r5
 8003c36:	f7ff ffbb 	bl	8003bb0 <_swistat>
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7ff ff91 	bl	8003b64 <_close>
 8003c42:	462c      	mov	r4, r5
 8003c44:	4620      	mov	r0, r4
 8003c46:	bd38      	pop	{r3, r4, r5, pc}

08003c48 <_swiopen>:
 8003c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c4c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003cf8 <_swiopen+0xb0>
 8003c50:	b097      	sub	sp, #92	; 0x5c
 8003c52:	4607      	mov	r7, r0
 8003c54:	460e      	mov	r6, r1
 8003c56:	2500      	movs	r5, #0
 8003c58:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003c5c:	1c61      	adds	r1, r4, #1
 8003c5e:	d037      	beq.n	8003cd0 <_swiopen+0x88>
 8003c60:	3501      	adds	r5, #1
 8003c62:	2d14      	cmp	r5, #20
 8003c64:	d1f8      	bne.n	8003c58 <_swiopen+0x10>
 8003c66:	f7ff f975 	bl	8002f54 <__errno>
 8003c6a:	2318      	movs	r3, #24
 8003c6c:	6003      	str	r3, [r0, #0]
 8003c6e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c72:	e03d      	b.n	8003cf0 <_swiopen+0xa8>
 8003c74:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003c78:	f240 6301 	movw	r3, #1537	; 0x601
 8003c7c:	07b2      	lsls	r2, r6, #30
 8003c7e:	bf48      	it	mi
 8003c80:	f044 0402 	orrmi.w	r4, r4, #2
 8003c84:	421e      	tst	r6, r3
 8003c86:	bf18      	it	ne
 8003c88:	f044 0404 	orrne.w	r4, r4, #4
 8003c8c:	0733      	lsls	r3, r6, #28
 8003c8e:	bf48      	it	mi
 8003c90:	f024 0404 	bicmi.w	r4, r4, #4
 8003c94:	4638      	mov	r0, r7
 8003c96:	bf48      	it	mi
 8003c98:	f044 0408 	orrmi.w	r4, r4, #8
 8003c9c:	9700      	str	r7, [sp, #0]
 8003c9e:	f7fc fa93 	bl	80001c8 <strlen>
 8003ca2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003ca6:	2401      	movs	r4, #1
 8003ca8:	4620      	mov	r0, r4
 8003caa:	4649      	mov	r1, r9
 8003cac:	beab      	bkpt	0x00ab
 8003cae:	4604      	mov	r4, r0
 8003cb0:	2c00      	cmp	r4, #0
 8003cb2:	db08      	blt.n	8003cc6 <_swiopen+0x7e>
 8003cb4:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003cb8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f8c8 3004 	str.w	r3, [r8, #4]
 8003cc2:	462c      	mov	r4, r5
 8003cc4:	e014      	b.n	8003cf0 <_swiopen+0xa8>
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f7ff fe8e 	bl	80039e8 <error>
 8003ccc:	4604      	mov	r4, r0
 8003cce:	e00f      	b.n	8003cf0 <_swiopen+0xa8>
 8003cd0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003cd4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003cd8:	46e9      	mov	r9, sp
 8003cda:	d1cb      	bne.n	8003c74 <_swiopen+0x2c>
 8003cdc:	4649      	mov	r1, r9
 8003cde:	4638      	mov	r0, r7
 8003ce0:	f7ff ff95 	bl	8003c0e <_stat>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d0c5      	beq.n	8003c74 <_swiopen+0x2c>
 8003ce8:	f7ff f934 	bl	8002f54 <__errno>
 8003cec:	2311      	movs	r3, #17
 8003cee:	6003      	str	r3, [r0, #0]
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	b017      	add	sp, #92	; 0x5c
 8003cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cf8:	2000013c 	.word	0x2000013c

08003cfc <_get_semihosting_exts>:
 8003cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d00:	4606      	mov	r6, r0
 8003d02:	460f      	mov	r7, r1
 8003d04:	482a      	ldr	r0, [pc, #168]	; (8003db0 <_get_semihosting_exts+0xb4>)
 8003d06:	2100      	movs	r1, #0
 8003d08:	4615      	mov	r5, r2
 8003d0a:	f7ff ff9d 	bl	8003c48 <_swiopen>
 8003d0e:	462a      	mov	r2, r5
 8003d10:	4604      	mov	r4, r0
 8003d12:	2100      	movs	r1, #0
 8003d14:	4630      	mov	r0, r6
 8003d16:	f7ff f947 	bl	8002fa8 <memset>
 8003d1a:	1c63      	adds	r3, r4, #1
 8003d1c:	d016      	beq.n	8003d4c <_get_semihosting_exts+0x50>
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f7ff fe48 	bl	80039b4 <findslot>
 8003d24:	f04f 090c 	mov.w	r9, #12
 8003d28:	4680      	mov	r8, r0
 8003d2a:	4648      	mov	r0, r9
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	beab      	bkpt	0x00ab
 8003d30:	4680      	mov	r8, r0
 8003d32:	4640      	mov	r0, r8
 8003d34:	f7ff fe66 	bl	8003a04 <checkerror>
 8003d38:	2803      	cmp	r0, #3
 8003d3a:	dd02      	ble.n	8003d42 <_get_semihosting_exts+0x46>
 8003d3c:	1ec3      	subs	r3, r0, #3
 8003d3e:	42ab      	cmp	r3, r5
 8003d40:	dc08      	bgt.n	8003d54 <_get_semihosting_exts+0x58>
 8003d42:	4620      	mov	r0, r4
 8003d44:	f7ff ff0e 	bl	8003b64 <_close>
 8003d48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	b003      	add	sp, #12
 8003d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d54:	2204      	movs	r2, #4
 8003d56:	eb0d 0102 	add.w	r1, sp, r2
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7ff fe67 	bl	8003a2e <_read>
 8003d60:	2803      	cmp	r0, #3
 8003d62:	ddee      	ble.n	8003d42 <_get_semihosting_exts+0x46>
 8003d64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d68:	2b53      	cmp	r3, #83	; 0x53
 8003d6a:	d1ea      	bne.n	8003d42 <_get_semihosting_exts+0x46>
 8003d6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003d70:	2b48      	cmp	r3, #72	; 0x48
 8003d72:	d1e6      	bne.n	8003d42 <_get_semihosting_exts+0x46>
 8003d74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003d78:	2b46      	cmp	r3, #70	; 0x46
 8003d7a:	d1e2      	bne.n	8003d42 <_get_semihosting_exts+0x46>
 8003d7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d80:	2b42      	cmp	r3, #66	; 0x42
 8003d82:	d1de      	bne.n	8003d42 <_get_semihosting_exts+0x46>
 8003d84:	2201      	movs	r2, #1
 8003d86:	4639      	mov	r1, r7
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f7ff fe6c 	bl	8003a66 <_swilseek>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	dbd7      	blt.n	8003d42 <_get_semihosting_exts+0x46>
 8003d92:	462a      	mov	r2, r5
 8003d94:	4631      	mov	r1, r6
 8003d96:	4620      	mov	r0, r4
 8003d98:	f7ff fe49 	bl	8003a2e <_read>
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7ff fee0 	bl	8003b64 <_close>
 8003da4:	4628      	mov	r0, r5
 8003da6:	f7ff fe2d 	bl	8003a04 <checkerror>
 8003daa:	4604      	mov	r4, r0
 8003dac:	e7ce      	b.n	8003d4c <_get_semihosting_exts+0x50>
 8003dae:	bf00      	nop
 8003db0:	08003ffc 	.word	0x08003ffc

08003db4 <initialise_semihosting_exts>:
 8003db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003db6:	4d0a      	ldr	r5, [pc, #40]	; (8003de0 <initialise_semihosting_exts+0x2c>)
 8003db8:	4c0a      	ldr	r4, [pc, #40]	; (8003de4 <initialise_semihosting_exts+0x30>)
 8003dba:	2100      	movs	r1, #0
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	a801      	add	r0, sp, #4
 8003dc0:	6029      	str	r1, [r5, #0]
 8003dc2:	6022      	str	r2, [r4, #0]
 8003dc4:	f7ff ff9a 	bl	8003cfc <_get_semihosting_exts>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	dd07      	ble.n	8003ddc <initialise_semihosting_exts+0x28>
 8003dcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003dd0:	f003 0201 	and.w	r2, r3, #1
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	602a      	str	r2, [r5, #0]
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	b003      	add	sp, #12
 8003dde:	bd30      	pop	{r4, r5, pc}
 8003de0:	20000070 	.word	0x20000070
 8003de4:	20000074 	.word	0x20000074

08003de8 <_has_ext_stdout_stderr>:
 8003de8:	b510      	push	{r4, lr}
 8003dea:	4c04      	ldr	r4, [pc, #16]	; (8003dfc <_has_ext_stdout_stderr+0x14>)
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da01      	bge.n	8003df6 <_has_ext_stdout_stderr+0xe>
 8003df2:	f7ff ffdf 	bl	8003db4 <initialise_semihosting_exts>
 8003df6:	6820      	ldr	r0, [r4, #0]
 8003df8:	bd10      	pop	{r4, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000074 	.word	0x20000074

08003e00 <initialise_monitor_handles>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	b085      	sub	sp, #20
 8003e06:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003eb8 <initialise_monitor_handles+0xb8>
 8003e0a:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e0e:	2303      	movs	r3, #3
 8003e10:	2400      	movs	r4, #0
 8003e12:	9303      	str	r3, [sp, #12]
 8003e14:	af01      	add	r7, sp, #4
 8003e16:	9402      	str	r4, [sp, #8]
 8003e18:	2501      	movs	r5, #1
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	4639      	mov	r1, r7
 8003e1e:	beab      	bkpt	0x00ab
 8003e20:	4605      	mov	r5, r0
 8003e22:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003ebc <initialise_monitor_handles+0xbc>
 8003e26:	4623      	mov	r3, r4
 8003e28:	4c20      	ldr	r4, [pc, #128]	; (8003eac <initialise_monitor_handles+0xac>)
 8003e2a:	f8c8 5000 	str.w	r5, [r8]
 8003e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e32:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003e36:	3301      	adds	r3, #1
 8003e38:	2b14      	cmp	r3, #20
 8003e3a:	d1fa      	bne.n	8003e32 <initialise_monitor_handles+0x32>
 8003e3c:	f7ff ffd4 	bl	8003de8 <_has_ext_stdout_stderr>
 8003e40:	4d1b      	ldr	r5, [pc, #108]	; (8003eb0 <initialise_monitor_handles+0xb0>)
 8003e42:	b1d0      	cbz	r0, 8003e7a <initialise_monitor_handles+0x7a>
 8003e44:	f04f 0a03 	mov.w	sl, #3
 8003e48:	2304      	movs	r3, #4
 8003e4a:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e4e:	2601      	movs	r6, #1
 8003e50:	f8cd a00c 	str.w	sl, [sp, #12]
 8003e54:	9302      	str	r3, [sp, #8]
 8003e56:	4630      	mov	r0, r6
 8003e58:	4639      	mov	r1, r7
 8003e5a:	beab      	bkpt	0x00ab
 8003e5c:	4683      	mov	fp, r0
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <initialise_monitor_handles+0xb4>)
 8003e60:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e64:	f8c3 b000 	str.w	fp, [r3]
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f8cd a00c 	str.w	sl, [sp, #12]
 8003e6e:	9302      	str	r3, [sp, #8]
 8003e70:	4630      	mov	r0, r6
 8003e72:	4639      	mov	r1, r7
 8003e74:	beab      	bkpt	0x00ab
 8003e76:	4606      	mov	r6, r0
 8003e78:	602e      	str	r6, [r5, #0]
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	bf02      	ittt	eq
 8003e80:	4b0c      	ldreq	r3, [pc, #48]	; (8003eb4 <initialise_monitor_handles+0xb4>)
 8003e82:	681b      	ldreq	r3, [r3, #0]
 8003e84:	602b      	streq	r3, [r5, #0]
 8003e86:	2600      	movs	r6, #0
 8003e88:	f8d8 3000 	ldr.w	r3, [r8]
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	6066      	str	r6, [r4, #4]
 8003e90:	f7ff ffaa 	bl	8003de8 <_has_ext_stdout_stderr>
 8003e94:	b130      	cbz	r0, 8003ea4 <initialise_monitor_handles+0xa4>
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <initialise_monitor_handles+0xb4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003ea4:	b005      	add	sp, #20
 8003ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eaa:	bf00      	nop
 8003eac:	2000013c 	.word	0x2000013c
 8003eb0:	20000130 	.word	0x20000130
 8003eb4:	20000138 	.word	0x20000138
 8003eb8:	08004012 	.word	0x08004012
 8003ebc:	20000134 	.word	0x20000134

08003ec0 <_isatty>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	f7ff fd77 	bl	80039b4 <findslot>
 8003ec6:	2509      	movs	r5, #9
 8003ec8:	4604      	mov	r4, r0
 8003eca:	b920      	cbnz	r0, 8003ed6 <_isatty+0x16>
 8003ecc:	f7ff f842 	bl	8002f54 <__errno>
 8003ed0:	6005      	str	r5, [r0, #0]
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	bd70      	pop	{r4, r5, r6, pc}
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	4621      	mov	r1, r4
 8003eda:	beab      	bkpt	0x00ab
 8003edc:	4604      	mov	r4, r0
 8003ede:	2c01      	cmp	r4, #1
 8003ee0:	d0f7      	beq.n	8003ed2 <_isatty+0x12>
 8003ee2:	f7ff f837 	bl	8002f54 <__errno>
 8003ee6:	2400      	movs	r4, #0
 8003ee8:	4605      	mov	r5, r0
 8003eea:	2613      	movs	r6, #19
 8003eec:	4630      	mov	r0, r6
 8003eee:	4621      	mov	r1, r4
 8003ef0:	beab      	bkpt	0x00ab
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	602e      	str	r6, [r5, #0]
 8003ef6:	e7ec      	b.n	8003ed2 <_isatty+0x12>

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr

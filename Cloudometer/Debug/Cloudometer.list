
Cloudometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f10  08002f10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f18  08002f18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002f2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002f2c  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6e3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ac  00000000  00000000  0002a71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002c668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025019  00000000  00000000  0002ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a468  00000000  00000000  00051e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5780  00000000  00000000  0005c2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141a79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002240  00000000  00000000  00141acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002eb0 	.word	0x08002eb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002eb0 	.word	0x08002eb0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f9da 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f805 	bl	80004e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f884 	bl	80005e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f852 	bl	8000584 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x14>

080004e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b096      	sub	sp, #88	; 0x58
 80004e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2244      	movs	r2, #68	; 0x44
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f002 fcd5 	bl	8002ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000504:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000508:	f000 fcf0 	bl	8000eec <HAL_PWREx_ControlVoltageScaling>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000512:	f000 f8cd 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000516:	2302      	movs	r3, #2
 8000518:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000520:	2310      	movs	r3, #16
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	2302      	movs	r3, #2
 8000526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000528:	2302      	movs	r3, #2
 800052a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000530:	230a      	movs	r3, #10
 8000532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000534:	2307      	movs	r3, #7
 8000536:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000538:	2302      	movs	r3, #2
 800053a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053c:	2302      	movs	r3, #2
 800053e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fd27 	bl	8000f98 <HAL_RCC_OscConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000550:	f000 f8ae 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	230f      	movs	r3, #15
 8000556:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	2303      	movs	r3, #3
 800055a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2104      	movs	r1, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f001 f8fb 	bl	8001768 <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000578:	f000 f89a 	bl	80006b0 <Error_Handler>
  }
}
 800057c:	bf00      	nop
 800057e:	3758      	adds	r7, #88	; 0x58
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_USART2_UART_Init+0x58>)
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <MX_USART2_UART_Init+0x5c>)
 800058c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_USART2_UART_Init+0x58>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_USART2_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_USART2_UART_Init+0x58>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_USART2_UART_Init+0x58>)
 80005c8:	f001 ff90 	bl	80024ec <HAL_UART_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005d2:	f000 f86d 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000028 	.word	0x20000028
 80005e0:	40004400 	.word	0x40004400

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <MX_GPIO_Init+0xc4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a2a      	ldr	r2, [pc, #168]	; (80006a8 <MX_GPIO_Init+0xc4>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <MX_GPIO_Init+0xc4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <MX_GPIO_Init+0xc4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a24      	ldr	r2, [pc, #144]	; (80006a8 <MX_GPIO_Init+0xc4>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <MX_GPIO_Init+0xc4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_GPIO_Init+0xc4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <MX_GPIO_Init+0xc4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2120      	movs	r1, #32
 800065e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000662:	f000 fc1d 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <MX_GPIO_Init+0xc8>)
 800067e:	f000 fa65 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000682:	2320      	movs	r3, #32
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f000 fa56 	bl	8000b4c <HAL_GPIO_Init>

}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000800 	.word	0x48000800

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x44>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_MspInit+0x44>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6613      	str	r3, [r2, #96]	; 0x60
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_MspInit+0x44>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x44>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x44>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6593      	str	r3, [r2, #88]	; 0x58
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x44>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b0ac      	sub	sp, #176	; 0xb0
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2288      	movs	r2, #136	; 0x88
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f002 fbbb 	bl	8002ea0 <memset>
  if(huart->Instance==USART2)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <HAL_UART_MspInit+0xb0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d13b      	bne.n	80007ac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000734:	2302      	movs	r3, #2
 8000736:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000738:	2300      	movs	r3, #0
 800073a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fa17 	bl	8001b74 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800074c:	f7ff ffb0 	bl	80006b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <HAL_UART_MspInit+0xb4>)
 8000752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000754:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <HAL_UART_MspInit+0xb4>)
 8000756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075a:	6593      	str	r3, [r2, #88]	; 0x58
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_UART_MspInit+0xb4>)
 800075e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <HAL_UART_MspInit+0xb4>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <HAL_UART_MspInit+0xb4>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_UART_MspInit+0xb4>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000780:	230c      	movs	r3, #12
 8000782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000798:	2307      	movs	r3, #7
 800079a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f000 f9d0 	bl	8000b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	37b0      	adds	r7, #176	; 0xb0
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f89a 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <SystemInit+0x20>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <SystemInit+0x20>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800086c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000838:	f7ff ffea 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <LoopForever+0x6>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <LoopForever+0xe>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	; (8000880 <LoopForever+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000862:	f002 faf9 	bl	8002e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000866:	f7ff fe31 	bl	80004cc <main>

0800086a <LoopForever>:

LoopForever:
    b LoopForever
 800086a:	e7fe      	b.n	800086a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800086c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000878:	08002f20 	.word	0x08002f20
  ldr r2, =_sbss
 800087c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000880:	200000b0 	.word	0x200000b0

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_Init+0x3c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <HAL_Init+0x3c>)
 8000898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800089c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089e:	2003      	movs	r0, #3
 80008a0:	f000 f920 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 f80f 	bl	80008c8 <HAL_InitTick>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	e001      	b.n	80008ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b6:	f7ff ff01 	bl	80006bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_InitTick+0x6c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d023      	beq.n	8000924 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <HAL_InitTick+0x70>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_InitTick+0x6c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f91d 	bl	8000b32 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10f      	bne.n	800091e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d809      	bhi.n	8000918 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800090c:	f000 f8f5 	bl	8000afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_InitTick+0x74>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e007      	b.n	8000928 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e004      	b.n	8000928 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	e001      	b.n	8000928 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008
 8000938:	20000000 	.word	0x20000000
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	200000ac 	.word	0x200000ac

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	200000ac 	.word	0x200000ac

08000980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	f7ff ff8e 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff47 	bl	8000980 <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff5c 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff8e 	bl	8000a38 <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5d 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffb0 	bl	8000aa0 <SysTick_Config>
 8000b40:	4603      	mov	r3, r0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	e17f      	b.n	8000e5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8171 	beq.w	8000e56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d005      	beq.n	8000b8c <HAL_GPIO_Init+0x40>
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d130      	bne.n	8000bee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	f003 0201 	and.w	r2, r3, #1
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d118      	bne.n	8000c2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c00:	2201      	movs	r2, #1
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	f003 0201 	and.w	r2, r3, #1
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d017      	beq.n	8000c68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d123      	bne.n	8000cbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	08da      	lsrs	r2, r3, #3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	220f      	movs	r2, #15
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	08da      	lsrs	r2, r3, #3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	6939      	ldr	r1, [r7, #16]
 8000cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0203 	and.w	r2, r3, #3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 80ac 	beq.w	8000e56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <HAL_GPIO_Init+0x330>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	4a5e      	ldr	r2, [pc, #376]	; (8000e7c <HAL_GPIO_Init+0x330>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0a:	4b5c      	ldr	r3, [pc, #368]	; (8000e7c <HAL_GPIO_Init+0x330>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d16:	4a5a      	ldr	r2, [pc, #360]	; (8000e80 <HAL_GPIO_Init+0x334>)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d40:	d025      	beq.n	8000d8e <HAL_GPIO_Init+0x242>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4f      	ldr	r2, [pc, #316]	; (8000e84 <HAL_GPIO_Init+0x338>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d01f      	beq.n	8000d8a <HAL_GPIO_Init+0x23e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4e      	ldr	r2, [pc, #312]	; (8000e88 <HAL_GPIO_Init+0x33c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d019      	beq.n	8000d86 <HAL_GPIO_Init+0x23a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4d      	ldr	r2, [pc, #308]	; (8000e8c <HAL_GPIO_Init+0x340>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0x236>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a4c      	ldr	r2, [pc, #304]	; (8000e90 <HAL_GPIO_Init+0x344>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d00d      	beq.n	8000d7e <HAL_GPIO_Init+0x232>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4b      	ldr	r2, [pc, #300]	; (8000e94 <HAL_GPIO_Init+0x348>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d007      	beq.n	8000d7a <HAL_GPIO_Init+0x22e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4a      	ldr	r2, [pc, #296]	; (8000e98 <HAL_GPIO_Init+0x34c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_GPIO_Init+0x22a>
 8000d72:	2306      	movs	r3, #6
 8000d74:	e00c      	b.n	8000d90 <HAL_GPIO_Init+0x244>
 8000d76:	2307      	movs	r3, #7
 8000d78:	e00a      	b.n	8000d90 <HAL_GPIO_Init+0x244>
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e008      	b.n	8000d90 <HAL_GPIO_Init+0x244>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x244>
 8000d82:	2303      	movs	r3, #3
 8000d84:	e004      	b.n	8000d90 <HAL_GPIO_Init+0x244>
 8000d86:	2302      	movs	r3, #2
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_Init+0x244>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <HAL_GPIO_Init+0x244>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	f002 0203 	and.w	r2, r2, #3
 8000d96:	0092      	lsls	r2, r2, #2
 8000d98:	4093      	lsls	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000da0:	4937      	ldr	r1, [pc, #220]	; (8000e80 <HAL_GPIO_Init+0x334>)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dae:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <HAL_GPIO_Init+0x350>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dd2:	4a32      	ldr	r2, [pc, #200]	; (8000e9c <HAL_GPIO_Init+0x350>)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dd8:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <HAL_GPIO_Init+0x350>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dfc:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <HAL_GPIO_Init+0x350>)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <HAL_GPIO_Init+0x350>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e26:	4a1d      	ldr	r2, [pc, #116]	; (8000e9c <HAL_GPIO_Init+0x350>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_GPIO_Init+0x350>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_GPIO_Init+0x350>)
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa22 f303 	lsr.w	r3, r2, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f47f ae78 	bne.w	8000b5c <HAL_GPIO_Init+0x10>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010000 	.word	0x40010000
 8000e84:	48000400 	.word	0x48000400
 8000e88:	48000800 	.word	0x48000800
 8000e8c:	48000c00 	.word	0x48000c00
 8000e90:	48001000 	.word	0x48001000
 8000e94:	48001400 	.word	0x48001400
 8000e98:	48001800 	.word	0x48001800
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
 8000eac:	4613      	mov	r3, r2
 8000eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb0:	787b      	ldrb	r3, [r7, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40007000 	.word	0x40007000

08000eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000efa:	d130      	bne.n	8000f5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f08:	d038      	beq.n	8000f7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f12:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2232      	movs	r2, #50	; 0x32
 8000f20:	fb02 f303 	mul.w	r3, r2, r3
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f26:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2a:	0c9b      	lsrs	r3, r3, #18
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f30:	e002      	b.n	8000f38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f44:	d102      	bne.n	8000f4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f2      	bne.n	8000f32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f58:	d110      	bne.n	8000f7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e00f      	b.n	8000f7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f6a:	d007      	beq.n	8000f7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f74:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40007000 	.word	0x40007000
 8000f90:	20000000 	.word	0x20000000
 8000f94:	431bde83 	.word	0x431bde83

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e3d8      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000faa:	4b97      	ldr	r3, [pc, #604]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fb4:	4b94      	ldr	r3, [pc, #592]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 80e4 	beq.w	8001194 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x4a>
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	2b0c      	cmp	r3, #12
 8000fd6:	f040 808b 	bne.w	80010f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	f040 8087 	bne.w	80010f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fe2:	4b89      	ldr	r3, [pc, #548]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d005      	beq.n	8000ffa <HAL_RCC_OscConfig+0x62>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e3b0      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a1a      	ldr	r2, [r3, #32]
 8000ffe:	4b82      	ldr	r3, [pc, #520]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <HAL_RCC_OscConfig+0x7c>
 800100a:	4b7f      	ldr	r3, [pc, #508]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001012:	e005      	b.n	8001020 <HAL_RCC_OscConfig+0x88>
 8001014:	4b7c      	ldr	r3, [pc, #496]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001020:	4293      	cmp	r3, r2
 8001022:	d223      	bcs.n	800106c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fd43 	bl	8001ab4 <RCC_SetFlashLatencyFromMSIRange>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e391      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001038:	4b73      	ldr	r3, [pc, #460]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a72      	ldr	r2, [pc, #456]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b70      	ldr	r3, [pc, #448]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	496d      	ldr	r1, [pc, #436]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001056:	4b6c      	ldr	r3, [pc, #432]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	4968      	ldr	r1, [pc, #416]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001066:	4313      	orrs	r3, r2
 8001068:	604b      	str	r3, [r1, #4]
 800106a:	e025      	b.n	80010b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800106c:	4b66      	ldr	r3, [pc, #408]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a65      	ldr	r2, [pc, #404]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001072:	f043 0308 	orr.w	r3, r3, #8
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b63      	ldr	r3, [pc, #396]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4960      	ldr	r1, [pc, #384]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800108a:	4b5f      	ldr	r3, [pc, #380]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	495b      	ldr	r1, [pc, #364]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800109a:	4313      	orrs	r3, r2
 800109c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d109      	bne.n	80010b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fd03 	bl	8001ab4 <RCC_SetFlashLatencyFromMSIRange>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e351      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010b8:	f000 fc38 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80010bc:	4602      	mov	r2, r0
 80010be:	4b52      	ldr	r3, [pc, #328]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	4950      	ldr	r1, [pc, #320]	; (800120c <HAL_RCC_OscConfig+0x274>)
 80010ca:	5ccb      	ldrb	r3, [r1, r3]
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	fa22 f303 	lsr.w	r3, r2, r3
 80010d4:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <HAL_RCC_OscConfig+0x278>)
 80010d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010d8:	4b4e      	ldr	r3, [pc, #312]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fbf3 	bl	80008c8 <HAL_InitTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d052      	beq.n	8001192 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	e335      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d032      	beq.n	800115e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010f8:	4b43      	ldr	r3, [pc, #268]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a42      	ldr	r2, [pc, #264]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001104:	f7ff fc30 	bl	8000968 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800110c:	f7ff fc2c 	bl	8000968 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e31e      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800111e:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800112a:	4b37      	ldr	r3, [pc, #220]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a36      	ldr	r2, [pc, #216]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b34      	ldr	r3, [pc, #208]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4931      	ldr	r1, [pc, #196]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001148:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	492c      	ldr	r1, [pc, #176]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]
 800115c:	e01a      	b.n	8001194 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a29      	ldr	r2, [pc, #164]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800116a:	f7ff fbfd 	bl	8000968 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001172:	f7ff fbf9 	bl	8000968 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e2eb      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f0      	bne.n	8001172 <HAL_RCC_OscConfig+0x1da>
 8001190:	e000      	b.n	8001194 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001192:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d074      	beq.n	800128a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d005      	beq.n	80011b2 <HAL_RCC_OscConfig+0x21a>
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b0c      	cmp	r3, #12
 80011aa:	d10e      	bne.n	80011ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d10b      	bne.n	80011ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d064      	beq.n	8001288 <HAL_RCC_OscConfig+0x2f0>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d160      	bne.n	8001288 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e2c8      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d2:	d106      	bne.n	80011e2 <HAL_RCC_OscConfig+0x24a>
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 80011da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	e026      	b.n	8001230 <HAL_RCC_OscConfig+0x298>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ea:	d115      	bne.n	8001218 <HAL_RCC_OscConfig+0x280>
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a05      	ldr	r2, [pc, #20]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 80011f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a02      	ldr	r2, [pc, #8]	; (8001208 <HAL_RCC_OscConfig+0x270>)
 80011fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e014      	b.n	8001230 <HAL_RCC_OscConfig+0x298>
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000
 800120c:	08002ec8 	.word	0x08002ec8
 8001210:	20000000 	.word	0x20000000
 8001214:	20000004 	.word	0x20000004
 8001218:	4ba0      	ldr	r3, [pc, #640]	; (800149c <HAL_RCC_OscConfig+0x504>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a9f      	ldr	r2, [pc, #636]	; (800149c <HAL_RCC_OscConfig+0x504>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b9d      	ldr	r3, [pc, #628]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a9c      	ldr	r2, [pc, #624]	; (800149c <HAL_RCC_OscConfig+0x504>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fb96 	bl	8000968 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fb92 	bl	8000968 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e284      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001252:	4b92      	ldr	r3, [pc, #584]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0x2a8>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fb82 	bl	8000968 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fb7e 	bl	8000968 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e270      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800127a:	4b88      	ldr	r3, [pc, #544]	; (800149c <HAL_RCC_OscConfig+0x504>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x2d0>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d060      	beq.n	8001358 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b04      	cmp	r3, #4
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_OscConfig+0x310>
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b0c      	cmp	r3, #12
 80012a0:	d119      	bne.n	80012d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d116      	bne.n	80012d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a8:	4b7c      	ldr	r3, [pc, #496]	; (800149c <HAL_RCC_OscConfig+0x504>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_OscConfig+0x328>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e24d      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b76      	ldr	r3, [pc, #472]	; (800149c <HAL_RCC_OscConfig+0x504>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	061b      	lsls	r3, r3, #24
 80012ce:	4973      	ldr	r1, [pc, #460]	; (800149c <HAL_RCC_OscConfig+0x504>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d4:	e040      	b.n	8001358 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d023      	beq.n	8001326 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012de:	4b6f      	ldr	r3, [pc, #444]	; (800149c <HAL_RCC_OscConfig+0x504>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6e      	ldr	r2, [pc, #440]	; (800149c <HAL_RCC_OscConfig+0x504>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	f7ff fb3d 	bl	8000968 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fb39 	bl	8000968 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e22b      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001304:	4b65      	ldr	r3, [pc, #404]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001310:	4b62      	ldr	r3, [pc, #392]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	061b      	lsls	r3, r3, #24
 800131e:	495f      	ldr	r1, [pc, #380]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
 8001324:	e018      	b.n	8001358 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001326:	4b5d      	ldr	r3, [pc, #372]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a5c      	ldr	r2, [pc, #368]	; (800149c <HAL_RCC_OscConfig+0x504>)
 800132c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001332:	f7ff fb19 	bl	8000968 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133a:	f7ff fb15 	bl	8000968 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e207      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800134c:	4b53      	ldr	r3, [pc, #332]	; (800149c <HAL_RCC_OscConfig+0x504>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d03c      	beq.n	80013de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d01c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136c:	4b4b      	ldr	r3, [pc, #300]	; (800149c <HAL_RCC_OscConfig+0x504>)
 800136e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001372:	4a4a      	ldr	r2, [pc, #296]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137c:	f7ff faf4 	bl	8000968 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff faf0 	bl	8000968 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e1e2      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0ef      	beq.n	8001384 <HAL_RCC_OscConfig+0x3ec>
 80013a4:	e01b      	b.n	80013de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <HAL_RCC_OscConfig+0x504>)
 80013a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ac:	4a3b      	ldr	r2, [pc, #236]	; (800149c <HAL_RCC_OscConfig+0x504>)
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b6:	f7ff fad7 	bl	8000968 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013be:	f7ff fad3 	bl	8000968 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1c5      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d0:	4b32      	ldr	r3, [pc, #200]	; (800149c <HAL_RCC_OscConfig+0x504>)
 80013d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1ef      	bne.n	80013be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80a6 	beq.w	8001538 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_RCC_OscConfig+0x504>)
 80013f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10d      	bne.n	8001418 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_RCC_OscConfig+0x504>)
 80013fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6593      	str	r3, [r2, #88]	; 0x58
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_RCC_OscConfig+0x504>)
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001414:	2301      	movs	r3, #1
 8001416:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_RCC_OscConfig+0x508>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d118      	bne.n	8001456 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_RCC_OscConfig+0x508>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_RCC_OscConfig+0x508>)
 800142a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001430:	f7ff fa9a 	bl	8000968 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001438:	f7ff fa96 	bl	8000968 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e188      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_RCC_OscConfig+0x508>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d108      	bne.n	8001470 <HAL_RCC_OscConfig+0x4d8>
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800146e:	e029      	b.n	80014c4 <HAL_RCC_OscConfig+0x52c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b05      	cmp	r3, #5
 8001476:	d115      	bne.n	80014a4 <HAL_RCC_OscConfig+0x50c>
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_RCC_OscConfig+0x504>)
 800147a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_RCC_OscConfig+0x504>)
 800148a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148e:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_RCC_OscConfig+0x504>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001498:	e014      	b.n	80014c4 <HAL_RCC_OscConfig+0x52c>
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	40007000 	.word	0x40007000
 80014a4:	4b91      	ldr	r3, [pc, #580]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80014a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014aa:	4a90      	ldr	r2, [pc, #576]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b4:	4b8d      	ldr	r3, [pc, #564]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80014b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ba:	4a8c      	ldr	r2, [pc, #560]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d016      	beq.n	80014fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff fa4c 	bl	8000968 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d4:	f7ff fa48 	bl	8000968 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e138      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ea:	4b80      	ldr	r3, [pc, #512]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80014ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0ed      	beq.n	80014d4 <HAL_RCC_OscConfig+0x53c>
 80014f8:	e015      	b.n	8001526 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fa:	f7ff fa35 	bl	8000968 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001502:	f7ff fa31 	bl	8000968 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001510:	4293      	cmp	r3, r2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e121      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001518:	4b74      	ldr	r3, [pc, #464]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1ed      	bne.n	8001502 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001526:	7ffb      	ldrb	r3, [r7, #31]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d105      	bne.n	8001538 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152c:	4b6f      	ldr	r3, [pc, #444]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	4a6e      	ldr	r2, [pc, #440]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 8001532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001536:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 810c 	beq.w	800175a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	2b02      	cmp	r3, #2
 8001548:	f040 80d4 	bne.w	80016f4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800154c:	4b67      	ldr	r3, [pc, #412]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	429a      	cmp	r2, r3
 800155e:	d130      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	3b01      	subs	r3, #1
 800156c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d127      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800157e:	429a      	cmp	r2, r3
 8001580:	d11f      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800158c:	2a07      	cmp	r2, #7
 800158e:	bf14      	ite	ne
 8001590:	2201      	movne	r2, #1
 8001592:	2200      	moveq	r2, #0
 8001594:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001596:	4293      	cmp	r3, r2
 8001598:	d113      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a4:	085b      	lsrs	r3, r3, #1
 80015a6:	3b01      	subs	r3, #1
 80015a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d109      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	3b01      	subs	r3, #1
 80015bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d06e      	beq.n	80016a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d069      	beq.n	800169c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015c8:	4b48      	ldr	r3, [pc, #288]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015d4:	4b45      	ldr	r3, [pc, #276]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0bb      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015e4:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a40      	ldr	r2, [pc, #256]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80015ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015f0:	f7ff f9ba 	bl	8000968 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff f9b6 	bl	8000968 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e0a8      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001616:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <HAL_RCC_OscConfig+0x758>)
 800161c:	4013      	ands	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001626:	3a01      	subs	r2, #1
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	4311      	orrs	r1, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001630:	0212      	lsls	r2, r2, #8
 8001632:	4311      	orrs	r1, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001638:	0852      	lsrs	r2, r2, #1
 800163a:	3a01      	subs	r2, #1
 800163c:	0552      	lsls	r2, r2, #21
 800163e:	4311      	orrs	r1, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001644:	0852      	lsrs	r2, r2, #1
 8001646:	3a01      	subs	r2, #1
 8001648:	0652      	lsls	r2, r2, #25
 800164a:	4311      	orrs	r1, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001650:	0912      	lsrs	r2, r2, #4
 8001652:	0452      	lsls	r2, r2, #17
 8001654:	430a      	orrs	r2, r1
 8001656:	4925      	ldr	r1, [pc, #148]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 8001658:	4313      	orrs	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a22      	ldr	r2, [pc, #136]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001666:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a1f      	ldr	r2, [pc, #124]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001672:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001674:	f7ff f978 	bl	8000968 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f974 	bl	8000968 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e066      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800169a:	e05e      	b.n	800175a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e05d      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d156      	bne.n	800175a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80016b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80016be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016c4:	f7ff f950 	bl	8000968 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff f94c 	bl	8000968 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e03e      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016de:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_RCC_OscConfig+0x754>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x734>
 80016ea:	e036      	b.n	800175a <HAL_RCC_OscConfig+0x7c2>
 80016ec:	40021000 	.word	0x40021000
 80016f0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d02d      	beq.n	8001756 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_RCC_OscConfig+0x7cc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_RCC_OscConfig+0x7cc>)
 8001700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001704:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_RCC_OscConfig+0x7cc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d105      	bne.n	800171e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_RCC_OscConfig+0x7cc>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	4a13      	ldr	r2, [pc, #76]	; (8001764 <HAL_RCC_OscConfig+0x7cc>)
 8001718:	f023 0303 	bic.w	r3, r3, #3
 800171c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_RCC_OscConfig+0x7cc>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_RCC_OscConfig+0x7cc>)
 8001724:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff f91b 	bl	8000968 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff f917 	bl	8000968 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e009      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_RCC_OscConfig+0x7cc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x79e>
 8001754:	e001      	b.n	800175a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0c8      	b.n	800190e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b66      	ldr	r3, [pc, #408]	; (8001918 <HAL_RCC_ClockConfig+0x1b0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d910      	bls.n	80017ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b63      	ldr	r3, [pc, #396]	; (8001918 <HAL_RCC_ClockConfig+0x1b0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 0207 	bic.w	r2, r3, #7
 8001792:	4961      	ldr	r1, [pc, #388]	; (8001918 <HAL_RCC_ClockConfig+0x1b0>)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b5f      	ldr	r3, [pc, #380]	; (8001918 <HAL_RCC_ClockConfig+0x1b0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0b0      	b.n	800190e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d04c      	beq.n	8001852 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c0:	4b56      	ldr	r3, [pc, #344]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d121      	bne.n	8001810 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e09e      	b.n	800190e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d107      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d115      	bne.n	8001810 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e092      	b.n	800190e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d107      	bne.n	8001800 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f0:	4b4a      	ldr	r3, [pc, #296]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e086      	b.n	800190e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001800:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e07e      	b.n	800190e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001810:	4b42      	ldr	r3, [pc, #264]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 0203 	bic.w	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	493f      	ldr	r1, [pc, #252]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001822:	f7ff f8a1 	bl	8000968 <HAL_GetTick>
 8001826:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001828:	e00a      	b.n	8001840 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182a:	f7ff f89d 	bl	8000968 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e066      	b.n	800190e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001840:	4b36      	ldr	r3, [pc, #216]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 020c 	and.w	r2, r3, #12
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	429a      	cmp	r2, r3
 8001850:	d1eb      	bne.n	800182a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	492c      	ldr	r1, [pc, #176]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <HAL_RCC_ClockConfig+0x1b0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d210      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_RCC_ClockConfig+0x1b0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0207 	bic.w	r2, r3, #7
 8001886:	4924      	ldr	r1, [pc, #144]	; (8001918 <HAL_RCC_ClockConfig+0x1b0>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_RCC_ClockConfig+0x1b0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e036      	b.n	800190e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4910      	ldr	r1, [pc, #64]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018de:	f000 f825 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80018e2:	4602      	mov	r2, r0
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_RCC_ClockConfig+0x1b4>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	490c      	ldr	r1, [pc, #48]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	5ccb      	ldrb	r3, [r1, r3]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe ffe0 	bl	80008c8 <HAL_InitTick>
 8001908:	4603      	mov	r3, r0
 800190a:	72fb      	strb	r3, [r7, #11]

  return status;
 800190c:	7afb      	ldrb	r3, [r7, #11]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40022000 	.word	0x40022000
 800191c:	40021000 	.word	0x40021000
 8001920:	08002ec8 	.word	0x08002ec8
 8001924:	20000000 	.word	0x20000000
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193a:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001944:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x34>
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d121      	bne.n	800199e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d11e      	bne.n	800199e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d107      	bne.n	800197c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800196c:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	e005      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800197c:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001988:	4a2b      	ldr	r2, [pc, #172]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x10c>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001990:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10d      	bne.n	80019b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d102      	bne.n	80019aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x110>)
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	e004      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x114>)
 80019b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d134      	bne.n	8001a24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d003      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0xac>
 80019d0:	e005      	b.n	80019de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x110>)
 80019d4:	617b      	str	r3, [r7, #20]
      break;
 80019d6:	e005      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x114>)
 80019da:	617b      	str	r3, [r7, #20]
      break;
 80019dc:	e002      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	617b      	str	r3, [r7, #20]
      break;
 80019e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	3301      	adds	r3, #1
 80019f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	fb03 f202 	mul.w	r2, r3, r2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	0e5b      	lsrs	r3, r3, #25
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	3301      	adds	r3, #1
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a24:	69bb      	ldr	r3, [r7, #24]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08002ee0 	.word	0x08002ee0
 8001a3c:	00f42400 	.word	0x00f42400
 8001a40:	007a1200 	.word	0x007a1200

08001a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000000 	.word	0x20000000

08001a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a60:	f7ff fff0 	bl	8001a44 <HAL_RCC_GetHCLKFreq>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	4904      	ldr	r1, [pc, #16]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a72:	5ccb      	ldrb	r3, [r1, r3]
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08002ed8 	.word	0x08002ed8

08001a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a8c:	f7ff ffda 	bl	8001a44 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0adb      	lsrs	r3, r3, #11
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4904      	ldr	r1, [pc, #16]	; (8001ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08002ed8 	.word	0x08002ed8

08001ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001acc:	f7ff fa00 	bl	8000ed0 <HAL_PWREx_GetVoltageRange>
 8001ad0:	6178      	str	r0, [r7, #20]
 8001ad2:	e014      	b.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001aec:	f7ff f9f0 	bl	8000ed0 <HAL_PWREx_GetVoltageRange>
 8001af0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b04:	d10b      	bne.n	8001b1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b80      	cmp	r3, #128	; 0x80
 8001b0a:	d919      	bls.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2ba0      	cmp	r3, #160	; 0xa0
 8001b10:	d902      	bls.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b12:	2302      	movs	r3, #2
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	e013      	b.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b18:	2301      	movs	r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	e010      	b.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b80      	cmp	r3, #128	; 0x80
 8001b22:	d902      	bls.n	8001b2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b24:	2303      	movs	r3, #3
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	e00a      	b.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b80      	cmp	r3, #128	; 0x80
 8001b2e:	d102      	bne.n	8001b36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b30:	2302      	movs	r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	e004      	b.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b70      	cmp	r3, #112	; 0x70
 8001b3a:	d101      	bne.n	8001b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 0207 	bic.w	r2, r3, #7
 8001b48:	4909      	ldr	r1, [pc, #36]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d001      	beq.n	8001b62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b80:	2300      	movs	r3, #0
 8001b82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d041      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001b98:	d02a      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001b9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001b9e:	d824      	bhi.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ba4:	d008      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001baa:	d81e      	bhi.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00a      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb4:	d010      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001bb6:	e018      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001bb8:	4b86      	ldr	r3, [pc, #536]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4a85      	ldr	r2, [pc, #532]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bc4:	e015      	b.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fabb 	bl	8002148 <RCCEx_PLLSAI1_Config>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bd6:	e00c      	b.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3320      	adds	r3, #32
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fba6 	bl	8002330 <RCCEx_PLLSAI2_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001be8:	e003      	b.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	74fb      	strb	r3, [r7, #19]
      break;
 8001bee:	e000      	b.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bf2:	7cfb      	ldrb	r3, [r7, #19]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10b      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bf8:	4b76      	ldr	r3, [pc, #472]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c06:	4973      	ldr	r1, [pc, #460]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c0e:	e001      	b.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c10:	7cfb      	ldrb	r3, [r7, #19]
 8001c12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d041      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c28:	d02a      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001c2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c2e:	d824      	bhi.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c34:	d008      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c3a:	d81e      	bhi.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00a      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c44:	d010      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c46:	e018      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c48:	4b62      	ldr	r3, [pc, #392]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a61      	ldr	r2, [pc, #388]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c54:	e015      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 fa73 	bl	8002148 <RCCEx_PLLSAI1_Config>
 8001c62:	4603      	mov	r3, r0
 8001c64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c66:	e00c      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3320      	adds	r3, #32
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fb5e 	bl	8002330 <RCCEx_PLLSAI2_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c78:	e003      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	74fb      	strb	r3, [r7, #19]
      break;
 8001c7e:	e000      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c82:	7cfb      	ldrb	r3, [r7, #19]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c88:	4b52      	ldr	r3, [pc, #328]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c96:	494f      	ldr	r1, [pc, #316]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c9e:	e001      	b.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ca0:	7cfb      	ldrb	r3, [r7, #19]
 8001ca2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a0 	beq.w	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00d      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	4a40      	ldr	r2, [pc, #256]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd8:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cf4:	f7fe fe38 	bl	8000968 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001cfa:	e009      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfc:	f7fe fe34 	bl	8000968 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d902      	bls.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	74fb      	strb	r3, [r7, #19]
        break;
 8001d0e:	e005      	b.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ef      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001d1c:	7cfb      	ldrb	r3, [r7, #19]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d15c      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d22:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01f      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d019      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d6c:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d016      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7fe fdf3 	bl	8000968 <HAL_GetTick>
 8001d82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d84:	e00b      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d86:	f7fe fdef 	bl	8000968 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d902      	bls.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	74fb      	strb	r3, [r7, #19]
            break;
 8001d9c:	e006      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0ec      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc2:	4904      	ldr	r1, [pc, #16]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001dca:	e009      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dcc:	7cfb      	ldrb	r3, [r7, #19]
 8001dce:	74bb      	strb	r3, [r7, #18]
 8001dd0:	e006      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de0:	7c7b      	ldrb	r3, [r7, #17]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d105      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b9e      	ldr	r3, [pc, #632]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a9d      	ldr	r2, [pc, #628]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00a      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dfe:	4b98      	ldr	r3, [pc, #608]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e04:	f023 0203 	bic.w	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0c:	4994      	ldr	r1, [pc, #592]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00a      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e20:	4b8f      	ldr	r3, [pc, #572]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e26:	f023 020c 	bic.w	r2, r3, #12
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	498c      	ldr	r1, [pc, #560]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e42:	4b87      	ldr	r3, [pc, #540]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	4983      	ldr	r1, [pc, #524]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e64:	4b7e      	ldr	r3, [pc, #504]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	497b      	ldr	r1, [pc, #492]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00a      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e86:	4b76      	ldr	r3, [pc, #472]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	4972      	ldr	r1, [pc, #456]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00a      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ea8:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	496a      	ldr	r1, [pc, #424]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eca:	4b65      	ldr	r3, [pc, #404]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	4961      	ldr	r1, [pc, #388]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00a      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001eec:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efa:	4959      	ldr	r1, [pc, #356]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f0e:	4b54      	ldr	r3, [pc, #336]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f1c:	4950      	ldr	r1, [pc, #320]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f30:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	4948      	ldr	r1, [pc, #288]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f52:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	493f      	ldr	r1, [pc, #252]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d028      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f74:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f82:	4937      	ldr	r1, [pc, #220]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f94:	4b32      	ldr	r3, [pc, #200]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a31      	ldr	r2, [pc, #196]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f9e:	60d3      	str	r3, [r2, #12]
 8001fa0:	e011      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f8c8 	bl	8002148 <RCCEx_PLLSAI1_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001fc2:	7cfb      	ldrb	r3, [r7, #19]
 8001fc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d028      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fd2:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	491f      	ldr	r1, [pc, #124]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ff0:	d106      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ffc:	60d3      	str	r3, [r2, #12]
 8001ffe:	e011      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002008:	d10c      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	2101      	movs	r1, #1
 8002010:	4618      	mov	r0, r3
 8002012:	f000 f899 	bl	8002148 <RCCEx_PLLSAI1_Config>
 8002016:	4603      	mov	r3, r0
 8002018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800201a:	7cfb      	ldrb	r3, [r7, #19]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002020:	7cfb      	ldrb	r3, [r7, #19]
 8002022:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d02b      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800204e:	d109      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a02      	ldr	r2, [pc, #8]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800205a:	60d3      	str	r3, [r2, #12]
 800205c:	e014      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800206c:	d10c      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	2101      	movs	r1, #1
 8002074:	4618      	mov	r0, r3
 8002076:	f000 f867 	bl	8002148 <RCCEx_PLLSAI1_Config>
 800207a:	4603      	mov	r3, r0
 800207c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800207e:	7cfb      	ldrb	r3, [r7, #19]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d02f      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002094:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020a2:	4928      	ldr	r1, [pc, #160]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020b2:	d10d      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3304      	adds	r3, #4
 80020b8:	2102      	movs	r1, #2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f844 	bl	8002148 <RCCEx_PLLSAI1_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d014      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80020ca:	7cfb      	ldrb	r3, [r7, #19]
 80020cc:	74bb      	strb	r3, [r7, #18]
 80020ce:	e011      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3320      	adds	r3, #32
 80020de:	2102      	movs	r1, #2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 f925 	bl	8002330 <RCCEx_PLLSAI2_Config>
 80020e6:	4603      	mov	r3, r0
 80020e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020ea:	7cfb      	ldrb	r3, [r7, #19]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800210e:	490d      	ldr	r1, [pc, #52]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002132:	4904      	ldr	r1, [pc, #16]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800213a:	7cbb      	ldrb	r3, [r7, #18]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000

08002148 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002156:	4b75      	ldr	r3, [pc, #468]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d018      	beq.n	8002194 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002162:	4b72      	ldr	r3, [pc, #456]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0203 	and.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d10d      	bne.n	800218e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
       ||
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800217a:	4b6c      	ldr	r3, [pc, #432]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
       ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d047      	beq.n	800221e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e044      	b.n	800221e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d018      	beq.n	80021ce <RCCEx_PLLSAI1_Config+0x86>
 800219c:	2b03      	cmp	r3, #3
 800219e:	d825      	bhi.n	80021ec <RCCEx_PLLSAI1_Config+0xa4>
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d002      	beq.n	80021aa <RCCEx_PLLSAI1_Config+0x62>
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d009      	beq.n	80021bc <RCCEx_PLLSAI1_Config+0x74>
 80021a8:	e020      	b.n	80021ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021aa:	4b60      	ldr	r3, [pc, #384]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d11d      	bne.n	80021f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ba:	e01a      	b.n	80021f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021bc:	4b5b      	ldr	r3, [pc, #364]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d116      	bne.n	80021f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021cc:	e013      	b.n	80021f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021ce:	4b57      	ldr	r3, [pc, #348]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10f      	bne.n	80021fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021da:	4b54      	ldr	r3, [pc, #336]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80021ea:	e006      	b.n	80021fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      break;
 80021f0:	e004      	b.n	80021fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80021f2:	bf00      	nop
 80021f4:	e002      	b.n	80021fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80021fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10d      	bne.n	800221e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002202:	4b4a      	ldr	r3, [pc, #296]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	430b      	orrs	r3, r1
 8002218:	4944      	ldr	r1, [pc, #272]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d17d      	bne.n	8002320 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002224:	4b41      	ldr	r3, [pc, #260]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a40      	ldr	r2, [pc, #256]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 800222a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800222e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002230:	f7fe fb9a 	bl	8000968 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002236:	e009      	b.n	800224c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002238:	f7fe fb96 	bl	8000968 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d902      	bls.n	800224c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	73fb      	strb	r3, [r7, #15]
        break;
 800224a:	e005      	b.n	8002258 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800224c:	4b37      	ldr	r3, [pc, #220]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ef      	bne.n	8002238 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d160      	bne.n	8002320 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d111      	bne.n	8002288 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800226c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6892      	ldr	r2, [r2, #8]
 8002274:	0211      	lsls	r1, r2, #8
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68d2      	ldr	r2, [r2, #12]
 800227a:	0912      	lsrs	r2, r2, #4
 800227c:	0452      	lsls	r2, r2, #17
 800227e:	430a      	orrs	r2, r1
 8002280:	492a      	ldr	r1, [pc, #168]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	610b      	str	r3, [r1, #16]
 8002286:	e027      	b.n	80022d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d112      	bne.n	80022b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800228e:	4b27      	ldr	r3, [pc, #156]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002296:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6892      	ldr	r2, [r2, #8]
 800229e:	0211      	lsls	r1, r2, #8
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6912      	ldr	r2, [r2, #16]
 80022a4:	0852      	lsrs	r2, r2, #1
 80022a6:	3a01      	subs	r2, #1
 80022a8:	0552      	lsls	r2, r2, #21
 80022aa:	430a      	orrs	r2, r1
 80022ac:	491f      	ldr	r1, [pc, #124]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	610b      	str	r3, [r1, #16]
 80022b2:	e011      	b.n	80022d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6892      	ldr	r2, [r2, #8]
 80022c4:	0211      	lsls	r1, r2, #8
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6952      	ldr	r2, [r2, #20]
 80022ca:	0852      	lsrs	r2, r2, #1
 80022cc:	3a01      	subs	r2, #1
 80022ce:	0652      	lsls	r2, r2, #25
 80022d0:	430a      	orrs	r2, r1
 80022d2:	4916      	ldr	r1, [pc, #88]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a13      	ldr	r2, [pc, #76]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe fb40 	bl	8000968 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022ea:	e009      	b.n	8002300 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022ec:	f7fe fb3c 	bl	8000968 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d902      	bls.n	8002300 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	73fb      	strb	r3, [r7, #15]
          break;
 80022fe:	e005      	b.n	800230c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ef      	beq.n	80022ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	4904      	ldr	r1, [pc, #16]	; (800232c <RCCEx_PLLSAI1_Config+0x1e4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000

08002330 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800233e:	4b6a      	ldr	r3, [pc, #424]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d018      	beq.n	800237c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800234a:	4b67      	ldr	r3, [pc, #412]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0203 	and.w	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d10d      	bne.n	8002376 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
       ||
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002362:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
       ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d047      	beq.n	8002406 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	e044      	b.n	8002406 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d018      	beq.n	80023b6 <RCCEx_PLLSAI2_Config+0x86>
 8002384:	2b03      	cmp	r3, #3
 8002386:	d825      	bhi.n	80023d4 <RCCEx_PLLSAI2_Config+0xa4>
 8002388:	2b01      	cmp	r3, #1
 800238a:	d002      	beq.n	8002392 <RCCEx_PLLSAI2_Config+0x62>
 800238c:	2b02      	cmp	r3, #2
 800238e:	d009      	beq.n	80023a4 <RCCEx_PLLSAI2_Config+0x74>
 8002390:	e020      	b.n	80023d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002392:	4b55      	ldr	r3, [pc, #340]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11d      	bne.n	80023da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a2:	e01a      	b.n	80023da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d116      	bne.n	80023de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b4:	e013      	b.n	80023de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023b6:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10f      	bne.n	80023e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023c2:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023d2:	e006      	b.n	80023e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      break;
 80023d8:	e004      	b.n	80023e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80023da:	bf00      	nop
 80023dc:	e002      	b.n	80023e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80023de:	bf00      	nop
 80023e0:	e000      	b.n	80023e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80023e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023ea:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6819      	ldr	r1, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	430b      	orrs	r3, r1
 8002400:	4939      	ldr	r1, [pc, #228]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002402:	4313      	orrs	r3, r2
 8002404:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d167      	bne.n	80024dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800240c:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a35      	ldr	r2, [pc, #212]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002418:	f7fe faa6 	bl	8000968 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800241e:	e009      	b.n	8002434 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002420:	f7fe faa2 	bl	8000968 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d902      	bls.n	8002434 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	73fb      	strb	r3, [r7, #15]
        break;
 8002432:	e005      	b.n	8002440 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ef      	bne.n	8002420 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d14a      	bne.n	80024dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d111      	bne.n	8002470 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6892      	ldr	r2, [r2, #8]
 800245c:	0211      	lsls	r1, r2, #8
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68d2      	ldr	r2, [r2, #12]
 8002462:	0912      	lsrs	r2, r2, #4
 8002464:	0452      	lsls	r2, r2, #17
 8002466:	430a      	orrs	r2, r1
 8002468:	491f      	ldr	r1, [pc, #124]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800246a:	4313      	orrs	r3, r2
 800246c:	614b      	str	r3, [r1, #20]
 800246e:	e011      	b.n	8002494 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002478:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6892      	ldr	r2, [r2, #8]
 8002480:	0211      	lsls	r1, r2, #8
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6912      	ldr	r2, [r2, #16]
 8002486:	0852      	lsrs	r2, r2, #1
 8002488:	3a01      	subs	r2, #1
 800248a:	0652      	lsls	r2, r2, #25
 800248c:	430a      	orrs	r2, r1
 800248e:	4916      	ldr	r1, [pc, #88]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002490:	4313      	orrs	r3, r2
 8002492:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800249a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7fe fa62 	bl	8000968 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024a6:	e009      	b.n	80024bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024a8:	f7fe fa5e 	bl	8000968 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d902      	bls.n	80024bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	73fb      	strb	r3, [r7, #15]
          break;
 80024ba:	e005      	b.n	80024c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ef      	beq.n	80024a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	4904      	ldr	r1, [pc, #16]	; (80024e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000

080024ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e040      	b.n	8002580 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe f8f8 	bl	8000704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	; 0x24
 8002518:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f82c 	bl	8002588 <UART_SetConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e022      	b.n	8002580 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fad8 	bl	8002af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fb5f 	bl	8002c3c <UART_CheckIdleState>
 800257e:	4603      	mov	r3, r0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800258c:	b08a      	sub	sp, #40	; 0x28
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4ba4      	ldr	r3, [pc, #656]	; (8002848 <UART_SetConfig+0x2c0>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a99      	ldr	r2, [pc, #612]	; (800284c <UART_SetConfig+0x2c4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	4313      	orrs	r3, r2
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a90      	ldr	r2, [pc, #576]	; (8002850 <UART_SetConfig+0x2c8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d126      	bne.n	8002660 <UART_SetConfig+0xd8>
 8002612:	4b90      	ldr	r3, [pc, #576]	; (8002854 <UART_SetConfig+0x2cc>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b03      	cmp	r3, #3
 800261e:	d81b      	bhi.n	8002658 <UART_SetConfig+0xd0>
 8002620:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <UART_SetConfig+0xa0>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002639 	.word	0x08002639
 800262c:	08002649 	.word	0x08002649
 8002630:	08002641 	.word	0x08002641
 8002634:	08002651 	.word	0x08002651
 8002638:	2301      	movs	r3, #1
 800263a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800263e:	e116      	b.n	800286e <UART_SetConfig+0x2e6>
 8002640:	2302      	movs	r3, #2
 8002642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002646:	e112      	b.n	800286e <UART_SetConfig+0x2e6>
 8002648:	2304      	movs	r3, #4
 800264a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800264e:	e10e      	b.n	800286e <UART_SetConfig+0x2e6>
 8002650:	2308      	movs	r3, #8
 8002652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002656:	e10a      	b.n	800286e <UART_SetConfig+0x2e6>
 8002658:	2310      	movs	r3, #16
 800265a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800265e:	e106      	b.n	800286e <UART_SetConfig+0x2e6>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a7c      	ldr	r2, [pc, #496]	; (8002858 <UART_SetConfig+0x2d0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d138      	bne.n	80026dc <UART_SetConfig+0x154>
 800266a:	4b7a      	ldr	r3, [pc, #488]	; (8002854 <UART_SetConfig+0x2cc>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d82d      	bhi.n	80026d4 <UART_SetConfig+0x14c>
 8002678:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <UART_SetConfig+0xf8>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	080026b5 	.word	0x080026b5
 8002684:	080026d5 	.word	0x080026d5
 8002688:	080026d5 	.word	0x080026d5
 800268c:	080026d5 	.word	0x080026d5
 8002690:	080026c5 	.word	0x080026c5
 8002694:	080026d5 	.word	0x080026d5
 8002698:	080026d5 	.word	0x080026d5
 800269c:	080026d5 	.word	0x080026d5
 80026a0:	080026bd 	.word	0x080026bd
 80026a4:	080026d5 	.word	0x080026d5
 80026a8:	080026d5 	.word	0x080026d5
 80026ac:	080026d5 	.word	0x080026d5
 80026b0:	080026cd 	.word	0x080026cd
 80026b4:	2300      	movs	r3, #0
 80026b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ba:	e0d8      	b.n	800286e <UART_SetConfig+0x2e6>
 80026bc:	2302      	movs	r3, #2
 80026be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026c2:	e0d4      	b.n	800286e <UART_SetConfig+0x2e6>
 80026c4:	2304      	movs	r3, #4
 80026c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ca:	e0d0      	b.n	800286e <UART_SetConfig+0x2e6>
 80026cc:	2308      	movs	r3, #8
 80026ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026d2:	e0cc      	b.n	800286e <UART_SetConfig+0x2e6>
 80026d4:	2310      	movs	r3, #16
 80026d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026da:	e0c8      	b.n	800286e <UART_SetConfig+0x2e6>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a5e      	ldr	r2, [pc, #376]	; (800285c <UART_SetConfig+0x2d4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d125      	bne.n	8002732 <UART_SetConfig+0x1aa>
 80026e6:	4b5b      	ldr	r3, [pc, #364]	; (8002854 <UART_SetConfig+0x2cc>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026f0:	2b30      	cmp	r3, #48	; 0x30
 80026f2:	d016      	beq.n	8002722 <UART_SetConfig+0x19a>
 80026f4:	2b30      	cmp	r3, #48	; 0x30
 80026f6:	d818      	bhi.n	800272a <UART_SetConfig+0x1a2>
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d00a      	beq.n	8002712 <UART_SetConfig+0x18a>
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d814      	bhi.n	800272a <UART_SetConfig+0x1a2>
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <UART_SetConfig+0x182>
 8002704:	2b10      	cmp	r3, #16
 8002706:	d008      	beq.n	800271a <UART_SetConfig+0x192>
 8002708:	e00f      	b.n	800272a <UART_SetConfig+0x1a2>
 800270a:	2300      	movs	r3, #0
 800270c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002710:	e0ad      	b.n	800286e <UART_SetConfig+0x2e6>
 8002712:	2302      	movs	r3, #2
 8002714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002718:	e0a9      	b.n	800286e <UART_SetConfig+0x2e6>
 800271a:	2304      	movs	r3, #4
 800271c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002720:	e0a5      	b.n	800286e <UART_SetConfig+0x2e6>
 8002722:	2308      	movs	r3, #8
 8002724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002728:	e0a1      	b.n	800286e <UART_SetConfig+0x2e6>
 800272a:	2310      	movs	r3, #16
 800272c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002730:	e09d      	b.n	800286e <UART_SetConfig+0x2e6>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a4a      	ldr	r2, [pc, #296]	; (8002860 <UART_SetConfig+0x2d8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d125      	bne.n	8002788 <UART_SetConfig+0x200>
 800273c:	4b45      	ldr	r3, [pc, #276]	; (8002854 <UART_SetConfig+0x2cc>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002746:	2bc0      	cmp	r3, #192	; 0xc0
 8002748:	d016      	beq.n	8002778 <UART_SetConfig+0x1f0>
 800274a:	2bc0      	cmp	r3, #192	; 0xc0
 800274c:	d818      	bhi.n	8002780 <UART_SetConfig+0x1f8>
 800274e:	2b80      	cmp	r3, #128	; 0x80
 8002750:	d00a      	beq.n	8002768 <UART_SetConfig+0x1e0>
 8002752:	2b80      	cmp	r3, #128	; 0x80
 8002754:	d814      	bhi.n	8002780 <UART_SetConfig+0x1f8>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <UART_SetConfig+0x1d8>
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d008      	beq.n	8002770 <UART_SetConfig+0x1e8>
 800275e:	e00f      	b.n	8002780 <UART_SetConfig+0x1f8>
 8002760:	2300      	movs	r3, #0
 8002762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002766:	e082      	b.n	800286e <UART_SetConfig+0x2e6>
 8002768:	2302      	movs	r3, #2
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800276e:	e07e      	b.n	800286e <UART_SetConfig+0x2e6>
 8002770:	2304      	movs	r3, #4
 8002772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002776:	e07a      	b.n	800286e <UART_SetConfig+0x2e6>
 8002778:	2308      	movs	r3, #8
 800277a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800277e:	e076      	b.n	800286e <UART_SetConfig+0x2e6>
 8002780:	2310      	movs	r3, #16
 8002782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002786:	e072      	b.n	800286e <UART_SetConfig+0x2e6>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a35      	ldr	r2, [pc, #212]	; (8002864 <UART_SetConfig+0x2dc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12a      	bne.n	80027e8 <UART_SetConfig+0x260>
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <UART_SetConfig+0x2cc>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027a0:	d01a      	beq.n	80027d8 <UART_SetConfig+0x250>
 80027a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027a6:	d81b      	bhi.n	80027e0 <UART_SetConfig+0x258>
 80027a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ac:	d00c      	beq.n	80027c8 <UART_SetConfig+0x240>
 80027ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b2:	d815      	bhi.n	80027e0 <UART_SetConfig+0x258>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <UART_SetConfig+0x238>
 80027b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027bc:	d008      	beq.n	80027d0 <UART_SetConfig+0x248>
 80027be:	e00f      	b.n	80027e0 <UART_SetConfig+0x258>
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c6:	e052      	b.n	800286e <UART_SetConfig+0x2e6>
 80027c8:	2302      	movs	r3, #2
 80027ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ce:	e04e      	b.n	800286e <UART_SetConfig+0x2e6>
 80027d0:	2304      	movs	r3, #4
 80027d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027d6:	e04a      	b.n	800286e <UART_SetConfig+0x2e6>
 80027d8:	2308      	movs	r3, #8
 80027da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027de:	e046      	b.n	800286e <UART_SetConfig+0x2e6>
 80027e0:	2310      	movs	r3, #16
 80027e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027e6:	e042      	b.n	800286e <UART_SetConfig+0x2e6>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a17      	ldr	r2, [pc, #92]	; (800284c <UART_SetConfig+0x2c4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d13a      	bne.n	8002868 <UART_SetConfig+0x2e0>
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <UART_SetConfig+0x2cc>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002800:	d01a      	beq.n	8002838 <UART_SetConfig+0x2b0>
 8002802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002806:	d81b      	bhi.n	8002840 <UART_SetConfig+0x2b8>
 8002808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800280c:	d00c      	beq.n	8002828 <UART_SetConfig+0x2a0>
 800280e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002812:	d815      	bhi.n	8002840 <UART_SetConfig+0x2b8>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <UART_SetConfig+0x298>
 8002818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281c:	d008      	beq.n	8002830 <UART_SetConfig+0x2a8>
 800281e:	e00f      	b.n	8002840 <UART_SetConfig+0x2b8>
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002826:	e022      	b.n	800286e <UART_SetConfig+0x2e6>
 8002828:	2302      	movs	r3, #2
 800282a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800282e:	e01e      	b.n	800286e <UART_SetConfig+0x2e6>
 8002830:	2304      	movs	r3, #4
 8002832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002836:	e01a      	b.n	800286e <UART_SetConfig+0x2e6>
 8002838:	2308      	movs	r3, #8
 800283a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800283e:	e016      	b.n	800286e <UART_SetConfig+0x2e6>
 8002840:	2310      	movs	r3, #16
 8002842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002846:	e012      	b.n	800286e <UART_SetConfig+0x2e6>
 8002848:	efff69f3 	.word	0xefff69f3
 800284c:	40008000 	.word	0x40008000
 8002850:	40013800 	.word	0x40013800
 8002854:	40021000 	.word	0x40021000
 8002858:	40004400 	.word	0x40004400
 800285c:	40004800 	.word	0x40004800
 8002860:	40004c00 	.word	0x40004c00
 8002864:	40005000 	.word	0x40005000
 8002868:	2310      	movs	r3, #16
 800286a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a9f      	ldr	r2, [pc, #636]	; (8002af0 <UART_SetConfig+0x568>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d17a      	bne.n	800296e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800287c:	2b08      	cmp	r3, #8
 800287e:	d824      	bhi.n	80028ca <UART_SetConfig+0x342>
 8002880:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <UART_SetConfig+0x300>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	080028ad 	.word	0x080028ad
 800288c:	080028cb 	.word	0x080028cb
 8002890:	080028b5 	.word	0x080028b5
 8002894:	080028cb 	.word	0x080028cb
 8002898:	080028bb 	.word	0x080028bb
 800289c:	080028cb 	.word	0x080028cb
 80028a0:	080028cb 	.word	0x080028cb
 80028a4:	080028cb 	.word	0x080028cb
 80028a8:	080028c3 	.word	0x080028c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ac:	f7ff f8d6 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 80028b0:	61f8      	str	r0, [r7, #28]
        break;
 80028b2:	e010      	b.n	80028d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028b4:	4b8f      	ldr	r3, [pc, #572]	; (8002af4 <UART_SetConfig+0x56c>)
 80028b6:	61fb      	str	r3, [r7, #28]
        break;
 80028b8:	e00d      	b.n	80028d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028ba:	f7ff f837 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80028be:	61f8      	str	r0, [r7, #28]
        break;
 80028c0:	e009      	b.n	80028d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028c6:	61fb      	str	r3, [r7, #28]
        break;
 80028c8:	e005      	b.n	80028d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80028d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80fb 	beq.w	8002ad4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d305      	bcc.n	80028fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d903      	bls.n	8002902 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002900:	e0e8      	b.n	8002ad4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	2200      	movs	r2, #0
 8002906:	461c      	mov	r4, r3
 8002908:	4615      	mov	r5, r2
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	022b      	lsls	r3, r5, #8
 8002914:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002918:	0222      	lsls	r2, r4, #8
 800291a:	68f9      	ldr	r1, [r7, #12]
 800291c:	6849      	ldr	r1, [r1, #4]
 800291e:	0849      	lsrs	r1, r1, #1
 8002920:	2000      	movs	r0, #0
 8002922:	4688      	mov	r8, r1
 8002924:	4681      	mov	r9, r0
 8002926:	eb12 0a08 	adds.w	sl, r2, r8
 800292a:	eb43 0b09 	adc.w	fp, r3, r9
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800293c:	4650      	mov	r0, sl
 800293e:	4659      	mov	r1, fp
 8002940:	f7fd fc42 	bl	80001c8 <__aeabi_uldivmod>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4613      	mov	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002952:	d308      	bcc.n	8002966 <UART_SetConfig+0x3de>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800295a:	d204      	bcs.n	8002966 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	e0b6      	b.n	8002ad4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800296c:	e0b2      	b.n	8002ad4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002976:	d15e      	bne.n	8002a36 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002978:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800297c:	2b08      	cmp	r3, #8
 800297e:	d828      	bhi.n	80029d2 <UART_SetConfig+0x44a>
 8002980:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <UART_SetConfig+0x400>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	080029ad 	.word	0x080029ad
 800298c:	080029b5 	.word	0x080029b5
 8002990:	080029bd 	.word	0x080029bd
 8002994:	080029d3 	.word	0x080029d3
 8002998:	080029c3 	.word	0x080029c3
 800299c:	080029d3 	.word	0x080029d3
 80029a0:	080029d3 	.word	0x080029d3
 80029a4:	080029d3 	.word	0x080029d3
 80029a8:	080029cb 	.word	0x080029cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ac:	f7ff f856 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 80029b0:	61f8      	str	r0, [r7, #28]
        break;
 80029b2:	e014      	b.n	80029de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029b4:	f7ff f868 	bl	8001a88 <HAL_RCC_GetPCLK2Freq>
 80029b8:	61f8      	str	r0, [r7, #28]
        break;
 80029ba:	e010      	b.n	80029de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029bc:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <UART_SetConfig+0x56c>)
 80029be:	61fb      	str	r3, [r7, #28]
        break;
 80029c0:	e00d      	b.n	80029de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029c2:	f7fe ffb3 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80029c6:	61f8      	str	r0, [r7, #28]
        break;
 80029c8:	e009      	b.n	80029de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ce:	61fb      	str	r3, [r7, #28]
        break;
 80029d0:	e005      	b.n	80029de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80029dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d077      	beq.n	8002ad4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005a      	lsls	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	441a      	add	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d916      	bls.n	8002a2e <UART_SetConfig+0x4a6>
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a06:	d212      	bcs.n	8002a2e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f023 030f 	bic.w	r3, r3, #15
 8002a10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	8afb      	ldrh	r3, [r7, #22]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	8afa      	ldrh	r2, [r7, #22]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	e052      	b.n	8002ad4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a34:	e04e      	b.n	8002ad4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d827      	bhi.n	8002a8e <UART_SetConfig+0x506>
 8002a3e:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <UART_SetConfig+0x4bc>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002a69 	.word	0x08002a69
 8002a48:	08002a71 	.word	0x08002a71
 8002a4c:	08002a79 	.word	0x08002a79
 8002a50:	08002a8f 	.word	0x08002a8f
 8002a54:	08002a7f 	.word	0x08002a7f
 8002a58:	08002a8f 	.word	0x08002a8f
 8002a5c:	08002a8f 	.word	0x08002a8f
 8002a60:	08002a8f 	.word	0x08002a8f
 8002a64:	08002a87 	.word	0x08002a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a68:	f7fe fff8 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8002a6c:	61f8      	str	r0, [r7, #28]
        break;
 8002a6e:	e014      	b.n	8002a9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a70:	f7ff f80a 	bl	8001a88 <HAL_RCC_GetPCLK2Freq>
 8002a74:	61f8      	str	r0, [r7, #28]
        break;
 8002a76:	e010      	b.n	8002a9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <UART_SetConfig+0x56c>)
 8002a7a:	61fb      	str	r3, [r7, #28]
        break;
 8002a7c:	e00d      	b.n	8002a9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a7e:	f7fe ff55 	bl	800192c <HAL_RCC_GetSysClockFreq>
 8002a82:	61f8      	str	r0, [r7, #28]
        break;
 8002a84:	e009      	b.n	8002a9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a8a:	61fb      	str	r3, [r7, #28]
        break;
 8002a8c:	e005      	b.n	8002a9a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a98:	bf00      	nop
    }

    if (pclk != 0U)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d019      	beq.n	8002ad4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	085a      	lsrs	r2, r3, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	441a      	add	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	d909      	bls.n	8002ace <UART_SetConfig+0x546>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac0:	d205      	bcs.n	8002ace <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60da      	str	r2, [r3, #12]
 8002acc:	e002      	b.n	8002ad4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ae0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3728      	adds	r7, #40	; 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aee:	bf00      	nop
 8002af0:	40008000 	.word	0x40008000
 8002af4:	00f42400 	.word	0x00f42400

08002af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01a      	beq.n	8002c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf6:	d10a      	bne.n	8002c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  }
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c4c:	f7fd fe8c 	bl	8000968 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d10e      	bne.n	8002c7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f82d 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e023      	b.n	8002cc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d10e      	bne.n	8002caa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f817 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e00d      	b.n	8002cc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2220      	movs	r2, #32
 8002cae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b09c      	sub	sp, #112	; 0x70
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cde:	e0a5      	b.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce6:	f000 80a1 	beq.w	8002e2c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cea:	f7fd fe3d 	bl	8000968 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d302      	bcc.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x32>
 8002cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d13e      	bne.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d14:	667b      	str	r3, [r7, #100]	; 0x64
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d20:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e6      	bne.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3308      	adds	r3, #8
 8002d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	663b      	str	r3, [r7, #96]	; 0x60
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d52:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e5      	bne.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e067      	b.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d04f      	beq.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9a:	d147      	bne.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002da4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	e853 3f00 	ldrex	r3, [r3]
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e6      	bne.n	8002da6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3308      	adds	r3, #8
 8002dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	613b      	str	r3, [r7, #16]
   return(result);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	66bb      	str	r3, [r7, #104]	; 0x68
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3308      	adds	r3, #8
 8002df6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002df8:	623a      	str	r2, [r7, #32]
 8002dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	69f9      	ldr	r1, [r7, #28]
 8002dfe:	6a3a      	ldr	r2, [r7, #32]
 8002e00:	e841 2300 	strex	r3, r2, [r1]
 8002e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e5      	bne.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e010      	b.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	f43f af4a 	beq.w	8002ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3770      	adds	r7, #112	; 0x70
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <__libc_init_array>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	4d0d      	ldr	r5, [pc, #52]	; (8002e90 <__libc_init_array+0x38>)
 8002e5c:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <__libc_init_array+0x3c>)
 8002e5e:	1b64      	subs	r4, r4, r5
 8002e60:	10a4      	asrs	r4, r4, #2
 8002e62:	2600      	movs	r6, #0
 8002e64:	42a6      	cmp	r6, r4
 8002e66:	d109      	bne.n	8002e7c <__libc_init_array+0x24>
 8002e68:	4d0b      	ldr	r5, [pc, #44]	; (8002e98 <__libc_init_array+0x40>)
 8002e6a:	4c0c      	ldr	r4, [pc, #48]	; (8002e9c <__libc_init_array+0x44>)
 8002e6c:	f000 f820 	bl	8002eb0 <_init>
 8002e70:	1b64      	subs	r4, r4, r5
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	2600      	movs	r6, #0
 8002e76:	42a6      	cmp	r6, r4
 8002e78:	d105      	bne.n	8002e86 <__libc_init_array+0x2e>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e80:	4798      	blx	r3
 8002e82:	3601      	adds	r6, #1
 8002e84:	e7ee      	b.n	8002e64 <__libc_init_array+0xc>
 8002e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8a:	4798      	blx	r3
 8002e8c:	3601      	adds	r6, #1
 8002e8e:	e7f2      	b.n	8002e76 <__libc_init_array+0x1e>
 8002e90:	08002f18 	.word	0x08002f18
 8002e94:	08002f18 	.word	0x08002f18
 8002e98:	08002f18 	.word	0x08002f18
 8002e9c:	08002f1c 	.word	0x08002f1c

08002ea0 <memset>:
 8002ea0:	4402      	add	r2, r0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <memset+0xa>
 8002ea8:	4770      	bx	lr
 8002eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002eae:	e7f9      	b.n	8002ea4 <memset+0x4>

08002eb0 <_init>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr

08002ebc <_fini>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr
